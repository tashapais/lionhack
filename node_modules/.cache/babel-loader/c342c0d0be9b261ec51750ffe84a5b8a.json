{"ast":null,"code":"import { SystemProgram, Transaction } from '@solana/web3.js';\nconst createTransferTransaction = async (ownerPubkey, connection, fromTokenAccountPubkey, toTokenAccountPubkey, tokenToTransferLamports) => {\n  let transaction = new Transaction().add(SystemProgram.transfer({\n    fromPubkey: fromTokenAccountPubkey,\n    toPubkey: toTokenAccountPubkey,\n    lamports: tokenToTransferLamports\n  }));\n  transaction.feePayer = ownerPubkey;\n  console.log('Getting recent blockhash');\n  transaction.recentBlockhash = (await connection.getRecentBlockhash()).blockhash;\n  return transaction;\n};\n\n/**\n * This utility function will transfer the token from one user wallet to another user's wallet\n * @param {*} provider : provider of the phantom wallet\n * @param {*} connection : connection to the solana cluster\n * @param {*} tokenToTransfer : tokens to be transferred in lamports\n * @param {*} fromTokenAccountPubkey : sender of the token\n * @param {*} toTokenAccountPubkey : receiver of the token\n * @returns \n */\n\nexport const transferCustomToken = async (provider, connection, tokenToTransfer, fromTokenAccountPubkey, toTokenAccountPubkey) => {\n  if (tokenToTransfer <= 0) {\n    return {\n      status: false,\n      error: \"You can not transfer, Token to transfer should be greater than 0.\"\n    };\n  }\n  const tokenToTransferLamports = tokenToTransfer * 1000000000;\n  const transaction = await createTransferTransaction(provider.publicKey, connection, fromTokenAccountPubkey, toTokenAccountPubkey, tokenToTransferLamports);\n  if (transaction) {\n    try {\n      let signed = await provider.signTransaction(transaction);\n      console.log('Got signature, submitting transaction');\n      let signature = await connection.sendRawTransaction(signed.serialize());\n      console.log('Submitted transaction ' + signature + ', awaiting confirmation');\n      await connection.confirmTransaction(signature);\n      console.log('Transaction ' + signature + ' confirmed');\n      return {\n        status: true,\n        signature\n      };\n    } catch (e) {\n      console.warn(e);\n      console.log('Error: ' + e.message);\n      return {\n        status: false,\n        error: e.message\n      };\n    }\n  }\n  return {\n    status: false,\n    error: \"No transaction found\"\n  };\n};","map":{"version":3,"names":["SystemProgram","Transaction","createTransferTransaction","ownerPubkey","connection","fromTokenAccountPubkey","toTokenAccountPubkey","tokenToTransferLamports","transaction","add","transfer","fromPubkey","toPubkey","lamports","feePayer","console","log","recentBlockhash","getRecentBlockhash","blockhash","transferCustomToken","provider","tokenToTransfer","status","error","publicKey","signed","signTransaction","signature","sendRawTransaction","serialize","confirmTransaction","e","warn","message"],"sources":["/Users/tashapais/Documents/Github/lionhack/src/utils/transferToken.js"],"sourcesContent":["import { SystemProgram, Transaction } from '@solana/web3.js'\n\nconst createTransferTransaction = async (ownerPubkey, connection, fromTokenAccountPubkey, toTokenAccountPubkey, tokenToTransferLamports) => {\n\n  let transaction = new Transaction().add(\n    SystemProgram.transfer({\n      fromPubkey: fromTokenAccountPubkey,\n      toPubkey: toTokenAccountPubkey,\n      lamports: tokenToTransferLamports\n    })\n  );\n  transaction.feePayer = ownerPubkey;\n  console.log('Getting recent blockhash');\n  transaction.recentBlockhash = (\n    await connection.getRecentBlockhash()\n  ).blockhash;\n  return transaction;\n};\n\n/**\n * This utility function will transfer the token from one user wallet to another user's wallet\n * @param {*} provider : provider of the phantom wallet\n * @param {*} connection : connection to the solana cluster\n * @param {*} tokenToTransfer : tokens to be transferred in lamports\n * @param {*} fromTokenAccountPubkey : sender of the token\n * @param {*} toTokenAccountPubkey : receiver of the token\n * @returns \n */\n\nexport const transferCustomToken = async (provider, connection, tokenToTransfer, fromTokenAccountPubkey, toTokenAccountPubkey) => {\n\n  if (tokenToTransfer <= 0) {\n    return { status: false, error: \"You can not transfer, Token to transfer should be greater than 0.\" }\n  }\n  const tokenToTransferLamports = tokenToTransfer * 1000000000\n  const transaction = await createTransferTransaction(provider.publicKey, connection, fromTokenAccountPubkey, toTokenAccountPubkey, tokenToTransferLamports);\n\n  if (transaction) {\n    try {\n      let signed = await provider.signTransaction(transaction);\n      console.log('Got signature, submitting transaction');\n\n      let signature = await connection.sendRawTransaction(signed.serialize());\n      console.log('Submitted transaction ' + signature + ', awaiting confirmation');\n\n      await connection.confirmTransaction(signature);\n      console.log('Transaction ' + signature + ' confirmed');\n\n      return { status: true, signature }\n\n    } catch (e) {\n      \n      console.warn(e);\n      console.log('Error: ' + e.message);\n      return { status: false, error: e.message }\n    }\n  }\n  return {\n    status: false,\n    error: \"No transaction found\"\n  }\n}\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,WAAW,QAAQ,iBAAiB;AAE5D,MAAMC,yBAAyB,GAAG,MAAAA,CAAOC,WAAW,EAAEC,UAAU,EAAEC,sBAAsB,EAAEC,oBAAoB,EAAEC,uBAAuB,KAAK;EAE1I,IAAIC,WAAW,GAAG,IAAIP,WAAW,EAAE,CAACQ,GAAG,CACrCT,aAAa,CAACU,QAAQ,CAAC;IACrBC,UAAU,EAAEN,sBAAsB;IAClCO,QAAQ,EAAEN,oBAAoB;IAC9BO,QAAQ,EAAEN;EACZ,CAAC,CAAC,CACH;EACDC,WAAW,CAACM,QAAQ,GAAGX,WAAW;EAClCY,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;EACvCR,WAAW,CAACS,eAAe,GAAG,CAC5B,MAAMb,UAAU,CAACc,kBAAkB,EAAE,EACrCC,SAAS;EACX,OAAOX,WAAW;AACpB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMY,mBAAmB,GAAG,MAAAA,CAAOC,QAAQ,EAAEjB,UAAU,EAAEkB,eAAe,EAAEjB,sBAAsB,EAAEC,oBAAoB,KAAK;EAEhI,IAAIgB,eAAe,IAAI,CAAC,EAAE;IACxB,OAAO;MAAEC,MAAM,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAoE,CAAC;EACtG;EACA,MAAMjB,uBAAuB,GAAGe,eAAe,GAAG,UAAU;EAC5D,MAAMd,WAAW,GAAG,MAAMN,yBAAyB,CAACmB,QAAQ,CAACI,SAAS,EAAErB,UAAU,EAAEC,sBAAsB,EAAEC,oBAAoB,EAAEC,uBAAuB,CAAC;EAE1J,IAAIC,WAAW,EAAE;IACf,IAAI;MACF,IAAIkB,MAAM,GAAG,MAAML,QAAQ,CAACM,eAAe,CAACnB,WAAW,CAAC;MACxDO,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;MAEpD,IAAIY,SAAS,GAAG,MAAMxB,UAAU,CAACyB,kBAAkB,CAACH,MAAM,CAACI,SAAS,EAAE,CAAC;MACvEf,OAAO,CAACC,GAAG,CAAC,wBAAwB,GAAGY,SAAS,GAAG,yBAAyB,CAAC;MAE7E,MAAMxB,UAAU,CAAC2B,kBAAkB,CAACH,SAAS,CAAC;MAC9Cb,OAAO,CAACC,GAAG,CAAC,cAAc,GAAGY,SAAS,GAAG,YAAY,CAAC;MAEtD,OAAO;QAAEL,MAAM,EAAE,IAAI;QAAEK;MAAU,CAAC;IAEpC,CAAC,CAAC,OAAOI,CAAC,EAAE;MAEVjB,OAAO,CAACkB,IAAI,CAACD,CAAC,CAAC;MACfjB,OAAO,CAACC,GAAG,CAAC,SAAS,GAAGgB,CAAC,CAACE,OAAO,CAAC;MAClC,OAAO;QAAEX,MAAM,EAAE,KAAK;QAAEC,KAAK,EAAEQ,CAAC,CAACE;MAAQ,CAAC;IAC5C;EACF;EACA,OAAO;IACLX,MAAM,EAAE,KAAK;IACbC,KAAK,EAAE;EACT,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module"}