{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport BN from 'bn.js';\nimport { sendAndConfirmTransaction as sendAndConfirmTransaction$1, PublicKey, Keypair, Transaction, SystemProgram, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nvar buffer = {};\nvar base64Js = {};\nbase64Js.byteLength = byteLength;\nbase64Js.toByteArray = toByteArray;\nbase64Js.fromByteArray = fromByteArray;\nvar lookup = [];\nvar revLookup = [];\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i];\n  revLookup[code.charCodeAt(i)] = i;\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62;\nrevLookup['_'.charCodeAt(0)] = 63;\nfunction getLens(b64) {\n  var len = b64.length;\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4');\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=');\n  if (validLen === -1) validLen = len;\n  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;\n  return [validLen, placeHoldersLen];\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength(b64) {\n  var lens = getLens(b64);\n  var validLen = lens[0];\n  var placeHoldersLen = lens[1];\n  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\nfunction _byteLength(b64, validLen, placeHoldersLen) {\n  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\nfunction toByteArray(b64) {\n  var tmp;\n  var lens = getLens(b64);\n  var validLen = lens[0];\n  var placeHoldersLen = lens[1];\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n  var curByte = 0;\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n  var i;\n  for (i = 0; i < len; i += 4) {\n    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n    arr[curByte++] = tmp >> 16 & 0xFF;\n    arr[curByte++] = tmp >> 8 & 0xFF;\n    arr[curByte++] = tmp & 0xFF;\n  }\n  if (placeHoldersLen === 2) {\n    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n    arr[curByte++] = tmp & 0xFF;\n  }\n  if (placeHoldersLen === 1) {\n    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n    arr[curByte++] = tmp >> 8 & 0xFF;\n    arr[curByte++] = tmp & 0xFF;\n  }\n  return arr;\n}\nfunction tripletToBase64(num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];\n}\nfunction encodeChunk(uint8, start, end) {\n  var tmp;\n  var output = [];\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);\n    output.push(tripletToBase64(tmp));\n  }\n  return output.join('');\n}\nfunction fromByteArray(uint8) {\n  var tmp;\n  var len = uint8.length;\n  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n  var parts = [];\n  var maxChunkLength = 16383; // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1];\n    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');\n  }\n  return parts.join('');\n}\nvar ieee754 = {};\n\n/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\n\nieee754.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = -7;\n  var i = isLE ? nBytes - 1 : 0;\n  var d = isLE ? -1 : 1;\n  var s = buffer[offset + i];\n  i += d;\n  e = s & (1 << -nBits) - 1;\n  s >>= -nBits;\n  nBits += eLen;\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n  m = e & (1 << -nBits) - 1;\n  e >>= -nBits;\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : (s ? -1 : 1) * Infinity;\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n};\nieee754.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n  var i = isLE ? 0 : nBytes - 1;\n  var d = isLE ? 1 : -1;\n  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n  value = Math.abs(value);\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n  e = e << mLen | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n  buffer[offset + i - d] |= s * 128;\n};\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n(function (exports) {\n  const base64 = base64Js;\n  const ieee754$1 = ieee754;\n  const customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' // eslint-disable-line dot-notation\n  ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n  : null;\n  exports.Buffer = Buffer;\n  exports.SlowBuffer = SlowBuffer;\n  exports.INSPECT_MAX_BYTES = 50;\n  const K_MAX_LENGTH = 0x7fffffff;\n  exports.kMaxLength = K_MAX_LENGTH;\n\n  /**\n   * If `Buffer.TYPED_ARRAY_SUPPORT`:\n   *   === true    Use Uint8Array implementation (fastest)\n   *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n   *               implementation (most compatible, even IE6)\n   *\n   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n   * Opera 11.6+, iOS 4.2+.\n   *\n   * We report that the browser does not support typed arrays if the are not subclassable\n   * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n   * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n   * for __proto__ and has a buggy typed array implementation.\n   */\n  Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();\n  if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');\n  }\n  function typedArraySupport() {\n    // Can typed array instances can be augmented?\n    try {\n      const arr = new Uint8Array(1);\n      const proto = {\n        foo: function () {\n          return 42;\n        }\n      };\n      Object.setPrototypeOf(proto, Uint8Array.prototype);\n      Object.setPrototypeOf(arr, proto);\n      return arr.foo() === 42;\n    } catch (e) {\n      return false;\n    }\n  }\n  Object.defineProperty(Buffer.prototype, 'parent', {\n    enumerable: true,\n    get: function () {\n      if (!Buffer.isBuffer(this)) return undefined;\n      return this.buffer;\n    }\n  });\n  Object.defineProperty(Buffer.prototype, 'offset', {\n    enumerable: true,\n    get: function () {\n      if (!Buffer.isBuffer(this)) return undefined;\n      return this.byteOffset;\n    }\n  });\n  function createBuffer(length) {\n    if (length > K_MAX_LENGTH) {\n      throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n    }\n    // Return an augmented `Uint8Array` instance\n    const buf = new Uint8Array(length);\n    Object.setPrototypeOf(buf, Buffer.prototype);\n    return buf;\n  }\n\n  /**\n   * The Buffer constructor returns instances of `Uint8Array` that have their\n   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n   * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n   * returns a single octet.\n   *\n   * The `Uint8Array` prototype remains unmodified.\n   */\n\n  function Buffer(arg, encodingOrOffset, length) {\n    // Common case.\n    if (typeof arg === 'number') {\n      if (typeof encodingOrOffset === 'string') {\n        throw new TypeError('The \"string\" argument must be of type string. Received type number');\n      }\n      return allocUnsafe(arg);\n    }\n    return from(arg, encodingOrOffset, length);\n  }\n  Buffer.poolSize = 8192; // not used by this implementation\n\n  function from(value, encodingOrOffset, length) {\n    if (typeof value === 'string') {\n      return fromString(value, encodingOrOffset);\n    }\n    if (ArrayBuffer.isView(value)) {\n      return fromArrayView(value);\n    }\n    if (value == null) {\n      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);\n    }\n    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {\n      return fromArrayBuffer(value, encodingOrOffset, length);\n    }\n    if (typeof SharedArrayBuffer !== 'undefined' && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {\n      return fromArrayBuffer(value, encodingOrOffset, length);\n    }\n    if (typeof value === 'number') {\n      throw new TypeError('The \"value\" argument must not be of type number. Received type number');\n    }\n    const valueOf = value.valueOf && value.valueOf();\n    if (valueOf != null && valueOf !== value) {\n      return Buffer.from(valueOf, encodingOrOffset, length);\n    }\n    const b = fromObject(value);\n    if (b) return b;\n    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') {\n      return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);\n    }\n    throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);\n  }\n\n  /**\n   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n   * if value is a number.\n   * Buffer.from(str[, encoding])\n   * Buffer.from(array)\n   * Buffer.from(buffer)\n   * Buffer.from(arrayBuffer[, byteOffset[, length]])\n   **/\n  Buffer.from = function (value, encodingOrOffset, length) {\n    return from(value, encodingOrOffset, length);\n  };\n\n  // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n  // https://github.com/feross/buffer/pull/148\n  Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);\n  Object.setPrototypeOf(Buffer, Uint8Array);\n  function assertSize(size) {\n    if (typeof size !== 'number') {\n      throw new TypeError('\"size\" argument must be of type number');\n    } else if (size < 0) {\n      throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n    }\n  }\n  function alloc(size, fill, encoding) {\n    assertSize(size);\n    if (size <= 0) {\n      return createBuffer(size);\n    }\n    if (fill !== undefined) {\n      // Only pay attention to encoding if it's a string. This\n      // prevents accidentally sending in a number that would\n      // be interpreted as a start offset.\n      return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);\n    }\n    return createBuffer(size);\n  }\n\n  /**\n   * Creates a new filled Buffer instance.\n   * alloc(size[, fill[, encoding]])\n   **/\n  Buffer.alloc = function (size, fill, encoding) {\n    return alloc(size, fill, encoding);\n  };\n  function allocUnsafe(size) {\n    assertSize(size);\n    return createBuffer(size < 0 ? 0 : checked(size) | 0);\n  }\n\n  /**\n   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n   * */\n  Buffer.allocUnsafe = function (size) {\n    return allocUnsafe(size);\n  };\n  /**\n   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n   */\n  Buffer.allocUnsafeSlow = function (size) {\n    return allocUnsafe(size);\n  };\n  function fromString(string, encoding) {\n    if (typeof encoding !== 'string' || encoding === '') {\n      encoding = 'utf8';\n    }\n    if (!Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding);\n    }\n    const length = byteLength(string, encoding) | 0;\n    let buf = createBuffer(length);\n    const actual = buf.write(string, encoding);\n    if (actual !== length) {\n      // Writing a hex string, for example, that contains invalid characters will\n      // cause everything after the first invalid character to be ignored. (e.g.\n      // 'abxxcd' will be treated as 'ab')\n      buf = buf.slice(0, actual);\n    }\n    return buf;\n  }\n  function fromArrayLike(array) {\n    const length = array.length < 0 ? 0 : checked(array.length) | 0;\n    const buf = createBuffer(length);\n    for (let i = 0; i < length; i += 1) {\n      buf[i] = array[i] & 255;\n    }\n    return buf;\n  }\n  function fromArrayView(arrayView) {\n    if (isInstance(arrayView, Uint8Array)) {\n      const copy = new Uint8Array(arrayView);\n      return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);\n    }\n    return fromArrayLike(arrayView);\n  }\n  function fromArrayBuffer(array, byteOffset, length) {\n    if (byteOffset < 0 || array.byteLength < byteOffset) {\n      throw new RangeError('\"offset\" is outside of buffer bounds');\n    }\n    if (array.byteLength < byteOffset + (length || 0)) {\n      throw new RangeError('\"length\" is outside of buffer bounds');\n    }\n    let buf;\n    if (byteOffset === undefined && length === undefined) {\n      buf = new Uint8Array(array);\n    } else if (length === undefined) {\n      buf = new Uint8Array(array, byteOffset);\n    } else {\n      buf = new Uint8Array(array, byteOffset, length);\n    }\n\n    // Return an augmented `Uint8Array` instance\n    Object.setPrototypeOf(buf, Buffer.prototype);\n    return buf;\n  }\n  function fromObject(obj) {\n    if (Buffer.isBuffer(obj)) {\n      const len = checked(obj.length) | 0;\n      const buf = createBuffer(len);\n      if (buf.length === 0) {\n        return buf;\n      }\n      obj.copy(buf, 0, 0, len);\n      return buf;\n    }\n    if (obj.length !== undefined) {\n      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n        return createBuffer(0);\n      }\n      return fromArrayLike(obj);\n    }\n    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n      return fromArrayLike(obj.data);\n    }\n  }\n  function checked(length) {\n    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n    // length is NaN (which is otherwise coerced to zero.)\n    if (length >= K_MAX_LENGTH) {\n      throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');\n    }\n    return length | 0;\n  }\n  function SlowBuffer(length) {\n    if (+length != length) {\n      // eslint-disable-line eqeqeq\n      length = 0;\n    }\n    return Buffer.alloc(+length);\n  }\n  Buffer.isBuffer = function isBuffer(b) {\n    return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false\n  };\n\n  Buffer.compare = function compare(a, b) {\n    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);\n    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);\n    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n      throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');\n    }\n    if (a === b) return 0;\n    let x = a.length;\n    let y = b.length;\n    for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n      if (a[i] !== b[i]) {\n        x = a[i];\n        y = b[i];\n        break;\n      }\n    }\n    if (x < y) return -1;\n    if (y < x) return 1;\n    return 0;\n  };\n  Buffer.isEncoding = function isEncoding(encoding) {\n    switch (String(encoding).toLowerCase()) {\n      case 'hex':\n      case 'utf8':\n      case 'utf-8':\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n      case 'base64':\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return true;\n      default:\n        return false;\n    }\n  };\n  Buffer.concat = function concat(list, length) {\n    if (!Array.isArray(list)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers');\n    }\n    if (list.length === 0) {\n      return Buffer.alloc(0);\n    }\n    let i;\n    if (length === undefined) {\n      length = 0;\n      for (i = 0; i < list.length; ++i) {\n        length += list[i].length;\n      }\n    }\n    const buffer = Buffer.allocUnsafe(length);\n    let pos = 0;\n    for (i = 0; i < list.length; ++i) {\n      let buf = list[i];\n      if (isInstance(buf, Uint8Array)) {\n        if (pos + buf.length > buffer.length) {\n          if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);\n          buf.copy(buffer, pos);\n        } else {\n          Uint8Array.prototype.set.call(buffer, buf, pos);\n        }\n      } else if (!Buffer.isBuffer(buf)) {\n        throw new TypeError('\"list\" argument must be an Array of Buffers');\n      } else {\n        buf.copy(buffer, pos);\n      }\n      pos += buf.length;\n    }\n    return buffer;\n  };\n  function byteLength(string, encoding) {\n    if (Buffer.isBuffer(string)) {\n      return string.length;\n    }\n    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n      return string.byteLength;\n    }\n    if (typeof string !== 'string') {\n      throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' + 'Received type ' + typeof string);\n    }\n    const len = string.length;\n    const mustMatch = arguments.length > 2 && arguments[2] === true;\n    if (!mustMatch && len === 0) return 0;\n\n    // Use a for loop to avoid recursion\n    let loweredCase = false;\n    for (;;) {\n      switch (encoding) {\n        case 'ascii':\n        case 'latin1':\n        case 'binary':\n          return len;\n        case 'utf8':\n        case 'utf-8':\n          return utf8ToBytes(string).length;\n        case 'ucs2':\n        case 'ucs-2':\n        case 'utf16le':\n        case 'utf-16le':\n          return len * 2;\n        case 'hex':\n          return len >>> 1;\n        case 'base64':\n          return base64ToBytes(string).length;\n        default:\n          if (loweredCase) {\n            return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8\n          }\n\n          encoding = ('' + encoding).toLowerCase();\n          loweredCase = true;\n      }\n    }\n  }\n  Buffer.byteLength = byteLength;\n  function slowToString(encoding, start, end) {\n    let loweredCase = false;\n\n    // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n    // property of a typed array.\n\n    // This behaves neither like String nor Uint8Array in that we set start/end\n    // to their upper/lower bounds if the value passed is out of range.\n    // undefined is handled specially as per ECMA-262 6th Edition,\n    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n    if (start === undefined || start < 0) {\n      start = 0;\n    }\n    // Return early if start > this.length. Done here to prevent potential uint32\n    // coercion fail below.\n    if (start > this.length) {\n      return '';\n    }\n    if (end === undefined || end > this.length) {\n      end = this.length;\n    }\n    if (end <= 0) {\n      return '';\n    }\n\n    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n    end >>>= 0;\n    start >>>= 0;\n    if (end <= start) {\n      return '';\n    }\n    if (!encoding) encoding = 'utf8';\n    while (true) {\n      switch (encoding) {\n        case 'hex':\n          return hexSlice(this, start, end);\n        case 'utf8':\n        case 'utf-8':\n          return utf8Slice(this, start, end);\n        case 'ascii':\n          return asciiSlice(this, start, end);\n        case 'latin1':\n        case 'binary':\n          return latin1Slice(this, start, end);\n        case 'base64':\n          return base64Slice(this, start, end);\n        case 'ucs2':\n        case 'ucs-2':\n        case 'utf16le':\n        case 'utf-16le':\n          return utf16leSlice(this, start, end);\n        default:\n          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n          encoding = (encoding + '').toLowerCase();\n          loweredCase = true;\n      }\n    }\n  }\n\n  // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n  // to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n  // reliably in a browserify context because there could be multiple different\n  // copies of the 'buffer' package in use. This method works even for Buffer\n  // instances that were created from another copy of the `buffer` package.\n  // See: https://github.com/feross/buffer/issues/154\n  Buffer.prototype._isBuffer = true;\n  function swap(b, n, m) {\n    const i = b[n];\n    b[n] = b[m];\n    b[m] = i;\n  }\n  Buffer.prototype.swap16 = function swap16() {\n    const len = this.length;\n    if (len % 2 !== 0) {\n      throw new RangeError('Buffer size must be a multiple of 16-bits');\n    }\n    for (let i = 0; i < len; i += 2) {\n      swap(this, i, i + 1);\n    }\n    return this;\n  };\n  Buffer.prototype.swap32 = function swap32() {\n    const len = this.length;\n    if (len % 4 !== 0) {\n      throw new RangeError('Buffer size must be a multiple of 32-bits');\n    }\n    for (let i = 0; i < len; i += 4) {\n      swap(this, i, i + 3);\n      swap(this, i + 1, i + 2);\n    }\n    return this;\n  };\n  Buffer.prototype.swap64 = function swap64() {\n    const len = this.length;\n    if (len % 8 !== 0) {\n      throw new RangeError('Buffer size must be a multiple of 64-bits');\n    }\n    for (let i = 0; i < len; i += 8) {\n      swap(this, i, i + 7);\n      swap(this, i + 1, i + 6);\n      swap(this, i + 2, i + 5);\n      swap(this, i + 3, i + 4);\n    }\n    return this;\n  };\n  Buffer.prototype.toString = function toString() {\n    const length = this.length;\n    if (length === 0) return '';\n    if (arguments.length === 0) return utf8Slice(this, 0, length);\n    return slowToString.apply(this, arguments);\n  };\n  Buffer.prototype.toLocaleString = Buffer.prototype.toString;\n  Buffer.prototype.equals = function equals(b) {\n    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');\n    if (this === b) return true;\n    return Buffer.compare(this, b) === 0;\n  };\n  Buffer.prototype.inspect = function inspect() {\n    let str = '';\n    const max = exports.INSPECT_MAX_BYTES;\n    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();\n    if (this.length > max) str += ' ... ';\n    return '<Buffer ' + str + '>';\n  };\n  if (customInspectSymbol) {\n    Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;\n  }\n  Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n    if (isInstance(target, Uint8Array)) {\n      target = Buffer.from(target, target.offset, target.byteLength);\n    }\n    if (!Buffer.isBuffer(target)) {\n      throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. ' + 'Received type ' + typeof target);\n    }\n    if (start === undefined) {\n      start = 0;\n    }\n    if (end === undefined) {\n      end = target ? target.length : 0;\n    }\n    if (thisStart === undefined) {\n      thisStart = 0;\n    }\n    if (thisEnd === undefined) {\n      thisEnd = this.length;\n    }\n    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n      throw new RangeError('out of range index');\n    }\n    if (thisStart >= thisEnd && start >= end) {\n      return 0;\n    }\n    if (thisStart >= thisEnd) {\n      return -1;\n    }\n    if (start >= end) {\n      return 1;\n    }\n    start >>>= 0;\n    end >>>= 0;\n    thisStart >>>= 0;\n    thisEnd >>>= 0;\n    if (this === target) return 0;\n    let x = thisEnd - thisStart;\n    let y = end - start;\n    const len = Math.min(x, y);\n    const thisCopy = this.slice(thisStart, thisEnd);\n    const targetCopy = target.slice(start, end);\n    for (let i = 0; i < len; ++i) {\n      if (thisCopy[i] !== targetCopy[i]) {\n        x = thisCopy[i];\n        y = targetCopy[i];\n        break;\n      }\n    }\n    if (x < y) return -1;\n    if (y < x) return 1;\n    return 0;\n  };\n\n  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n  //\n  // Arguments:\n  // - buffer - a Buffer to search\n  // - val - a string, Buffer, or number\n  // - byteOffset - an index into `buffer`; will be clamped to an int32\n  // - encoding - an optional encoding, relevant is val is a string\n  // - dir - true for indexOf, false for lastIndexOf\n  function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n    // Empty buffer means no match\n    if (buffer.length === 0) return -1;\n\n    // Normalize byteOffset\n    if (typeof byteOffset === 'string') {\n      encoding = byteOffset;\n      byteOffset = 0;\n    } else if (byteOffset > 0x7fffffff) {\n      byteOffset = 0x7fffffff;\n    } else if (byteOffset < -0x80000000) {\n      byteOffset = -0x80000000;\n    }\n    byteOffset = +byteOffset; // Coerce to Number.\n    if (numberIsNaN(byteOffset)) {\n      // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n      byteOffset = dir ? 0 : buffer.length - 1;\n    }\n\n    // Normalize byteOffset: negative offsets start from the end of the buffer\n    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n    if (byteOffset >= buffer.length) {\n      if (dir) return -1;else byteOffset = buffer.length - 1;\n    } else if (byteOffset < 0) {\n      if (dir) byteOffset = 0;else return -1;\n    }\n\n    // Normalize val\n    if (typeof val === 'string') {\n      val = Buffer.from(val, encoding);\n    }\n\n    // Finally, search either indexOf (if dir is true) or lastIndexOf\n    if (Buffer.isBuffer(val)) {\n      // Special case: looking for empty string/buffer always fails\n      if (val.length === 0) {\n        return -1;\n      }\n      return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n    } else if (typeof val === 'number') {\n      val = val & 0xFF; // Search for a byte value [0-255]\n      if (typeof Uint8Array.prototype.indexOf === 'function') {\n        if (dir) {\n          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n        } else {\n          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n        }\n      }\n      return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n    }\n    throw new TypeError('val must be string, number or Buffer');\n  }\n  function arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n    let indexSize = 1;\n    let arrLength = arr.length;\n    let valLength = val.length;\n    if (encoding !== undefined) {\n      encoding = String(encoding).toLowerCase();\n      if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {\n        if (arr.length < 2 || val.length < 2) {\n          return -1;\n        }\n        indexSize = 2;\n        arrLength /= 2;\n        valLength /= 2;\n        byteOffset /= 2;\n      }\n    }\n    function read(buf, i) {\n      if (indexSize === 1) {\n        return buf[i];\n      } else {\n        return buf.readUInt16BE(i * indexSize);\n      }\n    }\n    let i;\n    if (dir) {\n      let foundIndex = -1;\n      for (i = byteOffset; i < arrLength; i++) {\n        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n          if (foundIndex === -1) foundIndex = i;\n          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n        } else {\n          if (foundIndex !== -1) i -= i - foundIndex;\n          foundIndex = -1;\n        }\n      }\n    } else {\n      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n      for (i = byteOffset; i >= 0; i--) {\n        let found = true;\n        for (let j = 0; j < valLength; j++) {\n          if (read(arr, i + j) !== read(val, j)) {\n            found = false;\n            break;\n          }\n        }\n        if (found) return i;\n      }\n    }\n    return -1;\n  }\n  Buffer.prototype.includes = function includes(val, byteOffset, encoding) {\n    return this.indexOf(val, byteOffset, encoding) !== -1;\n  };\n  Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n  };\n  Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n  };\n  function hexWrite(buf, string, offset, length) {\n    offset = Number(offset) || 0;\n    const remaining = buf.length - offset;\n    if (!length) {\n      length = remaining;\n    } else {\n      length = Number(length);\n      if (length > remaining) {\n        length = remaining;\n      }\n    }\n    const strLen = string.length;\n    if (length > strLen / 2) {\n      length = strLen / 2;\n    }\n    let i;\n    for (i = 0; i < length; ++i) {\n      const parsed = parseInt(string.substr(i * 2, 2), 16);\n      if (numberIsNaN(parsed)) return i;\n      buf[offset + i] = parsed;\n    }\n    return i;\n  }\n  function utf8Write(buf, string, offset, length) {\n    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n  }\n  function asciiWrite(buf, string, offset, length) {\n    return blitBuffer(asciiToBytes(string), buf, offset, length);\n  }\n  function base64Write(buf, string, offset, length) {\n    return blitBuffer(base64ToBytes(string), buf, offset, length);\n  }\n  function ucs2Write(buf, string, offset, length) {\n    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n  }\n  Buffer.prototype.write = function write(string, offset, length, encoding) {\n    // Buffer#write(string)\n    if (offset === undefined) {\n      encoding = 'utf8';\n      length = this.length;\n      offset = 0;\n      // Buffer#write(string, encoding)\n    } else if (length === undefined && typeof offset === 'string') {\n      encoding = offset;\n      length = this.length;\n      offset = 0;\n      // Buffer#write(string, offset[, length][, encoding])\n    } else if (isFinite(offset)) {\n      offset = offset >>> 0;\n      if (isFinite(length)) {\n        length = length >>> 0;\n        if (encoding === undefined) encoding = 'utf8';\n      } else {\n        encoding = length;\n        length = undefined;\n      }\n    } else {\n      throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');\n    }\n    const remaining = this.length - offset;\n    if (length === undefined || length > remaining) length = remaining;\n    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n      throw new RangeError('Attempt to write outside buffer bounds');\n    }\n    if (!encoding) encoding = 'utf8';\n    let loweredCase = false;\n    for (;;) {\n      switch (encoding) {\n        case 'hex':\n          return hexWrite(this, string, offset, length);\n        case 'utf8':\n        case 'utf-8':\n          return utf8Write(this, string, offset, length);\n        case 'ascii':\n        case 'latin1':\n        case 'binary':\n          return asciiWrite(this, string, offset, length);\n        case 'base64':\n          // Warning: maxLength not taken into account in base64Write\n          return base64Write(this, string, offset, length);\n        case 'ucs2':\n        case 'ucs-2':\n        case 'utf16le':\n        case 'utf-16le':\n          return ucs2Write(this, string, offset, length);\n        default:\n          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n          encoding = ('' + encoding).toLowerCase();\n          loweredCase = true;\n      }\n    }\n  };\n  Buffer.prototype.toJSON = function toJSON() {\n    return {\n      type: 'Buffer',\n      data: Array.prototype.slice.call(this._arr || this, 0)\n    };\n  };\n  function base64Slice(buf, start, end) {\n    if (start === 0 && end === buf.length) {\n      return base64.fromByteArray(buf);\n    } else {\n      return base64.fromByteArray(buf.slice(start, end));\n    }\n  }\n  function utf8Slice(buf, start, end) {\n    end = Math.min(buf.length, end);\n    const res = [];\n    let i = start;\n    while (i < end) {\n      const firstByte = buf[i];\n      let codePoint = null;\n      let bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;\n      if (i + bytesPerSequence <= end) {\n        let secondByte, thirdByte, fourthByte, tempCodePoint;\n        switch (bytesPerSequence) {\n          case 1:\n            if (firstByte < 0x80) {\n              codePoint = firstByte;\n            }\n            break;\n          case 2:\n            secondByte = buf[i + 1];\n            if ((secondByte & 0xC0) === 0x80) {\n              tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;\n              if (tempCodePoint > 0x7F) {\n                codePoint = tempCodePoint;\n              }\n            }\n            break;\n          case 3:\n            secondByte = buf[i + 1];\n            thirdByte = buf[i + 2];\n            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;\n              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n                codePoint = tempCodePoint;\n              }\n            }\n            break;\n          case 4:\n            secondByte = buf[i + 1];\n            thirdByte = buf[i + 2];\n            fourthByte = buf[i + 3];\n            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;\n              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n                codePoint = tempCodePoint;\n              }\n            }\n        }\n      }\n      if (codePoint === null) {\n        // we did not generate a valid codePoint so insert a\n        // replacement char (U+FFFD) and advance only 1 byte\n        codePoint = 0xFFFD;\n        bytesPerSequence = 1;\n      } else if (codePoint > 0xFFFF) {\n        // encode to utf16 (surrogate pair dance)\n        codePoint -= 0x10000;\n        res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n        codePoint = 0xDC00 | codePoint & 0x3FF;\n      }\n      res.push(codePoint);\n      i += bytesPerSequence;\n    }\n    return decodeCodePointsArray(res);\n  }\n\n  // Based on http://stackoverflow.com/a/22747272/680742, the browser with\n  // the lowest limit is Chrome, with 0x10000 args.\n  // We go 1 magnitude less, for safety\n  const MAX_ARGUMENTS_LENGTH = 0x1000;\n  function decodeCodePointsArray(codePoints) {\n    const len = codePoints.length;\n    if (len <= MAX_ARGUMENTS_LENGTH) {\n      return String.fromCharCode.apply(String, codePoints); // avoid extra slice()\n    }\n\n    // Decode in chunks to avoid \"call stack size exceeded\".\n    let res = '';\n    let i = 0;\n    while (i < len) {\n      res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\n    }\n    return res;\n  }\n  function asciiSlice(buf, start, end) {\n    let ret = '';\n    end = Math.min(buf.length, end);\n    for (let i = start; i < end; ++i) {\n      ret += String.fromCharCode(buf[i] & 0x7F);\n    }\n    return ret;\n  }\n  function latin1Slice(buf, start, end) {\n    let ret = '';\n    end = Math.min(buf.length, end);\n    for (let i = start; i < end; ++i) {\n      ret += String.fromCharCode(buf[i]);\n    }\n    return ret;\n  }\n  function hexSlice(buf, start, end) {\n    const len = buf.length;\n    if (!start || start < 0) start = 0;\n    if (!end || end < 0 || end > len) end = len;\n    let out = '';\n    for (let i = start; i < end; ++i) {\n      out += hexSliceLookupTable[buf[i]];\n    }\n    return out;\n  }\n  function utf16leSlice(buf, start, end) {\n    const bytes = buf.slice(start, end);\n    let res = '';\n    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n    for (let i = 0; i < bytes.length - 1; i += 2) {\n      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n    }\n    return res;\n  }\n  Buffer.prototype.slice = function slice(start, end) {\n    const len = this.length;\n    start = ~~start;\n    end = end === undefined ? len : ~~end;\n    if (start < 0) {\n      start += len;\n      if (start < 0) start = 0;\n    } else if (start > len) {\n      start = len;\n    }\n    if (end < 0) {\n      end += len;\n      if (end < 0) end = 0;\n    } else if (end > len) {\n      end = len;\n    }\n    if (end < start) end = start;\n    const newBuf = this.subarray(start, end);\n    // Return an augmented `Uint8Array` instance\n    Object.setPrototypeOf(newBuf, Buffer.prototype);\n    return newBuf;\n  };\n\n  /*\n   * Need to make sure that buffer isn't trying to write out of bounds.\n   */\n  function checkOffset(offset, ext, length) {\n    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');\n    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');\n  }\n  Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\n    let val = this[offset];\n    let mul = 1;\n    let i = 0;\n    while (++i < byteLength && (mul *= 0x100)) {\n      val += this[offset + i] * mul;\n    }\n    return val;\n  };\n  Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) {\n      checkOffset(offset, byteLength, this.length);\n    }\n    let val = this[offset + --byteLength];\n    let mul = 1;\n    while (byteLength > 0 && (mul *= 0x100)) {\n      val += this[offset + --byteLength] * mul;\n    }\n    return val;\n  };\n  Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 1, this.length);\n    return this[offset];\n  };\n  Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    return this[offset] | this[offset + 1] << 8;\n  };\n  Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    return this[offset] << 8 | this[offset + 1];\n  };\n  Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;\n  };\n  Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n  };\n  Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {\n    offset = offset >>> 0;\n    validateNumber(offset, 'offset');\n    const first = this[offset];\n    const last = this[offset + 7];\n    if (first === undefined || last === undefined) {\n      boundsError(offset, this.length - 8);\n    }\n    const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;\n    const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;\n    return BigInt(lo) + (BigInt(hi) << BigInt(32));\n  });\n  Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {\n    offset = offset >>> 0;\n    validateNumber(offset, 'offset');\n    const first = this[offset];\n    const last = this[offset + 7];\n    if (first === undefined || last === undefined) {\n      boundsError(offset, this.length - 8);\n    }\n    const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n    const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;\n    return (BigInt(hi) << BigInt(32)) + BigInt(lo);\n  });\n  Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\n    let val = this[offset];\n    let mul = 1;\n    let i = 0;\n    while (++i < byteLength && (mul *= 0x100)) {\n      val += this[offset + i] * mul;\n    }\n    mul *= 0x80;\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n    return val;\n  };\n  Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\n    let i = byteLength;\n    let mul = 1;\n    let val = this[offset + --i];\n    while (i > 0 && (mul *= 0x100)) {\n      val += this[offset + --i] * mul;\n    }\n    mul *= 0x80;\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n    return val;\n  };\n  Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 1, this.length);\n    if (!(this[offset] & 0x80)) return this[offset];\n    return (0xff - this[offset] + 1) * -1;\n  };\n  Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    const val = this[offset] | this[offset + 1] << 8;\n    return val & 0x8000 ? val | 0xFFFF0000 : val;\n  };\n  Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    const val = this[offset + 1] | this[offset] << 8;\n    return val & 0x8000 ? val | 0xFFFF0000 : val;\n  };\n  Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n  };\n  Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n  };\n  Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {\n    offset = offset >>> 0;\n    validateNumber(offset, 'offset');\n    const first = this[offset];\n    const last = this[offset + 7];\n    if (first === undefined || last === undefined) {\n      boundsError(offset, this.length - 8);\n    }\n    const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24); // Overflow\n\n    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);\n  });\n  Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {\n    offset = offset >>> 0;\n    validateNumber(offset, 'offset');\n    const first = this[offset];\n    const last = this[offset + 7];\n    if (first === undefined || last === undefined) {\n      boundsError(offset, this.length - 8);\n    }\n    const val = (first << 24) +\n    // Overflow\n    this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);\n  });\n  Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return ieee754$1.read(this, offset, true, 23, 4);\n  };\n  Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return ieee754$1.read(this, offset, false, 23, 4);\n  };\n  Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 8, this.length);\n    return ieee754$1.read(this, offset, true, 52, 8);\n  };\n  Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 8, this.length);\n    return ieee754$1.read(this, offset, false, 52, 8);\n  };\n  function checkInt(buf, value, offset, ext, max, min) {\n    if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n    if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds');\n    if (offset + ext > buf.length) throw new RangeError('Index out of range');\n  }\n  Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) {\n      const maxBytes = Math.pow(2, 8 * byteLength) - 1;\n      checkInt(this, value, offset, byteLength, maxBytes, 0);\n    }\n    let mul = 1;\n    let i = 0;\n    this[offset] = value & 0xFF;\n    while (++i < byteLength && (mul *= 0x100)) {\n      this[offset + i] = value / mul & 0xFF;\n    }\n    return offset + byteLength;\n  };\n  Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) {\n      const maxBytes = Math.pow(2, 8 * byteLength) - 1;\n      checkInt(this, value, offset, byteLength, maxBytes, 0);\n    }\n    let i = byteLength - 1;\n    let mul = 1;\n    this[offset + i] = value & 0xFF;\n    while (--i >= 0 && (mul *= 0x100)) {\n      this[offset + i] = value / mul & 0xFF;\n    }\n    return offset + byteLength;\n  };\n  Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n    this[offset] = value & 0xff;\n    return offset + 1;\n  };\n  Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n    return offset + 2;\n  };\n  Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n    return offset + 2;\n  };\n  Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n    this[offset + 3] = value >>> 24;\n    this[offset + 2] = value >>> 16;\n    this[offset + 1] = value >>> 8;\n    this[offset] = value & 0xff;\n    return offset + 4;\n  };\n  Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n    return offset + 4;\n  };\n  function wrtBigUInt64LE(buf, value, offset, min, max) {\n    checkIntBI(value, min, max, buf, offset, 7);\n    let lo = Number(value & BigInt(0xffffffff));\n    buf[offset++] = lo;\n    lo = lo >> 8;\n    buf[offset++] = lo;\n    lo = lo >> 8;\n    buf[offset++] = lo;\n    lo = lo >> 8;\n    buf[offset++] = lo;\n    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));\n    buf[offset++] = hi;\n    hi = hi >> 8;\n    buf[offset++] = hi;\n    hi = hi >> 8;\n    buf[offset++] = hi;\n    hi = hi >> 8;\n    buf[offset++] = hi;\n    return offset;\n  }\n  function wrtBigUInt64BE(buf, value, offset, min, max) {\n    checkIntBI(value, min, max, buf, offset, 7);\n    let lo = Number(value & BigInt(0xffffffff));\n    buf[offset + 7] = lo;\n    lo = lo >> 8;\n    buf[offset + 6] = lo;\n    lo = lo >> 8;\n    buf[offset + 5] = lo;\n    lo = lo >> 8;\n    buf[offset + 4] = lo;\n    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));\n    buf[offset + 3] = hi;\n    hi = hi >> 8;\n    buf[offset + 2] = hi;\n    hi = hi >> 8;\n    buf[offset + 1] = hi;\n    hi = hi >> 8;\n    buf[offset] = hi;\n    return offset + 8;\n  }\n  Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));\n  });\n  Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));\n  });\n  Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) {\n      const limit = Math.pow(2, 8 * byteLength - 1);\n      checkInt(this, value, offset, byteLength, limit - 1, -limit);\n    }\n    let i = 0;\n    let mul = 1;\n    let sub = 0;\n    this[offset] = value & 0xFF;\n    while (++i < byteLength && (mul *= 0x100)) {\n      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n        sub = 1;\n      }\n      this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n    }\n    return offset + byteLength;\n  };\n  Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) {\n      const limit = Math.pow(2, 8 * byteLength - 1);\n      checkInt(this, value, offset, byteLength, limit - 1, -limit);\n    }\n    let i = byteLength - 1;\n    let mul = 1;\n    let sub = 0;\n    this[offset + i] = value & 0xFF;\n    while (--i >= 0 && (mul *= 0x100)) {\n      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n        sub = 1;\n      }\n      this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n    }\n    return offset + byteLength;\n  };\n  Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n    if (value < 0) value = 0xff + value + 1;\n    this[offset] = value & 0xff;\n    return offset + 1;\n  };\n  Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n    return offset + 2;\n  };\n  Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n    return offset + 2;\n  };\n  Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n    this[offset + 2] = value >>> 16;\n    this[offset + 3] = value >>> 24;\n    return offset + 4;\n  };\n  Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n    if (value < 0) value = 0xffffffff + value + 1;\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n    return offset + 4;\n  };\n  Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));\n  });\n  Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));\n  });\n  function checkIEEE754(buf, value, offset, ext, max, min) {\n    if (offset + ext > buf.length) throw new RangeError('Index out of range');\n    if (offset < 0) throw new RangeError('Index out of range');\n  }\n  function writeFloat(buf, value, offset, littleEndian, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) {\n      checkIEEE754(buf, value, offset, 4);\n    }\n    ieee754$1.write(buf, value, offset, littleEndian, 23, 4);\n    return offset + 4;\n  }\n  Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n    return writeFloat(this, value, offset, true, noAssert);\n  };\n  Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n    return writeFloat(this, value, offset, false, noAssert);\n  };\n  function writeDouble(buf, value, offset, littleEndian, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) {\n      checkIEEE754(buf, value, offset, 8);\n    }\n    ieee754$1.write(buf, value, offset, littleEndian, 52, 8);\n    return offset + 8;\n  }\n  Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n    return writeDouble(this, value, offset, true, noAssert);\n  };\n  Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n    return writeDouble(this, value, offset, false, noAssert);\n  };\n\n  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n  Buffer.prototype.copy = function copy(target, targetStart, start, end) {\n    if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');\n    if (!start) start = 0;\n    if (!end && end !== 0) end = this.length;\n    if (targetStart >= target.length) targetStart = target.length;\n    if (!targetStart) targetStart = 0;\n    if (end > 0 && end < start) end = start;\n\n    // Copy 0 bytes; we're done\n    if (end === start) return 0;\n    if (target.length === 0 || this.length === 0) return 0;\n\n    // Fatal error conditions\n    if (targetStart < 0) {\n      throw new RangeError('targetStart out of bounds');\n    }\n    if (start < 0 || start >= this.length) throw new RangeError('Index out of range');\n    if (end < 0) throw new RangeError('sourceEnd out of bounds');\n\n    // Are we oob?\n    if (end > this.length) end = this.length;\n    if (target.length - targetStart < end - start) {\n      end = target.length - targetStart + start;\n    }\n    const len = end - start;\n    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n      // Use built-in when available, missing from IE11\n      this.copyWithin(targetStart, start, end);\n    } else {\n      Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);\n    }\n    return len;\n  };\n\n  // Usage:\n  //    buffer.fill(number[, offset[, end]])\n  //    buffer.fill(buffer[, offset[, end]])\n  //    buffer.fill(string[, offset[, end]][, encoding])\n  Buffer.prototype.fill = function fill(val, start, end, encoding) {\n    // Handle string cases:\n    if (typeof val === 'string') {\n      if (typeof start === 'string') {\n        encoding = start;\n        start = 0;\n        end = this.length;\n      } else if (typeof end === 'string') {\n        encoding = end;\n        end = this.length;\n      }\n      if (encoding !== undefined && typeof encoding !== 'string') {\n        throw new TypeError('encoding must be a string');\n      }\n      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n        throw new TypeError('Unknown encoding: ' + encoding);\n      }\n      if (val.length === 1) {\n        const code = val.charCodeAt(0);\n        if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {\n          // Fast path: If `val` fits into a single byte, use that numeric value.\n          val = code;\n        }\n      }\n    } else if (typeof val === 'number') {\n      val = val & 255;\n    } else if (typeof val === 'boolean') {\n      val = Number(val);\n    }\n\n    // Invalid ranges are not set to a default, so can range check early.\n    if (start < 0 || this.length < start || this.length < end) {\n      throw new RangeError('Out of range index');\n    }\n    if (end <= start) {\n      return this;\n    }\n    start = start >>> 0;\n    end = end === undefined ? this.length : end >>> 0;\n    if (!val) val = 0;\n    let i;\n    if (typeof val === 'number') {\n      for (i = start; i < end; ++i) {\n        this[i] = val;\n      }\n    } else {\n      const bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);\n      const len = bytes.length;\n      if (len === 0) {\n        throw new TypeError('The value \"' + val + '\" is invalid for argument \"value\"');\n      }\n      for (i = 0; i < end - start; ++i) {\n        this[i + start] = bytes[i % len];\n      }\n    }\n    return this;\n  };\n\n  // CUSTOM ERRORS\n  // =============\n\n  // Simplified versions from Node, changed for Buffer-only usage\n  const errors = {};\n  function E(sym, getMessage, Base) {\n    errors[sym] = class NodeError extends Base {\n      constructor() {\n        super();\n        Object.defineProperty(this, 'message', {\n          value: getMessage.apply(this, arguments),\n          writable: true,\n          configurable: true\n        });\n\n        // Add the error code to the name to include it in the stack trace.\n        this.name = `${this.name} [${sym}]`;\n        // Access the stack to generate the error message including the error code\n        // from the name.\n        this.stack; // eslint-disable-line no-unused-expressions\n        // Reset the name to the actual name.\n        delete this.name;\n      }\n      get code() {\n        return sym;\n      }\n      set code(value) {\n        Object.defineProperty(this, 'code', {\n          configurable: true,\n          enumerable: true,\n          value,\n          writable: true\n        });\n      }\n      toString() {\n        return `${this.name} [${sym}]: ${this.message}`;\n      }\n    };\n  }\n  E('ERR_BUFFER_OUT_OF_BOUNDS', function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`;\n    }\n    return 'Attempt to access memory outside buffer bounds';\n  }, RangeError);\n  E('ERR_INVALID_ARG_TYPE', function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`;\n  }, TypeError);\n  E('ERR_OUT_OF_RANGE', function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`;\n    let received = input;\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input));\n    } else if (typeof input === 'bigint') {\n      received = String(input);\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received);\n      }\n      received += 'n';\n    }\n    msg += ` It must be ${range}. Received ${received}`;\n    return msg;\n  }, RangeError);\n  function addNumericalSeparator(val) {\n    let res = '';\n    let i = val.length;\n    const start = val[0] === '-' ? 1 : 0;\n    for (; i >= start + 4; i -= 3) {\n      res = `_${val.slice(i - 3, i)}${res}`;\n    }\n    return `${val.slice(0, i)}${res}`;\n  }\n\n  // CHECK FUNCTIONS\n  // ===============\n\n  function checkBounds(buf, offset, byteLength) {\n    validateNumber(offset, 'offset');\n    if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n      boundsError(offset, buf.length - (byteLength + 1));\n    }\n  }\n  function checkIntBI(value, min, max, buf, offset, byteLength) {\n    if (value > max || value < min) {\n      const n = typeof min === 'bigint' ? 'n' : '';\n      let range;\n      if (byteLength > 3) {\n        if (min === 0 || min === BigInt(0)) {\n          range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;\n        } else {\n          range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` + `${(byteLength + 1) * 8 - 1}${n}`;\n        }\n      } else {\n        range = `>= ${min}${n} and <= ${max}${n}`;\n      }\n      throw new errors.ERR_OUT_OF_RANGE('value', range, value);\n    }\n    checkBounds(buf, offset, byteLength);\n  }\n  function validateNumber(value, name) {\n    if (typeof value !== 'number') {\n      throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value);\n    }\n  }\n  function boundsError(value, length, type) {\n    if (Math.floor(value) !== value) {\n      validateNumber(value, type);\n      throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value);\n    }\n    if (length < 0) {\n      throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();\n    }\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', `>= ${type ? 1 : 0} and <= ${length}`, value);\n  }\n\n  // HELPER FUNCTIONS\n  // ================\n\n  const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\n  function base64clean(str) {\n    // Node takes equal signs as end of the Base64 encoding\n    str = str.split('=')[0];\n    // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n    str = str.trim().replace(INVALID_BASE64_RE, '');\n    // Node converts strings with length < 2 to ''\n    if (str.length < 2) return '';\n    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n    while (str.length % 4 !== 0) {\n      str = str + '=';\n    }\n    return str;\n  }\n  function utf8ToBytes(string, units) {\n    units = units || Infinity;\n    let codePoint;\n    const length = string.length;\n    let leadSurrogate = null;\n    const bytes = [];\n    for (let i = 0; i < length; ++i) {\n      codePoint = string.charCodeAt(i);\n\n      // is surrogate component\n      if (codePoint > 0xD7FF && codePoint < 0xE000) {\n        // last char was a lead\n        if (!leadSurrogate) {\n          // no lead yet\n          if (codePoint > 0xDBFF) {\n            // unexpected trail\n            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n            continue;\n          } else if (i + 1 === length) {\n            // unpaired lead\n            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n            continue;\n          }\n\n          // valid lead\n          leadSurrogate = codePoint;\n          continue;\n        }\n\n        // 2 leads in a row\n        if (codePoint < 0xDC00) {\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          leadSurrogate = codePoint;\n          continue;\n        }\n\n        // valid surrogate pair\n        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n      } else if (leadSurrogate) {\n        // valid bmp char, but last char was a lead\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n      }\n      leadSurrogate = null;\n\n      // encode utf8\n      if (codePoint < 0x80) {\n        if ((units -= 1) < 0) break;\n        bytes.push(codePoint);\n      } else if (codePoint < 0x800) {\n        if ((units -= 2) < 0) break;\n        bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);\n      } else if (codePoint < 0x10000) {\n        if ((units -= 3) < 0) break;\n        bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n      } else if (codePoint < 0x110000) {\n        if ((units -= 4) < 0) break;\n        bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n      } else {\n        throw new Error('Invalid code point');\n      }\n    }\n    return bytes;\n  }\n  function asciiToBytes(str) {\n    const byteArray = [];\n    for (let i = 0; i < str.length; ++i) {\n      // Node's code seems to be doing this and not & 0x7F..\n      byteArray.push(str.charCodeAt(i) & 0xFF);\n    }\n    return byteArray;\n  }\n  function utf16leToBytes(str, units) {\n    let c, hi, lo;\n    const byteArray = [];\n    for (let i = 0; i < str.length; ++i) {\n      if ((units -= 2) < 0) break;\n      c = str.charCodeAt(i);\n      hi = c >> 8;\n      lo = c % 256;\n      byteArray.push(lo);\n      byteArray.push(hi);\n    }\n    return byteArray;\n  }\n  function base64ToBytes(str) {\n    return base64.toByteArray(base64clean(str));\n  }\n  function blitBuffer(src, dst, offset, length) {\n    let i;\n    for (i = 0; i < length; ++i) {\n      if (i + offset >= dst.length || i >= src.length) break;\n      dst[i + offset] = src[i];\n    }\n    return i;\n  }\n\n  // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n  // the `instanceof` check but they should be treated as of that type.\n  // See: https://github.com/feross/buffer/issues/166\n  function isInstance(obj, type) {\n    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;\n  }\n  function numberIsNaN(obj) {\n    // For IE11 support\n    return obj !== obj; // eslint-disable-line no-self-compare\n  }\n\n  // Create lookup table for `toString('hex')`\n  // See: https://github.com/feross/buffer/issues/219\n  const hexSliceLookupTable = function () {\n    const alphabet = '0123456789abcdef';\n    const table = new Array(256);\n    for (let i = 0; i < 16; ++i) {\n      const i16 = i * 16;\n      for (let j = 0; j < 16; ++j) {\n        table[i16 + j] = alphabet[i] + alphabet[j];\n      }\n    }\n    return table;\n  }();\n\n  // Return not function with Error if BigInt not supported\n  function defineBigIntMethod(fn) {\n    return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn;\n  }\n  function BufferBigIntNotDefined() {\n    throw new Error('BigInt not supported');\n  }\n})(buffer);\nvar global$1 = typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {};\nvar inherits;\nif (typeof Object.create === 'function') {\n  inherits = function inherits(ctor, superCtor) {\n    // implementation from standard node.js 'util' module\n    ctor.super_ = superCtor;\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  inherits = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  };\n}\nvar inherits$1 = inherits;\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect$1(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    _extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect$1.colors = {\n  'bold': [1, 22],\n  'italic': [3, 23],\n  'underline': [4, 24],\n  'inverse': [7, 27],\n  'white': [37, 39],\n  'grey': [90, 39],\n  'black': [30, 39],\n  'blue': [34, 39],\n  'cyan': [36, 39],\n  'green': [32, 39],\n  'magenta': [35, 39],\n  'red': [31, 39],\n  'yellow': [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect$1.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect$1.styles[styleType];\n  if (style) {\n    return '\\u001b[' + inspect$1.colors[style][0] + 'm' + str + '\\u001b[' + inspect$1.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\nfunction arrayToHash(array) {\n  var hash = {};\n  array.forEach(function (val, idx) {\n    hash[val] = true;\n  });\n  return hash;\n}\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect && value && isFunction(value.inspect) &&\n  // Filter out the util module, it's inspect function is special\n  value.inspect !== inspect$1 &&\n  // Also filter out any prototype objects using the circular check.\n  !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n  var base = '',\n    array = false,\n    braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n  ctx.seen.push(value);\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function (key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n  ctx.seen.pop();\n  return reduceToSingleString(output, base, braces);\n}\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '').replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value)) return ctx.stylize('' + value, 'number');\n  if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value)) return ctx.stylize('null', 'null');\n}\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function (key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));\n    }\n  });\n  return output;\n}\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || {\n    value: value[key]\n  };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function (line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function (line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"').replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n  return name + ': ' + str;\n}\nfunction reduceToSingleString(output, base, braces) {\n  var length = output.reduce(function (prev, cur) {\n    if (cur.indexOf('\\n') >= 0) ;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n  if (length > 60) {\n    return braces[0] + (base === '' ? '' : base + '\\n ') + ' ' + output.join(',\\n  ') + ' ' + braces[1];\n  }\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nfunction isNull(arg) {\n  return arg === null;\n}\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nfunction isError(e) {\n  return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nfunction isPrimitive(arg) {\n  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' ||\n  // ES6 symbol\n  typeof arg === 'undefined';\n}\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\nfunction _extend(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n}\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\nfunction compare(a, b) {\n  if (a === b) {\n    return 0;\n  }\n  var x = a.length;\n  var y = b.length;\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n  if (x < y) {\n    return -1;\n  }\n  if (y < x) {\n    return 1;\n  }\n  return 0;\n}\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    if (hasOwn.call(obj, key)) keys.push(key);\n  }\n  return keys;\n};\nvar pSlice = Array.prototype.slice;\nvar _functionsHaveNames;\nfunction functionsHaveNames() {\n  if (typeof _functionsHaveNames !== 'undefined') {\n    return _functionsHaveNames;\n  }\n  return _functionsHaveNames = function () {\n    return function foo() {}.name === 'foo';\n  }();\n}\nfunction pToString(obj) {\n  return Object.prototype.toString.call(obj);\n}\nfunction isView(arrbuf) {\n  if (buffer.isBuffer(arrbuf)) {\n    return false;\n  }\n  if (typeof global$1.ArrayBuffer !== 'function') {\n    return false;\n  }\n  if (typeof ArrayBuffer.isView === 'function') {\n    return ArrayBuffer.isView(arrbuf);\n  }\n  if (!arrbuf) {\n    return false;\n  }\n  if (arrbuf instanceof DataView) {\n    return true;\n  }\n  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {\n    return true;\n  }\n  return false;\n}\n// 1. The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nfunction assert(value, message) {\n  if (!value) fail(value, true, message, '==', ok);\n}\n\n// 2. The AssertionError is defined in assert.\n// new assert.AssertionError({ message: message,\n//                             actual: actual,\n//                             expected: expected })\n\nvar regex = /\\s*function\\s+([^\\(\\s]*)\\s*/;\n// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js\nfunction getName(func) {\n  if (!isFunction(func)) {\n    return;\n  }\n  if (functionsHaveNames()) {\n    return func.name;\n  }\n  var str = func.toString();\n  var match = str.match(regex);\n  return match && match[1];\n}\nassert.AssertionError = AssertionError;\nfunction AssertionError(options) {\n  this.name = 'AssertionError';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n  var stackStartFunction = options.stackStartFunction || fail;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, stackStartFunction);\n  } else {\n    // non v8 browsers so we can have a stacktrace\n    var err = new Error();\n    if (err.stack) {\n      var out = err.stack;\n\n      // try to strip useless frames\n      var fn_name = getName(stackStartFunction);\n      var idx = out.indexOf('\\n' + fn_name);\n      if (idx >= 0) {\n        // once we have located the function frame\n        // we need to strip out everything before it (and its line)\n        var next_line = out.indexOf('\\n', idx + 1);\n        out = out.substring(next_line + 1);\n      }\n      this.stack = out;\n    }\n  }\n}\n\n// assert.AssertionError instanceof Error\ninherits$1(AssertionError, Error);\nfunction truncate(s, n) {\n  if (typeof s === 'string') {\n    return s.length < n ? s : s.slice(0, n);\n  } else {\n    return s;\n  }\n}\nfunction inspect(something) {\n  if (functionsHaveNames() || !isFunction(something)) {\n    return inspect$1(something);\n  }\n  var rawname = getName(something);\n  var name = rawname ? ': ' + rawname : '';\n  return '[Function' + name + ']';\n}\nfunction getMessage(self) {\n  return truncate(inspect(self.actual), 128) + ' ' + self.operator + ' ' + truncate(inspect(self.expected), 128);\n}\n\n// At present only the three keys mentioned above are used and\n// understood by the spec. Implementations or sub modules can pass\n// other keys to the AssertionError's constructor - they will be\n// ignored.\n\n// 3. All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided.  All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\nfunction fail(actual, expected, message, operator, stackStartFunction) {\n  throw new AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n}\n\n// EXTENSION! allows for well behaved errors defined elsewhere.\nassert.fail = fail;\n\n// 4. Pure assertion tests whether a value is truthy, as determined\n// by !!guard.\n// assert.ok(guard, message_opt);\n// This statement is equivalent to assert.equal(true, !!guard,\n// message_opt);. To test strictly for the value true, use\n// assert.strictEqual(true, guard, message_opt);.\n\nfunction ok(value, message) {\n  if (!value) fail(value, true, message, '==', ok);\n}\nassert.ok = ok;\n\n// 5. The equality assertion tests shallow, coercive equality with\n// ==.\n// assert.equal(actual, expected, message_opt);\nassert.equal = equal;\nfunction equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, '==', equal);\n}\n\n// 6. The non-equality assertion tests for whether two objects are not equal\n// with != assert.notEqual(actual, expected, message_opt);\nassert.notEqual = notEqual;\nfunction notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, '!=', notEqual);\n  }\n}\n\n// 7. The equivalence assertion tests a deep equality relation.\n// assert.deepEqual(actual, expected, message_opt);\nassert.deepEqual = deepEqual;\nfunction deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'deepEqual', deepEqual);\n  }\n}\nassert.deepStrictEqual = deepStrictEqual;\nfunction deepStrictEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'deepStrictEqual', deepStrictEqual);\n  }\n}\nfunction _deepEqual(actual, expected, strict, memos) {\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n  } else if (buffer.isBuffer(actual) && buffer.isBuffer(expected)) {\n    return compare(actual, expected) === 0;\n\n    // 7.2. If the expected value is a Date object, the actual value is\n    // equivalent if it is also a Date object that refers to the same time.\n  } else if (isDate(actual) && isDate(expected)) {\n    return actual.getTime() === expected.getTime();\n\n    // 7.3 If the expected value is a RegExp object, the actual value is\n    // equivalent if it is also a RegExp object with the same source and\n    // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n  } else if (isRegExp(actual) && isRegExp(expected)) {\n    return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase;\n\n    // 7.4. Other pairs that do not both pass typeof value == 'object',\n    // equivalence is determined by ==.\n  } else if ((actual === null || typeof actual !== 'object') && (expected === null || typeof expected !== 'object')) {\n    return strict ? actual === expected : actual == expected;\n\n    // If both values are instances of typed arrays, wrap their underlying\n    // ArrayBuffers in a Buffer each to increase performance\n    // This optimization requires the arrays to have the same type as checked by\n    // Object.prototype.toString (aka pToString). Never perform binary\n    // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their\n    // bit patterns are not identical.\n  } else if (isView(actual) && isView(expected) && pToString(actual) === pToString(expected) && !(actual instanceof Float32Array || actual instanceof Float64Array)) {\n    return compare(new Uint8Array(actual.buffer), new Uint8Array(expected.buffer)) === 0;\n\n    // 7.5 For all other Object pairs, including Array objects, equivalence is\n    // determined by having the same number of owned properties (as verified\n    // with Object.prototype.hasOwnProperty.call), the same set of keys\n    // (although not necessarily the same order), equivalent values for every\n    // corresponding key, and an identical 'prototype' property. Note: this\n    // accounts for both named and indexed properties on Arrays.\n  } else if (buffer.isBuffer(actual) !== buffer.isBuffer(expected)) {\n    return false;\n  } else {\n    memos = memos || {\n      actual: [],\n      expected: []\n    };\n    var actualIndex = memos.actual.indexOf(actual);\n    if (actualIndex !== -1) {\n      if (actualIndex === memos.expected.indexOf(expected)) {\n        return true;\n      }\n    }\n    memos.actual.push(actual);\n    memos.expected.push(expected);\n    return objEquiv(actual, expected, strict, memos);\n  }\n}\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\nfunction objEquiv(a, b, strict, actualVisitedObjects) {\n  if (a === null || a === undefined || b === null || b === undefined) return false;\n  // if one is a primitive, the other must be same\n  if (isPrimitive(a) || isPrimitive(b)) return a === b;\n  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) return false;\n  var aIsArgs = isArguments(a);\n  var bIsArgs = isArguments(b);\n  if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs) return false;\n  if (aIsArgs) {\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return _deepEqual(a, b, strict);\n  }\n  var ka = objectKeys(a);\n  var kb = objectKeys(b);\n  var key, i;\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length !== kb.length) return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] !== kb[i]) return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects)) return false;\n  }\n  return true;\n}\n\n// 8. The non-equivalence assertion tests for any deep inequality.\n// assert.notDeepEqual(actual, expected, message_opt);\nassert.notDeepEqual = notDeepEqual;\nfunction notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'notDeepEqual', notDeepEqual);\n  }\n}\nassert.notDeepStrictEqual = notDeepStrictEqual;\nfunction notDeepStrictEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);\n  }\n}\n\n// 9. The strict equality assertion tests strict equality, as determined by ===.\n// assert.strictEqual(actual, expected, message_opt);\nassert.strictEqual = strictEqual;\nfunction strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, '===', strictEqual);\n  }\n}\n\n// 10. The strict non-equality assertion tests for strict inequality, as\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\nassert.notStrictEqual = notStrictEqual;\nfunction notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, '!==', notStrictEqual);\n  }\n}\nfunction expectedException(actual, expected) {\n  if (!actual || !expected) {\n    return false;\n  }\n  if (Object.prototype.toString.call(expected) == '[object RegExp]') {\n    return expected.test(actual);\n  }\n  try {\n    if (actual instanceof expected) {\n      return true;\n    }\n  } catch (e) {\n    // Ignore.  The instanceof check doesn't work for arrow functions.\n  }\n  if (Error.isPrototypeOf(expected)) {\n    return false;\n  }\n  return expected.call({}, actual) === true;\n}\nfunction _tryBlock(block) {\n  var error;\n  try {\n    block();\n  } catch (e) {\n    error = e;\n  }\n  return error;\n}\nfunction _throws(shouldThrow, block, expected, message) {\n  var actual;\n  if (typeof block !== 'function') {\n    throw new TypeError('\"block\" argument must be a function');\n  }\n  if (typeof expected === 'string') {\n    message = expected;\n    expected = null;\n  }\n  actual = _tryBlock(block);\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') + (message ? ' ' + message : '.');\n  if (shouldThrow && !actual) {\n    fail(actual, expected, 'Missing expected exception' + message);\n  }\n  var userProvidedMessage = typeof message === 'string';\n  var isUnwantedException = !shouldThrow && isError(actual);\n  var isUnexpectedException = !shouldThrow && actual && !expected;\n  if (isUnwantedException && userProvidedMessage && expectedException(actual, expected) || isUnexpectedException) {\n    fail(actual, expected, 'Got unwanted exception' + message);\n  }\n  if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {\n    throw actual;\n  }\n}\n\n// 11. Expected to throw an error:\n// assert.throws(block, Error_opt, message_opt);\nassert.throws = throws;\nfunction throws(block, /*optional*/error, /*optional*/message) {\n  _throws(true, block, error, message);\n}\n\n// EXTENSION! This is annoying to write outside this module.\nassert.doesNotThrow = doesNotThrow;\nfunction doesNotThrow(block, /*optional*/error, /*optional*/message) {\n  _throws(false, block, error, message);\n}\nassert.ifError = ifError;\nfunction ifError(err) {\n  if (err) throw err;\n}\nvar Layout$1 = {};\n\n/**\n * Base class for layout objects.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * Layout#encode|encode} or {@link Layout#decode|decode} functions.\n *\n * @param {Number} span - Initializer for {@link Layout#span|span}.  The\n * parameter must be an integer; a negative value signifies that the\n * span is {@link Layout#getSpan|value-specific}.\n *\n * @param {string} [property] - Initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n */\nclass Layout {\n  constructor(span, property) {\n    if (!Number.isInteger(span)) {\n      throw new TypeError('span must be an integer');\n    }\n\n    /** The span of the layout in bytes.\n     *\n     * Positive values are generally expected.\n     *\n     * Zero will only appear in {@link Constant}s and in {@link\n     * Sequence}s where the {@link Sequence#count|count} is zero.\n     *\n     * A negative value indicates that the span is value-specific, and\n     * must be obtained using {@link Layout#getSpan|getSpan}. */\n    this.span = span;\n\n    /** The property name used when this layout is represented in an\n     * Object.\n     *\n     * Used only for layouts that {@link Layout#decode|decode} to Object\n     * instances.  If left undefined the span of the unnamed layout will\n     * be treated as padding: it will not be mutated by {@link\n     * Layout#encode|encode} nor represented as a property in the\n     * decoded Object. */\n    this.property = property;\n  }\n\n  /** Function to create an Object into which decoded properties will\n   * be written.\n   *\n   * Used only for layouts that {@link Layout#decode|decode} to Object\n   * instances, which means:\n   * * {@link Structure}\n   * * {@link Union}\n   * * {@link VariantLayout}\n   * * {@link BitStructure}\n   *\n   * If left undefined the JavaScript representation of these layouts\n   * will be Object instances.\n   *\n   * See {@link bindConstructorLayout}.\n   */\n  makeDestinationObject() {\n    return {};\n  }\n\n  /**\n   * Decode from a Buffer into an JavaScript value.\n   *\n   * @param {Buffer} b - the buffer from which encoded data is read.\n   *\n   * @param {Number} [offset] - the offset at which the encoded data\n   * starts.  If absent a zero offset is inferred.\n   *\n   * @returns {(Number|Array|Object)} - the value of the decoded data.\n   *\n   * @abstract\n   */\n  decode(b, offset) {\n    throw new Error('Layout is abstract');\n  }\n\n  /**\n   * Encode a JavaScript value into a Buffer.\n   *\n   * @param {(Number|Array|Object)} src - the value to be encoded into\n   * the buffer.  The type accepted depends on the (sub-)type of {@link\n   * Layout}.\n   *\n   * @param {Buffer} b - the buffer into which encoded data will be\n   * written.\n   *\n   * @param {Number} [offset] - the offset at which the encoded data\n   * starts.  If absent a zero offset is inferred.\n   *\n   * @returns {Number} - the number of bytes encoded, including the\n   * space skipped for internal padding, but excluding data such as\n   * {@link Sequence#count|lengths} when stored {@link\n   * ExternalLayout|externally}.  This is the adjustment to `offset`\n   * producing the offset where data for the next layout would be\n   * written.\n   *\n   * @abstract\n   */\n  encode(src, b, offset) {\n    throw new Error('Layout is abstract');\n  }\n\n  /**\n   * Calculate the span of a specific instance of a layout.\n   *\n   * @param {Buffer} b - the buffer that contains an encoded instance.\n   *\n   * @param {Number} [offset] - the offset at which the encoded instance\n   * starts.  If absent a zero offset is inferred.\n   *\n   * @return {Number} - the number of bytes covered by the layout\n   * instance.  If this method is not overridden in a subclass the\n   * definition-time constant {@link Layout#span|span} will be\n   * returned.\n   *\n   * @throws {RangeError} - if the length of the value cannot be\n   * determined.\n   */\n  getSpan(b, offset) {\n    if (0 > this.span) {\n      throw new RangeError('indeterminate span');\n    }\n    return this.span;\n  }\n\n  /**\n   * Replicate the layout using a new property.\n   *\n   * This function must be used to get a structurally-equivalent layout\n   * with a different name since all {@link Layout} instances are\n   * immutable.\n   *\n   * **NOTE** This is a shallow copy.  All fields except {@link\n   * Layout#property|property} are strictly equal to the origin layout.\n   *\n   * @param {String} property - the value for {@link\n   * Layout#property|property} in the replica.\n   *\n   * @returns {Layout} - the copy with {@link Layout#property|property}\n   * set to `property`.\n   */\n  replicate(property) {\n    const rv = Object.create(this.constructor.prototype);\n    Object.assign(rv, this);\n    rv.property = property;\n    return rv;\n  }\n\n  /**\n   * Create an object from layout properties and an array of values.\n   *\n   * **NOTE** This function returns `undefined` if invoked on a layout\n   * that does not return its value as an Object.  Objects are\n   * returned for things that are a {@link Structure}, which includes\n   * {@link VariantLayout|variant layouts} if they are structures, and\n   * excludes {@link Union}s.  If you want this feature for a union\n   * you must use {@link Union.getVariant|getVariant} to select the\n   * desired layout.\n   *\n   * @param {Array} values - an array of values that correspond to the\n   * default order for properties.  As with {@link Layout#decode|decode}\n   * layout elements that have no property name are skipped when\n   * iterating over the array values.  Only the top-level properties are\n   * assigned; arguments are not assigned to properties of contained\n   * layouts.  Any unused values are ignored.\n   *\n   * @return {(Object|undefined)}\n   */\n  fromArray(values) {\n    return undefined;\n  }\n}\nLayout$1.Layout = Layout;\n\n/* Provide text that carries a name (such as for a function that will\n * be throwing an error) annotated with the property of a given layout\n * (such as one for which the value was unacceptable).\n *\n * @ignore */\nfunction nameWithProperty(name, lo) {\n  if (lo.property) {\n    return name + '[' + lo.property + ']';\n  }\n  return name;\n}\nLayout$1.nameWithProperty = nameWithProperty;\n\n/**\n * Augment a class so that instances can be encoded/decoded using a\n * given layout.\n *\n * Calling this function couples `Class` with `layout` in several ways:\n *\n * * `Class.layout_` becomes a static member property equal to `layout`;\n * * `layout.boundConstructor_` becomes a static member property equal\n *    to `Class`;\n * * The {@link Layout#makeDestinationObject|makeDestinationObject()}\n *   property of `layout` is set to a function that returns a `new\n *   Class()`;\n * * `Class.decode(b, offset)` becomes a static member function that\n *   delegates to {@link Layout#decode|layout.decode}.  The\n *   synthesized function may be captured and extended.\n * * `Class.prototype.encode(b, offset)` provides an instance member\n *   function that delegates to {@link Layout#encode|layout.encode}\n *   with `src` set to `this`.  The synthesized function may be\n *   captured and extended, but when the extension is invoked `this`\n *   must be explicitly bound to the instance.\n *\n * @param {class} Class - a JavaScript class with a nullary\n * constructor.\n *\n * @param {Layout} layout - the {@link Layout} instance used to encode\n * instances of `Class`.\n */\nfunction bindConstructorLayout(Class, layout) {\n  if ('function' !== typeof Class) {\n    throw new TypeError('Class must be constructor');\n  }\n  if (Class.hasOwnProperty('layout_')) {\n    throw new Error('Class is already bound to a layout');\n  }\n  if (!(layout && layout instanceof Layout)) {\n    throw new TypeError('layout must be a Layout');\n  }\n  if (layout.hasOwnProperty('boundConstructor_')) {\n    throw new Error('layout is already bound to a constructor');\n  }\n  Class.layout_ = layout;\n  layout.boundConstructor_ = Class;\n  layout.makeDestinationObject = () => new Class();\n  Object.defineProperty(Class.prototype, 'encode', {\n    value: function (b, offset) {\n      return layout.encode(this, b, offset);\n    },\n    writable: true\n  });\n  Object.defineProperty(Class, 'decode', {\n    value: function (b, offset) {\n      return layout.decode(b, offset);\n    },\n    writable: true\n  });\n}\nLayout$1.bindConstructorLayout = bindConstructorLayout;\n\n/**\n * An object that behaves like a layout but does not consume space\n * within its containing layout.\n *\n * This is primarily used to obtain metadata about a member, such as a\n * {@link OffsetLayout} that can provide data about a {@link\n * Layout#getSpan|value-specific span}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support {@link\n * ExternalLayout#isCount|isCount} or other {@link Layout} functions.\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n * @augments {Layout}\n */\nclass ExternalLayout extends Layout {\n  /**\n   * Return `true` iff the external layout decodes to an unsigned\n   * integer layout.\n   *\n   * In that case it can be used as the source of {@link\n   * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},\n   * or as {@link UnionLayoutDiscriminator#layout|external union\n   * discriminators}.\n   *\n   * @abstract\n   */\n  isCount() {\n    throw new Error('ExternalLayout is abstract');\n  }\n}\n\n/**\n * An {@link ExternalLayout} that determines its {@link\n * Layout#decode|value} based on offset into and length of the buffer\n * on which it is invoked.\n *\n * *Factory*: {@link module:Layout.greedy|greedy}\n *\n * @param {Number} [elementSpan] - initializer for {@link\n * GreedyCount#elementSpan|elementSpan}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {ExternalLayout}\n */\nclass GreedyCount extends ExternalLayout {\n  constructor(elementSpan, property) {\n    if (undefined === elementSpan) {\n      elementSpan = 1;\n    }\n    if (!Number.isInteger(elementSpan) || 0 >= elementSpan) {\n      throw new TypeError('elementSpan must be a (positive) integer');\n    }\n    super(-1, property);\n\n    /** The layout for individual elements of the sequence.  The value\n     * must be a positive integer.  If not provided, the value will be\n     * 1. */\n    this.elementSpan = elementSpan;\n  }\n\n  /** @override */\n  isCount() {\n    return true;\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const rem = b.length - offset;\n    return Math.floor(rem / this.elementSpan);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    return 0;\n  }\n}\n\n/**\n * An {@link ExternalLayout} that supports accessing a {@link Layout}\n * at a fixed offset from the start of another Layout.  The offset may\n * be before, within, or after the base layout.\n *\n * *Factory*: {@link module:Layout.offset|offset}\n *\n * @param {Layout} layout - initializer for {@link\n * OffsetLayout#layout|layout}, modulo `property`.\n *\n * @param {Number} [offset] - Initializes {@link\n * OffsetLayout#offset|offset}.  Defaults to zero.\n *\n * @param {string} [property] - Optional new property name for a\n * {@link Layout#replicate| replica} of `layout` to be used as {@link\n * OffsetLayout#layout|layout}.  If not provided the `layout` is used\n * unchanged.\n *\n * @augments {Layout}\n */\nclass OffsetLayout extends ExternalLayout {\n  constructor(layout, offset, property) {\n    if (!(layout instanceof Layout)) {\n      throw new TypeError('layout must be a Layout');\n    }\n    if (undefined === offset) {\n      offset = 0;\n    } else if (!Number.isInteger(offset)) {\n      throw new TypeError('offset must be integer or undefined');\n    }\n    super(layout.span, property || layout.property);\n\n    /** The subordinated layout. */\n    this.layout = layout;\n\n    /** The location of {@link OffsetLayout#layout} relative to the\n     * start of another layout.\n     *\n     * The value may be positive or negative, but an error will thrown\n     * if at the point of use it goes outside the span of the Buffer\n     * being accessed.  */\n    this.offset = offset;\n  }\n\n  /** @override */\n  isCount() {\n    return this.layout instanceof UInt || this.layout instanceof UIntBE;\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return this.layout.decode(b, offset + this.offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return this.layout.encode(src, b, offset + this.offset);\n  }\n}\n\n/**\n * Represent an unsigned integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.u8|u8}, {@link\n *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link\n *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link\n *  module:Layout.u48|u48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UInt extends Layout {\n  constructor(span, property) {\n    super(span, property);\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readUIntLE(offset, this.span);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeUIntLE(src, offset, this.span);\n    return this.span;\n  }\n}\n\n/**\n * Represent an unsigned integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.u8be|u8be}, {@link\n * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},\n * {@link module:Layout.u32be|u32be}, {@link\n * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UIntBE extends Layout {\n  constructor(span, property) {\n    super(span, property);\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readUIntBE(offset, this.span);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeUIntBE(src, offset, this.span);\n    return this.span;\n  }\n}\n\n/**\n * Represent a signed integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.s8|s8}, {@link\n *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link\n *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link\n *  module:Layout.s48|s48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Int extends Layout {\n  constructor(span, property) {\n    super(span, property);\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readIntLE(offset, this.span);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeIntLE(src, offset, this.span);\n    return this.span;\n  }\n}\n\n/**\n * Represent a signed integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.s8be|s8be}, {@link\n * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},\n * {@link module:Layout.s32be|s32be}, {@link\n * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass IntBE extends Layout {\n  constructor(span, property) {\n    super(span, property);\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readIntBE(offset, this.span);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeIntBE(src, offset, this.span);\n    return this.span;\n  }\n}\nconst V2E32 = Math.pow(2, 32);\n\n/* True modulus high and low 32-bit words, where low word is always\n * non-negative. */\nfunction divmodInt64(src) {\n  const hi32 = Math.floor(src / V2E32);\n  const lo32 = src - hi32 * V2E32;\n  return {\n    hi32,\n    lo32\n  };\n}\n/* Reconstruct Number from quotient and non-negative remainder */\nfunction roundedInt64(hi32, lo32) {\n  return hi32 * V2E32 + lo32;\n}\n\n/**\n * Represent an unsigned 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64|nu64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64 extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const lo32 = b.readUInt32LE(offset);\n    const hi32 = b.readUInt32LE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const split = divmodInt64(src);\n    b.writeUInt32LE(split.lo32, offset);\n    b.writeUInt32LE(split.hi32, offset + 4);\n    return 8;\n  }\n}\n\n/**\n * Represent an unsigned 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64be|nu64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64BE extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const hi32 = b.readUInt32BE(offset);\n    const lo32 = b.readUInt32BE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const split = divmodInt64(src);\n    b.writeUInt32BE(split.hi32, offset);\n    b.writeUInt32BE(split.lo32, offset + 4);\n    return 8;\n  }\n}\n\n/**\n * Represent a signed 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64|ns64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64 extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const lo32 = b.readUInt32LE(offset);\n    const hi32 = b.readInt32LE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const split = divmodInt64(src);\n    b.writeUInt32LE(split.lo32, offset);\n    b.writeInt32LE(split.hi32, offset + 4);\n    return 8;\n  }\n}\n\n/**\n * Represent a signed 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64be|ns64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64BE extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const hi32 = b.readInt32BE(offset);\n    const lo32 = b.readUInt32BE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const split = divmodInt64(src);\n    b.writeInt32BE(split.hi32, offset);\n    b.writeUInt32BE(split.lo32, offset + 4);\n    return 8;\n  }\n}\n\n/**\n * Represent a 32-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f32|f32}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Float extends Layout {\n  constructor(property) {\n    super(4, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readFloatLE(offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeFloatLE(src, offset);\n    return 4;\n  }\n}\n\n/**\n * Represent a 32-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f32be|f32be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass FloatBE extends Layout {\n  constructor(property) {\n    super(4, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readFloatBE(offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeFloatBE(src, offset);\n    return 4;\n  }\n}\n\n/**\n * Represent a 64-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f64|f64}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Double extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readDoubleLE(offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeDoubleLE(src, offset);\n    return 8;\n  }\n}\n\n/**\n * Represent a 64-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f64be|f64be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass DoubleBE extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readDoubleBE(offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeDoubleBE(src, offset);\n    return 8;\n  }\n}\n\n/**\n * Represent a contiguous sequence of a specific layout as an Array.\n *\n * *Factory*: {@link module:Layout.seq|seq}\n *\n * @param {Layout} elementLayout - initializer for {@link\n * Sequence#elementLayout|elementLayout}.\n *\n * @param {(Number|ExternalLayout)} count - initializer for {@link\n * Sequence#count|count}.  The parameter must be either a positive\n * integer or an instance of {@link ExternalLayout}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Sequence extends Layout {\n  constructor(elementLayout, count, property) {\n    if (!(elementLayout instanceof Layout)) {\n      throw new TypeError('elementLayout must be a Layout');\n    }\n    if (!(count instanceof ExternalLayout && count.isCount() || Number.isInteger(count) && 0 <= count)) {\n      throw new TypeError('count must be non-negative integer ' + 'or an unsigned integer ExternalLayout');\n    }\n    let span = -1;\n    if (!(count instanceof ExternalLayout) && 0 < elementLayout.span) {\n      span = count * elementLayout.span;\n    }\n    super(span, property);\n\n    /** The layout for individual elements of the sequence. */\n    this.elementLayout = elementLayout;\n\n    /** The number of elements in the sequence.\n     *\n     * This will be either a non-negative integer or an instance of\n     * {@link ExternalLayout} for which {@link\n     * ExternalLayout#isCount|isCount()} is `true`. */\n    this.count = count;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (0 <= this.span) {\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = 0;\n    let count = this.count;\n    if (count instanceof ExternalLayout) {\n      count = count.decode(b, offset);\n    }\n    if (0 < this.elementLayout.span) {\n      span = count * this.elementLayout.span;\n    } else {\n      let idx = 0;\n      while (idx < count) {\n        span += this.elementLayout.getSpan(b, offset + span);\n        ++idx;\n      }\n    }\n    return span;\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const rv = [];\n    let i = 0;\n    let count = this.count;\n    if (count instanceof ExternalLayout) {\n      count = count.decode(b, offset);\n    }\n    while (i < count) {\n      rv.push(this.elementLayout.decode(b, offset));\n      offset += this.elementLayout.getSpan(b, offset);\n      i += 1;\n    }\n    return rv;\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link Sequence}.\n   *\n   * **NOTE** If `src` is shorter than {@link Sequence#count|count} then\n   * the unused space in the buffer is left unchanged.  If `src` is\n   * longer than {@link Sequence#count|count} the unneeded elements are\n   * ignored.\n   *\n   * **NOTE** If {@link Layout#count|count} is an instance of {@link\n   * ExternalLayout} then the length of `src` will be encoded as the\n   * count after `src` is encoded. */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const elo = this.elementLayout;\n    const span = src.reduce((span, v) => {\n      return span + elo.encode(v, b, offset + span);\n    }, 0);\n    if (this.count instanceof ExternalLayout) {\n      this.count.encode(src.length, b, offset);\n    }\n    return span;\n  }\n}\n\n/**\n * Represent a contiguous sequence of arbitrary layout elements as an\n * Object.\n *\n * *Factory*: {@link module:Layout.struct|struct}\n *\n * **NOTE** The {@link Layout#span|span} of the structure is variable\n * if any layout in {@link Structure#fields|fields} has a variable\n * span.  When {@link Layout#encode|encoding} we must have a value for\n * all variable-length fields, or we wouldn't be able to figure out\n * how much space to use for storage.  We can only identify the value\n * for a field when it has a {@link Layout#property|property}.  As\n * such, although a structure may contain both unnamed fields and\n * variable-length fields, it cannot contain an unnamed\n * variable-length field.\n *\n * @param {Layout[]} fields - initializer for {@link\n * Structure#fields|fields}.  An error is raised if this contains a\n * variable-length field for which a {@link Layout#property|property}\n * is not defined.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @param {Boolean} [decodePrefixes] - initializer for {@link\n * Structure#decodePrefixes|property}.\n *\n * @throws {Error} - if `fields` contains an unnamed variable-length\n * layout.\n *\n * @augments {Layout}\n */\nclass Structure extends Layout {\n  constructor(fields, property, decodePrefixes) {\n    if (!(Array.isArray(fields) && fields.reduce((acc, v) => acc && v instanceof Layout, true))) {\n      throw new TypeError('fields must be array of Layout instances');\n    }\n    if ('boolean' === typeof property && undefined === decodePrefixes) {\n      decodePrefixes = property;\n      property = undefined;\n    }\n\n    /* Verify absence of unnamed variable-length fields. */\n    for (const fd of fields) {\n      if (0 > fd.span && undefined === fd.property) {\n        throw new Error('fields cannot contain unnamed variable-length layout');\n      }\n    }\n    let span = -1;\n    try {\n      span = fields.reduce((span, fd) => span + fd.getSpan(), 0);\n    } catch (e) {}\n    super(span, property);\n\n    /** The sequence of {@link Layout} values that comprise the\n     * structure.\n     *\n     * The individual elements need not be the same type, and may be\n     * either scalar or aggregate layouts.  If a member layout leaves\n     * its {@link Layout#property|property} undefined the\n     * corresponding region of the buffer associated with the element\n     * will not be mutated.\n     *\n     * @type {Layout[]} */\n    this.fields = fields;\n\n    /** Control behavior of {@link Layout#decode|decode()} given short\n     * buffers.\n     *\n     * In some situations a structure many be extended with additional\n     * fields over time, with older installations providing only a\n     * prefix of the full structure.  If this property is `true`\n     * decoding will accept those buffers and leave subsequent fields\n     * undefined, as long as the buffer ends at a field boundary.\n     * Defaults to `false`. */\n    this.decodePrefixes = !!decodePrefixes;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (0 <= this.span) {\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = 0;\n    try {\n      span = this.fields.reduce((span, fd) => {\n        const fsp = fd.getSpan(b, offset);\n        offset += fsp;\n        return span + fsp;\n      }, 0);\n    } catch (e) {\n      throw new RangeError('indeterminate span');\n    }\n    return span;\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const dest = this.makeDestinationObject();\n    for (const fd of this.fields) {\n      if (undefined !== fd.property) {\n        dest[fd.property] = fd.decode(b, offset);\n      }\n      offset += fd.getSpan(b, offset);\n      if (this.decodePrefixes && b.length === offset) {\n        break;\n      }\n    }\n    return dest;\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link Structure}.\n   *\n   * If `src` is missing a property for a member with a defined {@link\n   * Layout#property|property} the corresponding region of the buffer is\n   * left unmodified. */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const firstOffset = offset;\n    let lastOffset = 0;\n    let lastWrote = 0;\n    for (const fd of this.fields) {\n      let span = fd.span;\n      lastWrote = 0 < span ? span : 0;\n      if (undefined !== fd.property) {\n        const fv = src[fd.property];\n        if (undefined !== fv) {\n          lastWrote = fd.encode(fv, b, offset);\n          if (0 > span) {\n            /* Read the as-encoded span, which is not necessarily the\n             * same as what we wrote. */\n            span = fd.getSpan(b, offset);\n          }\n        }\n      }\n      lastOffset = offset;\n      offset += span;\n    }\n    /* Use (lastOffset + lastWrote) instead of offset because the last\n     * item may have had a dynamic length and we don't want to include\n     * the padding between it and the end of the space reserved for\n     * it. */\n    return lastOffset + lastWrote - firstOffset;\n  }\n\n  /** @override */\n  fromArray(values) {\n    const dest = this.makeDestinationObject();\n    for (const fd of this.fields) {\n      if (undefined !== fd.property && 0 < values.length) {\n        dest[fd.property] = values.shift();\n      }\n    }\n    return dest;\n  }\n\n  /**\n   * Get access to the layout of a given property.\n   *\n   * @param {String} property - the structure member of interest.\n   *\n   * @return {Layout} - the layout associated with `property`, or\n   * undefined if there is no such property.\n   */\n  layoutFor(property) {\n    if ('string' !== typeof property) {\n      throw new TypeError('property must be string');\n    }\n    for (const fd of this.fields) {\n      if (fd.property === property) {\n        return fd;\n      }\n    }\n  }\n\n  /**\n   * Get the offset of a structure member.\n   *\n   * @param {String} property - the structure member of interest.\n   *\n   * @return {Number} - the offset in bytes to the start of `property`\n   * within the structure, or undefined if `property` is not a field\n   * within the structure.  If the property is a member but follows a\n   * variable-length structure member a negative number will be\n   * returned.\n   */\n  offsetOf(property) {\n    if ('string' !== typeof property) {\n      throw new TypeError('property must be string');\n    }\n    let offset = 0;\n    for (const fd of this.fields) {\n      if (fd.property === property) {\n        return offset;\n      }\n      if (0 > fd.span) {\n        offset = -1;\n      } else if (0 <= offset) {\n        offset += fd.span;\n      }\n    }\n  }\n}\n\n/**\n * An object that can provide a {@link\n * Union#discriminator|discriminator} API for {@link Union}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * UnionDiscriminator#encode|encode} or {@link\n * UnionDiscriminator#decode|decode} functions.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}.\n *\n * @abstract\n */\nclass UnionDiscriminator {\n  constructor(property) {\n    /** The {@link Layout#property|property} to be used when the\n     * discriminator is referenced in isolation (generally when {@link\n     * Union#decode|Union decode} cannot delegate to a specific\n     * variant). */\n    this.property = property;\n  }\n\n  /** Analog to {@link Layout#decode|Layout decode} for union discriminators.\n   *\n   * The implementation of this method need not reference the buffer if\n   * variant information is available through other means. */\n  decode() {\n    throw new Error('UnionDiscriminator is abstract');\n  }\n\n  /** Analog to {@link Layout#decode|Layout encode} for union discriminators.\n   *\n   * The implementation of this method need not store the value if\n   * variant information is maintained through other means. */\n  encode() {\n    throw new Error('UnionDiscriminator is abstract');\n  }\n}\n\n/**\n * An object that can provide a {@link\n * UnionDiscriminator|discriminator API} for {@link Union} using an\n * unsigned integral {@link Layout} instance located either inside or\n * outside the union.\n *\n * @param {ExternalLayout} layout - initializes {@link\n * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link\n * ExternalLayout#isCount|isCount()}.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}, superseding the property\n * from `layout`, but defaulting to `variant` if neither `property`\n * nor layout provide a property name.\n *\n * @augments {UnionDiscriminator}\n */\nclass UnionLayoutDiscriminator extends UnionDiscriminator {\n  constructor(layout, property) {\n    if (!(layout instanceof ExternalLayout && layout.isCount())) {\n      throw new TypeError('layout must be an unsigned integer ExternalLayout');\n    }\n    super(property || layout.property || 'variant');\n\n    /** The {@link ExternalLayout} used to access the discriminator\n     * value. */\n    this.layout = layout;\n  }\n\n  /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n  decode(b, offset) {\n    return this.layout.decode(b, offset);\n  }\n\n  /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n  encode(src, b, offset) {\n    return this.layout.encode(src, b, offset);\n  }\n}\n\n/**\n * Represent any number of span-compatible layouts.\n *\n * *Factory*: {@link module:Layout.union|union}\n *\n * If the union has a {@link Union#defaultLayout|default layout} that\n * layout must have a non-negative {@link Layout#span|span}.  The span\n * of a fixed-span union includes its {@link\n * Union#discriminator|discriminator} if the variant is a {@link\n * Union#usesPrefixDiscriminator|prefix of the union}, plus the span\n * of its {@link Union#defaultLayout|default layout}.\n *\n * If the union does not have a default layout then the encoded span\n * of the union depends on the encoded span of its variant (which may\n * be fixed or variable).\n *\n * {@link VariantLayout#layout|Variant layout}s are added through\n * {@link Union#addVariant|addVariant}.  If the union has a default\n * layout, the span of the {@link VariantLayout#layout|layout\n * contained by the variant} must not exceed the span of the {@link\n * Union#defaultLayout|default layout} (minus the span of a {@link\n * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The\n * span of the variant will equal the span of the union itself.\n *\n * The variant for a buffer can only be identified from the {@link\n * Union#discriminator|discriminator} {@link\n * UnionDiscriminator#property|property} (in the case of the {@link\n * Union#defaultLayout|default layout}), or by using {@link\n * Union#getVariant|getVariant} and examining the resulting {@link\n * VariantLayout} instance.\n *\n * A variant compatible with a JavaScript object can be identified\n * using {@link Union#getSourceVariant|getSourceVariant}.\n *\n * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to\n * identify the layout used to interpret the union contents.  The\n * parameter must be an instance of {@link UnionDiscriminator}, an\n * {@link ExternalLayout} that satisfies {@link\n * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link\n * UIntBE}).  When a non-external layout element is passed the layout\n * appears at the start of the union.  In all cases the (synthesized)\n * {@link UnionDiscriminator} instance is recorded as {@link\n * Union#discriminator|discriminator}.\n *\n * @param {(Layout|null)} defaultLayout - initializer for {@link\n * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.\n * If `null` there is no default layout: the union has data-dependent\n * length and attempts to decode or encode unrecognized variants will\n * throw an exception.  A {@link Layout} instance must have a\n * non-negative {@link Layout#span|span}, and if it lacks a {@link\n * Layout#property|property} the {@link\n * Union#defaultLayout|defaultLayout} will be a {@link\n * Layout#replicate|replica} with property `content`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Union extends Layout {\n  constructor(discr, defaultLayout, property) {\n    const upv = discr instanceof UInt || discr instanceof UIntBE;\n    if (upv) {\n      discr = new UnionLayoutDiscriminator(new OffsetLayout(discr));\n    } else if (discr instanceof ExternalLayout && discr.isCount()) {\n      discr = new UnionLayoutDiscriminator(discr);\n    } else if (!(discr instanceof UnionDiscriminator)) {\n      throw new TypeError('discr must be a UnionDiscriminator ' + 'or an unsigned integer layout');\n    }\n    if (undefined === defaultLayout) {\n      defaultLayout = null;\n    }\n    if (!(null === defaultLayout || defaultLayout instanceof Layout)) {\n      throw new TypeError('defaultLayout must be null or a Layout');\n    }\n    if (null !== defaultLayout) {\n      if (0 > defaultLayout.span) {\n        throw new Error('defaultLayout must have constant span');\n      }\n      if (undefined === defaultLayout.property) {\n        defaultLayout = defaultLayout.replicate('content');\n      }\n    }\n\n    /* The union span can be estimated only if there's a default\n     * layout.  The union spans its default layout, plus any prefix\n     * variant layout.  By construction both layouts, if present, have\n     * non-negative span. */\n    let span = -1;\n    if (defaultLayout) {\n      span = defaultLayout.span;\n      if (0 <= span && upv) {\n        span += discr.layout.span;\n      }\n    }\n    super(span, property);\n\n    /** The interface for the discriminator value in isolation.\n     *\n     * This a {@link UnionDiscriminator} either passed to the\n     * constructor or synthesized from the `discr` constructor\n     * argument.  {@link\n     * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be\n     * `true` iff the `discr` parameter was a non-offset {@link\n     * Layout} instance. */\n    this.discriminator = discr;\n\n    /** `true` if the {@link Union#discriminator|discriminator} is the\n     * first field in the union.\n     *\n     * If `false` the discriminator is obtained from somewhere\n     * else. */\n    this.usesPrefixDiscriminator = upv;\n\n    /** The layout for non-discriminator content when the value of the\n     * discriminator is not recognized.\n     *\n     * This is the value passed to the constructor.  It is\n     * structurally equivalent to the second component of {@link\n     * Union#layout|layout} but may have a different property\n     * name. */\n    this.defaultLayout = defaultLayout;\n\n    /** A registry of allowed variants.\n     *\n     * The keys are unsigned integers which should be compatible with\n     * {@link Union.discriminator|discriminator}.  The property value\n     * is the corresponding {@link VariantLayout} instances assigned\n     * to this union by {@link Union#addVariant|addVariant}.\n     *\n     * **NOTE** The registry remains mutable so that variants can be\n     * {@link Union#addVariant|added} at any time.  Users should not\n     * manipulate the content of this property. */\n    this.registry = {};\n\n    /* Private variable used when invoking getSourceVariant */\n    let boundGetSourceVariant = this.defaultGetSourceVariant.bind(this);\n\n    /** Function to infer the variant selected by a source object.\n     *\n     * Defaults to {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may\n     * be overridden using {@link\n     * Union#configGetSourceVariant|configGetSourceVariant}.\n     *\n     * @param {Object} src - as with {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n     *\n     * @returns {(undefined|VariantLayout)} The default variant\n     * (`undefined`) or first registered variant that uses a property\n     * available in `src`. */\n    this.getSourceVariant = function (src) {\n      return boundGetSourceVariant(src);\n    };\n\n    /** Function to override the implementation of {@link\n     * Union#getSourceVariant|getSourceVariant}.\n     *\n     * Use this if the desired variant cannot be identified using the\n     * algorithm of {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n     *\n     * **NOTE** The provided function will be invoked bound to this\n     * Union instance, providing local access to {@link\n     * Union#registry|registry}.\n     *\n     * @param {Function} gsv - a function that follows the API of\n     * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */\n    this.configGetSourceVariant = function (gsv) {\n      boundGetSourceVariant = gsv.bind(this);\n    };\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (0 <= this.span) {\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    /* Default layouts always have non-negative span, so we don't have\n     * one and we have to recognize the variant which will in turn\n     * determine the span. */\n    const vlo = this.getVariant(b, offset);\n    if (!vlo) {\n      throw new Error('unable to determine span for unrecognized variant');\n    }\n    return vlo.getSpan(b, offset);\n  }\n\n  /**\n   * Method to infer a registered Union variant compatible with `src`.\n   *\n   * The first satisified rule in the following sequence defines the\n   * return value:\n   * * If `src` has properties matching the Union discriminator and\n   *   the default layout, `undefined` is returned regardless of the\n   *   value of the discriminator property (this ensures the default\n   *   layout will be used);\n   * * If `src` has a property matching the Union discriminator, the\n   *   value of the discriminator identifies a registered variant, and\n   *   either (a) the variant has no layout, or (b) `src` has the\n   *   variant's property, then the variant is returned (because the\n   *   source satisfies the constraints of the variant it identifies);\n   * * If `src` does not have a property matching the Union\n   *   discriminator, but does have a property matching a registered\n   *   variant, then the variant is returned (because the source\n   *   matches a variant without an explicit conflict);\n   * * An error is thrown (because we either can't identify a variant,\n   *   or we were explicitly told the variant but can't satisfy it).\n   *\n   * @param {Object} src - an object presumed to be compatible with\n   * the content of the Union.\n   *\n   * @return {(undefined|VariantLayout)} - as described above.\n   *\n   * @throws {Error} - if `src` cannot be associated with a default or\n   * registered variant.\n   */\n  defaultGetSourceVariant(src) {\n    if (src.hasOwnProperty(this.discriminator.property)) {\n      if (this.defaultLayout && src.hasOwnProperty(this.defaultLayout.property)) {\n        return undefined;\n      }\n      const vlo = this.registry[src[this.discriminator.property]];\n      if (vlo && (!vlo.layout || src.hasOwnProperty(vlo.property))) {\n        return vlo;\n      }\n    } else {\n      for (const tag in this.registry) {\n        const vlo = this.registry[tag];\n        if (src.hasOwnProperty(vlo.property)) {\n          return vlo;\n        }\n      }\n    }\n    throw new Error('unable to infer src variant');\n  }\n\n  /** Implement {@link Layout#decode|decode} for {@link Union}.\n   *\n   * If the variant is {@link Union#addVariant|registered} the return\n   * value is an instance of that variant, with no explicit\n   * discriminator.  Otherwise the {@link Union#defaultLayout|default\n   * layout} is used to decode the content. */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let dest;\n    const dlo = this.discriminator;\n    const discr = dlo.decode(b, offset);\n    let clo = this.registry[discr];\n    if (undefined === clo) {\n      let contentOffset = 0;\n      clo = this.defaultLayout;\n      if (this.usesPrefixDiscriminator) {\n        contentOffset = dlo.layout.span;\n      }\n      dest = this.makeDestinationObject();\n      dest[dlo.property] = discr;\n      dest[clo.property] = this.defaultLayout.decode(b, offset + contentOffset);\n    } else {\n      dest = clo.decode(b, offset);\n    }\n    return dest;\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link Union}.\n   *\n   * This API assumes the `src` object is consistent with the union's\n   * {@link Union#defaultLayout|default layout}.  To encode variants\n   * use the appropriate variant-specific {@link VariantLayout#encode}\n   * method. */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const vlo = this.getSourceVariant(src);\n    if (undefined === vlo) {\n      const dlo = this.discriminator;\n      const clo = this.defaultLayout;\n      let contentOffset = 0;\n      if (this.usesPrefixDiscriminator) {\n        contentOffset = dlo.layout.span;\n      }\n      dlo.encode(src[dlo.property], b, offset);\n      return contentOffset + clo.encode(src[clo.property], b, offset + contentOffset);\n    }\n    return vlo.encode(src, b, offset);\n  }\n\n  /** Register a new variant structure within a union.  The newly\n   * created variant is returned.\n   *\n   * @param {Number} variant - initializer for {@link\n   * VariantLayout#variant|variant}.\n   *\n   * @param {Layout} layout - initializer for {@link\n   * VariantLayout#layout|layout}.\n   *\n   * @param {String} property - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @return {VariantLayout} */\n  addVariant(variant, layout, property) {\n    const rv = new VariantLayout(this, variant, layout, property);\n    this.registry[variant] = rv;\n    return rv;\n  }\n\n  /**\n   * Get the layout associated with a registered variant.\n   *\n   * If `vb` does not produce a registered variant the function returns\n   * `undefined`.\n   *\n   * @param {(Number|Buffer)} vb - either the variant number, or a\n   * buffer from which the discriminator is to be read.\n   *\n   * @param {Number} offset - offset into `vb` for the start of the\n   * union.  Used only when `vb` is an instance of {Buffer}.\n   *\n   * @return {({VariantLayout}|undefined)}\n   */\n  getVariant(vb, offset) {\n    let variant = vb;\n    if (buffer.Buffer.isBuffer(vb)) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n      variant = this.discriminator.decode(vb, offset);\n    }\n    return this.registry[variant];\n  }\n}\n\n/**\n * Represent a specific variant within a containing union.\n *\n * **NOTE** The {@link Layout#span|span} of the variant may include\n * the span of the {@link Union#discriminator|discriminator} used to\n * identify it, but values read and written using the variant strictly\n * conform to the content of {@link VariantLayout#layout|layout}.\n *\n * **NOTE** User code should not invoke this constructor directly.  Use\n * the union {@link Union#addVariant|addVariant} helper method.\n *\n * @param {Union} union - initializer for {@link\n * VariantLayout#union|union}.\n *\n * @param {Number} variant - initializer for {@link\n * VariantLayout#variant|variant}.\n *\n * @param {Layout} [layout] - initializer for {@link\n * VariantLayout#layout|layout}.  If absent the variant carries no\n * data.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.  Unlike many other layouts, variant\n * layouts normally include a property name so they can be identified\n * within their containing {@link Union}.  The property identifier may\n * be absent only if `layout` is is absent.\n *\n * @augments {Layout}\n */\nclass VariantLayout extends Layout {\n  constructor(union, variant, layout, property) {\n    if (!(union instanceof Union)) {\n      throw new TypeError('union must be a Union');\n    }\n    if (!Number.isInteger(variant) || 0 > variant) {\n      throw new TypeError('variant must be a (non-negative) integer');\n    }\n    if ('string' === typeof layout && undefined === property) {\n      property = layout;\n      layout = null;\n    }\n    if (layout) {\n      if (!(layout instanceof Layout)) {\n        throw new TypeError('layout must be a Layout');\n      }\n      if (null !== union.defaultLayout && 0 <= layout.span && layout.span > union.defaultLayout.span) {\n        throw new Error('variant span exceeds span of containing union');\n      }\n      if ('string' !== typeof property) {\n        throw new TypeError('variant must have a String property');\n      }\n    }\n    let span = union.span;\n    if (0 > union.span) {\n      span = layout ? layout.span : 0;\n      if (0 <= span && union.usesPrefixDiscriminator) {\n        span += union.discriminator.layout.span;\n      }\n    }\n    super(span, property);\n\n    /** The {@link Union} to which this variant belongs. */\n    this.union = union;\n\n    /** The unsigned integral value identifying this variant within\n     * the {@link Union#discriminator|discriminator} of the containing\n     * union. */\n    this.variant = variant;\n\n    /** The {@link Layout} to be used when reading/writing the\n     * non-discriminator part of the {@link\n     * VariantLayout#union|union}.  If `null` the variant carries no\n     * data. */\n    this.layout = layout || null;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (0 <= this.span) {\n      /* Will be equal to the containing union span if that is not\n       * variable. */\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let contentOffset = 0;\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    }\n    /* Span is defined solely by the variant (and prefix discriminator) */\n    return contentOffset + this.layout.getSpan(b, offset + contentOffset);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    const dest = this.makeDestinationObject();\n    if (undefined === offset) {\n      offset = 0;\n    }\n    if (this !== this.union.getVariant(b, offset)) {\n      throw new Error('variant mismatch');\n    }\n    let contentOffset = 0;\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    }\n    if (this.layout) {\n      dest[this.property] = this.layout.decode(b, offset + contentOffset);\n    } else if (this.property) {\n      dest[this.property] = true;\n    } else if (this.union.usesPrefixDiscriminator) {\n      dest[this.union.discriminator.property] = this.variant;\n    }\n    return dest;\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let contentOffset = 0;\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    }\n    if (this.layout && !src.hasOwnProperty(this.property)) {\n      throw new TypeError('variant lacks property ' + this.property);\n    }\n    this.union.discriminator.encode(this.variant, b, offset);\n    let span = contentOffset;\n    if (this.layout) {\n      this.layout.encode(src[this.property], b, offset + contentOffset);\n      span += this.layout.getSpan(b, offset + contentOffset);\n      if (0 <= this.union.span && span > this.union.span) {\n        throw new Error('encoded variant overruns containing union');\n      }\n    }\n    return span;\n  }\n\n  /** Delegate {@link Layout#fromArray|fromArray} to {@link\n   * VariantLayout#layout|layout}. */\n  fromArray(values) {\n    if (this.layout) {\n      return this.layout.fromArray(values);\n    }\n  }\n}\n\n/** JavaScript chose to define bitwise operations as operating on\n * signed 32-bit values in 2's complement form, meaning any integer\n * with bit 31 set is going to look negative.  For right shifts that's\n * not a problem, because `>>>` is a logical shift, but for every\n * other bitwise operator we have to compensate for possible negative\n * results. */\nfunction fixBitwiseResult(v) {\n  if (0 > v) {\n    v += 0x100000000;\n  }\n  return v;\n}\n\n/**\n * Contain a sequence of bit fields as an unsigned integer.\n *\n * *Factory*: {@link module:Layout.bits|bits}\n *\n * This is a container element; within it there are {@link BitField}\n * instances that provide the extracted properties.  The container\n * simply defines the aggregate representation and its bit ordering.\n * The representation is an object containing properties with numeric\n * or {@link Boolean} values.\n *\n * {@link BitField}s are added with the {@link\n * BitStructure#addField|addField} and {@link\n * BitStructure#addBoolean|addBoolean} methods.\n\n * @param {Layout} word - initializer for {@link\n * BitStructure#word|word}.  The parameter must be an instance of\n * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.\n *\n * @param {bool} [msb] - `true` if the bit numbering starts at the\n * most significant bit of the containing word; `false` (default) if\n * it starts at the least significant bit of the containing word.  If\n * the parameter at this position is a string and `property` is\n * `undefined` the value of this argument will instead be used as the\n * value of `property`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass BitStructure extends Layout {\n  constructor(word, msb, property) {\n    if (!(word instanceof UInt || word instanceof UIntBE)) {\n      throw new TypeError('word must be a UInt or UIntBE layout');\n    }\n    if ('string' === typeof msb && undefined === property) {\n      property = msb;\n      msb = undefined;\n    }\n    if (4 < word.span) {\n      throw new RangeError('word cannot exceed 32 bits');\n    }\n    super(word.span, property);\n\n    /** The layout used for the packed value.  {@link BitField}\n     * instances are packed sequentially depending on {@link\n     * BitStructure#msb|msb}. */\n    this.word = word;\n\n    /** Whether the bit sequences are packed starting at the most\n     * significant bit growing down (`true`), or the least significant\n     * bit growing up (`false`).\n     *\n     * **NOTE** Regardless of this value, the least significant bit of\n     * any {@link BitField} value is the least significant bit of the\n     * corresponding section of the packed value. */\n    this.msb = !!msb;\n\n    /** The sequence of {@link BitField} layouts that comprise the\n     * packed structure.\n     *\n     * **NOTE** The array remains mutable to allow fields to be {@link\n     * BitStructure#addField|added} after construction.  Users should\n     * not manipulate the content of this property.*/\n    this.fields = [];\n\n    /* Storage for the value.  Capture a variable instead of using an\n     * instance property because we don't want anything to change the\n     * value without going through the mutator. */\n    let value = 0;\n    this._packedSetValue = function (v) {\n      value = fixBitwiseResult(v);\n      return this;\n    };\n    this._packedGetValue = function () {\n      return value;\n    };\n  }\n\n  /** @override */\n  decode(b, offset) {\n    const dest = this.makeDestinationObject();\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const value = this.word.decode(b, offset);\n    this._packedSetValue(value);\n    for (const fd of this.fields) {\n      if (undefined !== fd.property) {\n        dest[fd.property] = fd.decode(value);\n      }\n    }\n    return dest;\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link BitStructure}.\n   *\n   * If `src` is missing a property for a member with a defined {@link\n   * Layout#property|property} the corresponding region of the packed\n   * value is left unmodified.  Unused bits are also left unmodified. */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const value = this.word.decode(b, offset);\n    this._packedSetValue(value);\n    for (const fd of this.fields) {\n      if (undefined !== fd.property) {\n        const fv = src[fd.property];\n        if (undefined !== fv) {\n          fd.encode(fv);\n        }\n      }\n    }\n    return this.word.encode(this._packedGetValue(), b, offset);\n  }\n\n  /** Register a new bitfield with a containing bit structure.  The\n   * resulting bitfield is returned.\n   *\n   * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n   *\n   * @param {string} property - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @return {BitField} */\n  addField(bits, property) {\n    const bf = new BitField(this, bits, property);\n    this.fields.push(bf);\n    return bf;\n  }\n\n  /** As with {@link BitStructure#addField|addField} for single-bit\n   * fields with `boolean` value representation.\n   *\n   * @param {string} property - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @return {Boolean} */\n  addBoolean(property) {\n    // This is my Boolean, not the Javascript one.\n    // eslint-disable-next-line no-new-wrappers\n    const bf = new Boolean(this, property);\n    this.fields.push(bf);\n    return bf;\n  }\n\n  /**\n   * Get access to the bit field for a given property.\n   *\n   * @param {String} property - the bit field of interest.\n   *\n   * @return {BitField} - the field associated with `property`, or\n   * undefined if there is no such property.\n   */\n  fieldFor(property) {\n    if ('string' !== typeof property) {\n      throw new TypeError('property must be string');\n    }\n    for (const fd of this.fields) {\n      if (fd.property === property) {\n        return fd;\n      }\n    }\n  }\n}\n\n/**\n * Represent a sequence of bits within a {@link BitStructure}.\n *\n * All bit field values are represented as unsigned integers.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addField|addField} helper\n * method.\n *\n * **NOTE** BitField instances are not instances of {@link Layout}\n * since {@link Layout#span|span} measures 8-bit units.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n */\nclass BitField {\n  constructor(container, bits, property) {\n    if (!(container instanceof BitStructure)) {\n      throw new TypeError('container must be a BitStructure');\n    }\n    if (!Number.isInteger(bits) || 0 >= bits) {\n      throw new TypeError('bits must be positive integer');\n    }\n    const totalBits = 8 * container.span;\n    const usedBits = container.fields.reduce((sum, fd) => sum + fd.bits, 0);\n    if (bits + usedBits > totalBits) {\n      throw new Error('bits too long for span remainder (' + (totalBits - usedBits) + ' of ' + totalBits + ' remain)');\n    }\n\n    /** The {@link BitStructure} instance to which this bit field\n     * belongs. */\n    this.container = container;\n\n    /** The span of this value in bits. */\n    this.bits = bits;\n\n    /** A mask of {@link BitField#bits|bits} bits isolating value bits\n     * that fit within the field.\n     *\n     * That is, it masks a value that has not yet been shifted into\n     * position within its containing packed integer. */\n    this.valueMask = (1 << bits) - 1;\n    if (32 === bits) {\n      // shifted value out of range\n      this.valueMask = 0xFFFFFFFF;\n    }\n\n    /** The offset of the value within the containing packed unsigned\n     * integer.  The least significant bit of the packed value is at\n     * offset zero, regardless of bit ordering used. */\n    this.start = usedBits;\n    if (this.container.msb) {\n      this.start = totalBits - usedBits - bits;\n    }\n\n    /** A mask of {@link BitField#bits|bits} isolating the field value\n     * within the containing packed unsigned integer. */\n    this.wordMask = fixBitwiseResult(this.valueMask << this.start);\n\n    /** The property name used when this bitfield is represented in an\n     * Object.\n     *\n     * Intended to be functionally equivalent to {@link\n     * Layout#property}.\n     *\n     * If left undefined the corresponding span of bits will be\n     * treated as padding: it will not be mutated by {@link\n     * Layout#encode|encode} nor represented as a property in the\n     * decoded Object. */\n    this.property = property;\n  }\n\n  /** Store a value into the corresponding subsequence of the containing\n   * bit field. */\n  decode() {\n    const word = this.container._packedGetValue();\n    const wordValue = fixBitwiseResult(word & this.wordMask);\n    const value = wordValue >>> this.start;\n    return value;\n  }\n\n  /** Store a value into the corresponding subsequence of the containing\n   * bit field.\n   *\n   * **NOTE** This is not a specialization of {@link\n   * Layout#encode|Layout.encode} and there is no return value. */\n  encode(value) {\n    if (!Number.isInteger(value) || value !== fixBitwiseResult(value & this.valueMask)) {\n      throw new TypeError(nameWithProperty('BitField.encode', this) + ' value must be integer not exceeding ' + this.valueMask);\n    }\n    const word = this.container._packedGetValue();\n    const wordValue = fixBitwiseResult(value << this.start);\n    this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask) | wordValue);\n  }\n}\n\n/**\n * Represent a single bit within a {@link BitStructure} as a\n * JavaScript boolean.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addBoolean|addBoolean} helper\n * method.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {BitField}\n */\n/* eslint-disable no-extend-native */\nclass Boolean extends BitField {\n  constructor(container, property) {\n    super(container, 1, property);\n  }\n\n  /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.\n   *\n   * @returns {boolean} */\n  decode(b, offset) {\n    return !!BitField.prototype.decode.call(this, b, offset);\n  }\n\n  /** @override */\n  encode(value) {\n    if ('boolean' === typeof value) {\n      // BitField requires integer values\n      value = +value;\n    }\n    return BitField.prototype.encode.call(this, value);\n  }\n}\n/* eslint-enable no-extend-native */\n\n/**\n * Contain a fixed-length block of arbitrary data, represented as a\n * Buffer.\n *\n * *Factory*: {@link module:Layout.blob|blob}\n *\n * @param {(Number|ExternalLayout)} length - initializes {@link\n * Blob#length|length}.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Blob extends Layout {\n  constructor(length, property) {\n    if (!(length instanceof ExternalLayout && length.isCount() || Number.isInteger(length) && 0 <= length)) {\n      throw new TypeError('length must be positive integer ' + 'or an unsigned integer ExternalLayout');\n    }\n    let span = -1;\n    if (!(length instanceof ExternalLayout)) {\n      span = length;\n    }\n    super(span, property);\n\n    /** The number of bytes in the blob.\n     *\n     * This may be a non-negative integer, or an instance of {@link\n     * ExternalLayout} that satisfies {@link\n     * ExternalLayout#isCount|isCount()}. */\n    this.length = length;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    let span = this.span;\n    if (0 > span) {\n      span = this.length.decode(b, offset);\n    }\n    return span;\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = this.span;\n    if (0 > span) {\n      span = this.length.decode(b, offset);\n    }\n    return b.slice(offset, offset + span);\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link Blob}.\n   *\n   * **NOTE** If {@link Layout#count|count} is an instance of {@link\n   * ExternalLayout} then the length of `src` will be encoded as the\n   * count after `src` is encoded. */\n  encode(src, b, offset) {\n    let span = this.length;\n    if (this.length instanceof ExternalLayout) {\n      span = src.length;\n    }\n    if (!(buffer.Buffer.isBuffer(src) && span === src.length)) {\n      throw new TypeError(nameWithProperty('Blob.encode', this) + ' requires (length ' + span + ') Buffer as src');\n    }\n    if (offset + span > b.length) {\n      throw new RangeError('encoding overruns Buffer');\n    }\n    b.write(src.toString('hex'), offset, span, 'hex');\n    if (this.length instanceof ExternalLayout) {\n      this.length.encode(span, b, offset);\n    }\n    return span;\n  }\n}\n\n/**\n * Contain a `NUL`-terminated UTF8 string.\n *\n * *Factory*: {@link module:Layout.cstr|cstr}\n *\n * **NOTE** Any UTF8 string that incorporates a zero-valued byte will\n * not be correctly decoded by this layout.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass CString extends Layout {\n  constructor(property) {\n    super(-1, property);\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (!buffer.Buffer.isBuffer(b)) {\n      throw new TypeError('b must be a Buffer');\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let idx = offset;\n    while (idx < b.length && 0 !== b[idx]) {\n      idx += 1;\n    }\n    return 1 + idx - offset;\n  }\n\n  /** @override */\n  decode(b, offset, dest) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = this.getSpan(b, offset);\n    return b.slice(offset, offset + span - 1).toString('utf-8');\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    /* Must force this to a string, lest it be a number and the\n     * \"utf8-encoding\" below actually allocate a buffer of length\n     * src */\n    if ('string' !== typeof src) {\n      src = src.toString();\n    }\n    const srcb = new buffer.Buffer(src, 'utf8');\n    const span = srcb.length;\n    if (offset + span > b.length) {\n      throw new RangeError('encoding overruns Buffer');\n    }\n    srcb.copy(b, offset);\n    b[offset + span] = 0;\n    return span + 1;\n  }\n}\n\n/**\n * Contain a UTF8 string with implicit length.\n *\n * *Factory*: {@link module:Layout.utf8|utf8}\n *\n * **NOTE** Because the length is implicit in the size of the buffer\n * this layout should be used only in isolation, or in a situation\n * where the length can be expressed by operating on a slice of the\n * containing buffer.\n *\n * @param {Number} [maxSpan] - the maximum length allowed for encoded\n * string content.  If not provided there is no bound on the allowed\n * content.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UTF8 extends Layout {\n  constructor(maxSpan, property) {\n    if ('string' === typeof maxSpan && undefined === property) {\n      property = maxSpan;\n      maxSpan = undefined;\n    }\n    if (undefined === maxSpan) {\n      maxSpan = -1;\n    } else if (!Number.isInteger(maxSpan)) {\n      throw new TypeError('maxSpan must be an integer');\n    }\n    super(-1, property);\n\n    /** The maximum span of the layout in bytes.\n     *\n     * Positive values are generally expected.  Zero is abnormal.\n     * Attempts to encode or decode a value that exceeds this length\n     * will throw a `RangeError`.\n     *\n     * A negative value indicates that there is no bound on the length\n     * of the content. */\n    this.maxSpan = maxSpan;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (!buffer.Buffer.isBuffer(b)) {\n      throw new TypeError('b must be a Buffer');\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.length - offset;\n  }\n\n  /** @override */\n  decode(b, offset, dest) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = this.getSpan(b, offset);\n    if (0 <= this.maxSpan && this.maxSpan < span) {\n      throw new RangeError('text length exceeds maxSpan');\n    }\n    return b.slice(offset, offset + span).toString('utf-8');\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    /* Must force this to a string, lest it be a number and the\n     * \"utf8-encoding\" below actually allocate a buffer of length\n     * src */\n    if ('string' !== typeof src) {\n      src = src.toString();\n    }\n    const srcb = new buffer.Buffer(src, 'utf8');\n    const span = srcb.length;\n    if (0 <= this.maxSpan && this.maxSpan < span) {\n      throw new RangeError('text length exceeds maxSpan');\n    }\n    if (offset + span > b.length) {\n      throw new RangeError('encoding overruns Buffer');\n    }\n    srcb.copy(b, offset);\n    return span;\n  }\n}\n\n/**\n * Contain a constant value.\n *\n * This layout may be used in cases where a JavaScript value can be\n * inferred without an expression in the binary encoding.  An example\n * would be a {@link VariantLayout|variant layout} where the content\n * is implied by the union {@link Union#discriminator|discriminator}.\n *\n * @param {Object|Number|String} value - initializer for {@link\n * Constant#value|value}.  If the value is an object (or array) and\n * the application intends the object to remain unchanged regardless\n * of what is done to values decoded by this layout, the value should\n * be frozen prior passing it to this constructor.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Constant extends Layout {\n  constructor(value, property) {\n    super(0, property);\n\n    /** The value produced by this constant when the layout is {@link\n     * Constant#decode|decoded}.\n     *\n     * Any JavaScript value including `null` and `undefined` is\n     * permitted.\n     *\n     * **WARNING** If `value` passed in the constructor was not\n     * frozen, it is possible for users of decoded values to change\n     * the content of the value. */\n    this.value = value;\n  }\n\n  /** @override */\n  decode(b, offset, dest) {\n    return this.value;\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    /* Constants take no space */\n    return 0;\n  }\n}\nLayout$1.ExternalLayout = ExternalLayout;\nLayout$1.GreedyCount = GreedyCount;\nLayout$1.OffsetLayout = OffsetLayout;\nLayout$1.UInt = UInt;\nLayout$1.UIntBE = UIntBE;\nLayout$1.Int = Int;\nLayout$1.IntBE = IntBE;\nLayout$1.Float = Float;\nLayout$1.FloatBE = FloatBE;\nLayout$1.Double = Double;\nLayout$1.DoubleBE = DoubleBE;\nLayout$1.Sequence = Sequence;\nLayout$1.Structure = Structure;\nLayout$1.UnionDiscriminator = UnionDiscriminator;\nLayout$1.UnionLayoutDiscriminator = UnionLayoutDiscriminator;\nLayout$1.Union = Union;\nLayout$1.VariantLayout = VariantLayout;\nLayout$1.BitStructure = BitStructure;\nLayout$1.BitField = BitField;\nLayout$1.Boolean = Boolean;\nLayout$1.Blob = Blob;\nLayout$1.CString = CString;\nLayout$1.UTF8 = UTF8;\nLayout$1.Constant = Constant;\n\n/** Factory for {@link GreedyCount}. */\nLayout$1.greedy = (elementSpan, property) => new GreedyCount(elementSpan, property);\n\n/** Factory for {@link OffsetLayout}. */\nLayout$1.offset = (layout, offset, property) => new OffsetLayout(layout, offset, property);\n\n/** Factory for {@link UInt|unsigned int layouts} spanning one\n * byte. */\nvar u8 = Layout$1.u8 = property => new UInt(1, property);\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning two bytes. */\nLayout$1.u16 = property => new UInt(2, property);\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning three bytes. */\nLayout$1.u24 = property => new UInt(3, property);\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning four bytes. */\nvar u32 = Layout$1.u32 = property => new UInt(4, property);\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning five bytes. */\nLayout$1.u40 = property => new UInt(5, property);\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning six bytes. */\nLayout$1.u48 = property => new UInt(6, property);\n\n/** Factory for {@link NearUInt64|little-endian unsigned int\n * layouts} interpreted as Numbers. */\nLayout$1.nu64 = property => new NearUInt64(property);\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning two bytes. */\nLayout$1.u16be = property => new UIntBE(2, property);\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning three bytes. */\nLayout$1.u24be = property => new UIntBE(3, property);\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning four bytes. */\nLayout$1.u32be = property => new UIntBE(4, property);\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning five bytes. */\nLayout$1.u40be = property => new UIntBE(5, property);\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning six bytes. */\nLayout$1.u48be = property => new UIntBE(6, property);\n\n/** Factory for {@link NearUInt64BE|big-endian unsigned int\n * layouts} interpreted as Numbers. */\nLayout$1.nu64be = property => new NearUInt64BE(property);\n\n/** Factory for {@link Int|signed int layouts} spanning one\n * byte. */\nLayout$1.s8 = property => new Int(1, property);\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning two bytes. */\nLayout$1.s16 = property => new Int(2, property);\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning three bytes. */\nLayout$1.s24 = property => new Int(3, property);\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning four bytes. */\nLayout$1.s32 = property => new Int(4, property);\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning five bytes. */\nLayout$1.s40 = property => new Int(5, property);\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning six bytes. */\nLayout$1.s48 = property => new Int(6, property);\n\n/** Factory for {@link NearInt64|little-endian signed int layouts}\n * interpreted as Numbers. */\nLayout$1.ns64 = property => new NearInt64(property);\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning two bytes. */\nLayout$1.s16be = property => new IntBE(2, property);\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning three bytes. */\nLayout$1.s24be = property => new IntBE(3, property);\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning four bytes. */\nLayout$1.s32be = property => new IntBE(4, property);\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning five bytes. */\nLayout$1.s40be = property => new IntBE(5, property);\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning six bytes. */\nLayout$1.s48be = property => new IntBE(6, property);\n\n/** Factory for {@link NearInt64BE|big-endian signed int layouts}\n * interpreted as Numbers. */\nLayout$1.ns64be = property => new NearInt64BE(property);\n\n/** Factory for {@link Float|little-endian 32-bit floating point} values. */\nLayout$1.f32 = property => new Float(property);\n\n/** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */\nLayout$1.f32be = property => new FloatBE(property);\n\n/** Factory for {@link Double|little-endian 64-bit floating point} values. */\nLayout$1.f64 = property => new Double(property);\n\n/** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */\nLayout$1.f64be = property => new DoubleBE(property);\n\n/** Factory for {@link Structure} values. */\nvar struct = Layout$1.struct = (fields, property, decodePrefixes) => new Structure(fields, property, decodePrefixes);\n\n/** Factory for {@link BitStructure} values. */\nLayout$1.bits = (word, msb, property) => new BitStructure(word, msb, property);\n\n/** Factory for {@link Sequence} values. */\nLayout$1.seq = (elementLayout, count, property) => new Sequence(elementLayout, count, property);\n\n/** Factory for {@link Union} values. */\nLayout$1.union = (discr, defaultLayout, property) => new Union(discr, defaultLayout, property);\n\n/** Factory for {@link UnionLayoutDiscriminator} values. */\nLayout$1.unionLayoutDiscriminator = (layout, property) => new UnionLayoutDiscriminator(layout, property);\n\n/** Factory for {@link Blob} values. */\nvar blob = Layout$1.blob = (length, property) => new Blob(length, property);\n\n/** Factory for {@link CString} values. */\nLayout$1.cstr = property => new CString(property);\n\n/** Factory for {@link UTF8} values. */\nLayout$1.utf8 = (maxSpan, property) => new UTF8(maxSpan, property);\n\n/** Factory for {@link Constant} values. */\nLayout$1.const = (value, property) => new Constant(value, property);\n\n//      \n/**\n * Layout for a public key\n */\n\nconst publicKey = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'publicKey';\n  return blob(32, property);\n};\n/**\n * Layout for a 64bit unsigned value\n */\n\nconst uint64 = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'uint64';\n  return blob(8, property);\n};\n\n//      \nfunction sendAndConfirmTransaction(title, connection, transaction) {\n  for (var _len = arguments.length, signers = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    signers[_key - 3] = arguments[_key];\n  }\n  return sendAndConfirmTransaction$1(connection, transaction, signers, {\n    skipPreflight: false\n  });\n}\nconst TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');\nconst ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\nconst FAILED_TO_FIND_ACCOUNT = 'Failed to find account';\nconst INVALID_ACCOUNT_OWNER = 'Invalid account owner';\n/**\n * Unfortunately, BufferLayout.encode uses an `instanceof` check for `Buffer`\n * which fails when using `publicKey.toBuffer()` directly because the bundled `Buffer`\n * class in `@solana/web3.js` is different from the bundled `Buffer` class in this package\n */\n\nfunction pubkeyToBuffer(publicKey) {\n  return buffer.Buffer.from(publicKey.toBuffer());\n}\n/**\n * 64-bit value\n */\n\nclass u64 extends BN {\n  /**\n   * Convert to Buffer representation\n   */\n  toBuffer() {\n    const a = super.toArray().reverse();\n    const b = buffer.Buffer.from(a);\n    if (b.length === 8) {\n      return b;\n    }\n    assert(b.length < 8, 'u64 too large');\n    const zeroPad = buffer.Buffer.alloc(8);\n    b.copy(zeroPad);\n    return zeroPad;\n  }\n  /**\n   * Construct a u64 from Buffer representation\n   */\n\n  static fromBuffer(buffer) {\n    assert(buffer.length === 8, `Invalid buffer length: ${buffer.length}`);\n    return new u64([...buffer].reverse().map(i => `00${i.toString(16)}`.slice(-2)).join(''), 16);\n  }\n}\nfunction isAccount(accountOrPublicKey) {\n  return 'publicKey' in accountOrPublicKey;\n}\nconst AuthorityTypeCodes = {\n  MintTokens: 0,\n  FreezeAccount: 1,\n  AccountOwner: 2,\n  CloseAccount: 3\n}; // The address of the special mint for wrapped native token.\n\nconst NATIVE_MINT = new PublicKey('So11111111111111111111111111111111111111112');\n/**\n * Information about the mint\n */\n\nconst MintLayout = struct([u32('mintAuthorityOption'), publicKey('mintAuthority'), uint64('supply'), u8('decimals'), u8('isInitialized'), u32('freezeAuthorityOption'), publicKey('freezeAuthority')]);\n/**\n * Information about an account\n */\n\n/**\n * @private\n */\n\nconst AccountLayout = struct([publicKey('mint'), publicKey('owner'), uint64('amount'), u32('delegateOption'), publicKey('delegate'), u8('state'), u32('isNativeOption'), uint64('isNative'), uint64('delegatedAmount'), u32('closeAuthorityOption'), publicKey('closeAuthority')]);\n/**\n * Information about an multisig\n */\n\n/**\n * @private\n */\n\nconst MultisigLayout = struct([u8('m'), u8('n'), u8('is_initialized'), publicKey('signer1'), publicKey('signer2'), publicKey('signer3'), publicKey('signer4'), publicKey('signer5'), publicKey('signer6'), publicKey('signer7'), publicKey('signer8'), publicKey('signer9'), publicKey('signer10'), publicKey('signer11')]);\n/**\n * An ERC20-like Token\n */\n\nclass Token {\n  /**\n   * @private\n   */\n\n  /**\n   * The public key identifying this mint\n   */\n\n  /**\n   * Program Identifier for the Token program\n   */\n\n  /**\n   * Program Identifier for the Associated Token program\n   */\n\n  /**\n   * Fee payer\n   */\n\n  /**\n   * Create a Token object attached to the specific mint\n   *\n   * @param connection The connection to use\n   * @param token Public key of the mint\n   * @param programId token programId\n   * @param payer Payer of fees\n   */\n  constructor(connection, publicKey, programId, payer) {\n    _defineProperty(this, \"connection\", void 0);\n    _defineProperty(this, \"publicKey\", void 0);\n    _defineProperty(this, \"programId\", void 0);\n    _defineProperty(this, \"associatedProgramId\", void 0);\n    _defineProperty(this, \"payer\", void 0);\n    Object.assign(this, {\n      connection,\n      publicKey,\n      programId,\n      payer,\n      // Hard code is ok; Overriding is needed only for tests\n      associatedProgramId: ASSOCIATED_TOKEN_PROGRAM_ID\n    });\n  }\n  /**\n   * Get the minimum balance for the mint to be rent exempt\n   *\n   * @return Number of lamports required\n   */\n\n  static async getMinBalanceRentForExemptMint(connection) {\n    return await connection.getMinimumBalanceForRentExemption(MintLayout.span);\n  }\n  /**\n   * Get the minimum balance for the account to be rent exempt\n   *\n   * @return Number of lamports required\n   */\n\n  static async getMinBalanceRentForExemptAccount(connection) {\n    return await connection.getMinimumBalanceForRentExemption(AccountLayout.span);\n  }\n  /**\n   * Get the minimum balance for the multsig to be rent exempt\n   *\n   * @return Number of lamports required\n   */\n\n  static async getMinBalanceRentForExemptMultisig(connection) {\n    return await connection.getMinimumBalanceForRentExemption(MultisigLayout.span);\n  }\n  /**\n   * Create and initialize a token.\n   *\n   * @param connection The connection to use\n   * @param payer Fee payer for transaction\n   * @param mintAuthority Account or multisig that will control minting\n   * @param freezeAuthority Optional account or multisig that can freeze token accounts\n   * @param decimals Location of the decimal place\n   * @param programId Optional token programId, uses the system programId by default\n   * @return Token object for the newly minted token\n   */\n\n  static async createMint(connection, payer, mintAuthority, freezeAuthority, decimals, programId) {\n    const mintAccount = Keypair.generate();\n    const token = new Token(connection, mintAccount.publicKey, programId, payer); // Allocate memory for the account\n\n    const balanceNeeded = await Token.getMinBalanceRentForExemptMint(connection);\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: payer.publicKey,\n      newAccountPubkey: mintAccount.publicKey,\n      lamports: balanceNeeded,\n      space: MintLayout.span,\n      programId\n    }));\n    transaction.add(Token.createInitMintInstruction(programId, mintAccount.publicKey, decimals, mintAuthority, freezeAuthority)); // Send the two instructions\n\n    await sendAndConfirmTransaction('createAccount and InitializeMint', connection, transaction, payer, mintAccount);\n    return token;\n  }\n  /**\n   * Create and initialize a new account.\n   *\n   * This account may then be used as a `transfer()` or `approve()` destination\n   *\n   * @param owner User account that will own the new account\n   * @return Public key of the new empty account\n   */\n\n  async createAccount(owner) {\n    // Allocate memory for the account\n    const balanceNeeded = await Token.getMinBalanceRentForExemptAccount(this.connection);\n    const newAccount = Keypair.generate();\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: this.payer.publicKey,\n      newAccountPubkey: newAccount.publicKey,\n      lamports: balanceNeeded,\n      space: AccountLayout.span,\n      programId: this.programId\n    }));\n    const mintPublicKey = this.publicKey;\n    transaction.add(Token.createInitAccountInstruction(this.programId, mintPublicKey, newAccount.publicKey, owner)); // Send the two instructions\n\n    await sendAndConfirmTransaction('createAccount and InitializeAccount', this.connection, transaction, this.payer, newAccount);\n    return newAccount.publicKey;\n  }\n  /**\n   * Create and initialize the associated account.\n   *\n   * This account may then be used as a `transfer()` or `approve()` destination\n   *\n   * @param owner User account that will own the new account\n   * @return Public key of the new associated account\n   */\n\n  async createAssociatedTokenAccount(owner) {\n    const associatedAddress = await Token.getAssociatedTokenAddress(this.associatedProgramId, this.programId, this.publicKey, owner);\n    return this.createAssociatedTokenAccountInternal(owner, associatedAddress);\n  }\n  async createAssociatedTokenAccountInternal(owner, associatedAddress) {\n    await sendAndConfirmTransaction('CreateAssociatedTokenAccount', this.connection, new Transaction().add(Token.createAssociatedTokenAccountInstruction(this.associatedProgramId, this.programId, this.publicKey, associatedAddress, owner, this.payer.publicKey)), this.payer);\n    return associatedAddress;\n  }\n  /**\n   * Retrieve the associated account or create one if not found.\n   *\n   * This account may then be used as a `transfer()` or `approve()` destination\n   *\n   * @param owner User account that will own the new account\n   * @return The new associated account\n   */\n\n  async getOrCreateAssociatedAccountInfo(owner) {\n    const associatedAddress = await Token.getAssociatedTokenAddress(this.associatedProgramId, this.programId, this.publicKey, owner); // This is the optimum logic, considering TX fee, client-side computation,\n    // RPC roundtrips and guaranteed idempotent.\n    // Sadly we can't do this atomically;\n\n    try {\n      return await this.getAccountInfo(associatedAddress);\n    } catch (err) {\n      // INVALID_ACCOUNT_OWNER can be possible if the associatedAddress has\n      // already been received some lamports (= became system accounts).\n      // Assuming program derived addressing is safe, this is the only case\n      // for the INVALID_ACCOUNT_OWNER in this code-path\n      if (err.message === FAILED_TO_FIND_ACCOUNT || err.message === INVALID_ACCOUNT_OWNER) {\n        // as this isn't atomic, it's possible others can create associated\n        // accounts meanwhile\n        try {\n          await this.createAssociatedTokenAccountInternal(owner, associatedAddress);\n        } catch (err) {// ignore all errors; for now there is no API compatible way to\n          // selectively ignore the expected instruction error if the\n          // associated account is existing already.\n        } // Now this should always succeed\n\n        return await this.getAccountInfo(associatedAddress);\n      } else {\n        throw err;\n      }\n    }\n  }\n  /**\n   * Create and initialize a new account on the special native token mint.\n   *\n   * In order to be wrapped, the account must have a balance of native tokens\n   * when it is initialized with the token program.\n   *\n   * This function sends lamports to the new account before initializing it.\n   *\n   * @param connection A solana web3 connection\n   * @param programId The token program ID\n   * @param owner The owner of the new token account\n   * @param payer The source of the lamports to initialize, and payer of the initialization fees.\n   * @param amount The amount of lamports to wrap\n   * @return {Promise<PublicKey>} The new token account\n   */\n\n  static async createWrappedNativeAccount(connection, programId, owner, payer, amount) {\n    // Allocate memory for the account\n    const balanceNeeded = await Token.getMinBalanceRentForExemptAccount(connection); // Create a new account\n\n    const newAccount = Keypair.generate();\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: payer.publicKey,\n      newAccountPubkey: newAccount.publicKey,\n      lamports: balanceNeeded,\n      space: AccountLayout.span,\n      programId\n    })); // Send lamports to it (these will be wrapped into native tokens by the token program)\n\n    transaction.add(SystemProgram.transfer({\n      fromPubkey: payer.publicKey,\n      toPubkey: newAccount.publicKey,\n      lamports: amount\n    })); // Assign the new account to the native token mint.\n    // the account will be initialized with a balance equal to the native token balance.\n    // (i.e. amount)\n\n    transaction.add(Token.createInitAccountInstruction(programId, NATIVE_MINT, newAccount.publicKey, owner)); // Send the three instructions\n\n    await sendAndConfirmTransaction('createAccount, transfer, and initializeAccount', connection, transaction, payer, newAccount);\n    return newAccount.publicKey;\n  }\n  /**\n   * Create and initialize a new multisig.\n   *\n   * This account may then be used for multisignature verification\n   *\n   * @param m Number of required signatures\n   * @param signers Full set of signers\n   * @return Public key of the new multisig account\n   */\n\n  async createMultisig(m, signers) {\n    const multisigAccount = Keypair.generate(); // Allocate memory for the account\n\n    const balanceNeeded = await Token.getMinBalanceRentForExemptMultisig(this.connection);\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: this.payer.publicKey,\n      newAccountPubkey: multisigAccount.publicKey,\n      lamports: balanceNeeded,\n      space: MultisigLayout.span,\n      programId: this.programId\n    })); // create the new account\n\n    let keys = [{\n      pubkey: multisigAccount.publicKey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    signers.forEach(signer => keys.push({\n      pubkey: signer,\n      isSigner: false,\n      isWritable: false\n    }));\n    const dataLayout = struct([u8('instruction'), u8('m')]);\n    const data = buffer.Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 2,\n      // InitializeMultisig instruction\n      m\n    }, data);\n    transaction.add({\n      keys,\n      programId: this.programId,\n      data\n    }); // Send the two instructions\n\n    await sendAndConfirmTransaction('createAccount and InitializeMultisig', this.connection, transaction, this.payer, multisigAccount);\n    return multisigAccount.publicKey;\n  }\n  /**\n   * Retrieve mint information\n   */\n\n  async getMintInfo() {\n    const info = await this.connection.getAccountInfo(this.publicKey);\n    if (info === null) {\n      throw new Error('Failed to find mint account');\n    }\n    if (!info.owner.equals(this.programId)) {\n      throw new Error(`Invalid mint owner: ${JSON.stringify(info.owner)}`);\n    }\n    if (info.data.length != MintLayout.span) {\n      throw new Error(`Invalid mint size`);\n    }\n    const data = buffer.Buffer.from(info.data);\n    const mintInfo = MintLayout.decode(data);\n    if (mintInfo.mintAuthorityOption === 0) {\n      mintInfo.mintAuthority = null;\n    } else {\n      mintInfo.mintAuthority = new PublicKey(mintInfo.mintAuthority);\n    }\n    mintInfo.supply = u64.fromBuffer(mintInfo.supply);\n    mintInfo.isInitialized = mintInfo.isInitialized != 0;\n    if (mintInfo.freezeAuthorityOption === 0) {\n      mintInfo.freezeAuthority = null;\n    } else {\n      mintInfo.freezeAuthority = new PublicKey(mintInfo.freezeAuthority);\n    }\n    return mintInfo;\n  }\n  /**\n   * Retrieve account information\n   *\n   * @param account Public key of the account\n   */\n\n  async getAccountInfo(account, commitment) {\n    const info = await this.connection.getAccountInfo(account, commitment);\n    if (info === null) {\n      throw new Error(FAILED_TO_FIND_ACCOUNT);\n    }\n    if (!info.owner.equals(this.programId)) {\n      throw new Error(INVALID_ACCOUNT_OWNER);\n    }\n    if (info.data.length != AccountLayout.span) {\n      throw new Error(`Invalid account size`);\n    }\n    const data = buffer.Buffer.from(info.data);\n    const accountInfo = AccountLayout.decode(data);\n    accountInfo.address = account;\n    accountInfo.mint = new PublicKey(accountInfo.mint);\n    accountInfo.owner = new PublicKey(accountInfo.owner);\n    accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n    if (accountInfo.delegateOption === 0) {\n      accountInfo.delegate = null;\n      accountInfo.delegatedAmount = new u64();\n    } else {\n      accountInfo.delegate = new PublicKey(accountInfo.delegate);\n      accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n    }\n    accountInfo.isInitialized = accountInfo.state !== 0;\n    accountInfo.isFrozen = accountInfo.state === 2;\n    if (accountInfo.isNativeOption === 1) {\n      accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n      accountInfo.isNative = true;\n    } else {\n      accountInfo.rentExemptReserve = null;\n      accountInfo.isNative = false;\n    }\n    if (accountInfo.closeAuthorityOption === 0) {\n      accountInfo.closeAuthority = null;\n    } else {\n      accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\n    }\n    if (!accountInfo.mint.equals(this.publicKey)) {\n      throw new Error(`Invalid account mint: ${JSON.stringify(accountInfo.mint)} !== ${JSON.stringify(this.publicKey)}`);\n    }\n    return accountInfo;\n  }\n  /**\n   * Retrieve Multisig information\n   *\n   * @param multisig Public key of the account\n   */\n\n  async getMultisigInfo(multisig) {\n    const info = await this.connection.getAccountInfo(multisig);\n    if (info === null) {\n      throw new Error('Failed to find multisig');\n    }\n    if (!info.owner.equals(this.programId)) {\n      throw new Error(`Invalid multisig owner`);\n    }\n    if (info.data.length != MultisigLayout.span) {\n      throw new Error(`Invalid multisig size`);\n    }\n    const data = buffer.Buffer.from(info.data);\n    const multisigInfo = MultisigLayout.decode(data);\n    multisigInfo.signer1 = new PublicKey(multisigInfo.signer1);\n    multisigInfo.signer2 = new PublicKey(multisigInfo.signer2);\n    multisigInfo.signer3 = new PublicKey(multisigInfo.signer3);\n    multisigInfo.signer4 = new PublicKey(multisigInfo.signer4);\n    multisigInfo.signer5 = new PublicKey(multisigInfo.signer5);\n    multisigInfo.signer6 = new PublicKey(multisigInfo.signer6);\n    multisigInfo.signer7 = new PublicKey(multisigInfo.signer7);\n    multisigInfo.signer8 = new PublicKey(multisigInfo.signer8);\n    multisigInfo.signer9 = new PublicKey(multisigInfo.signer9);\n    multisigInfo.signer10 = new PublicKey(multisigInfo.signer10);\n    multisigInfo.signer11 = new PublicKey(multisigInfo.signer11);\n    return multisigInfo;\n  }\n  /**\n   * Transfer tokens to another account\n   *\n   * @param source Source account\n   * @param destination Destination account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Number of tokens to transfer\n   */\n\n  async transfer(source, destination, owner, multiSigners, amount) {\n    let ownerPublicKey;\n    let signers;\n    if (isAccount(owner)) {\n      ownerPublicKey = owner.publicKey;\n      signers = [owner];\n    } else {\n      ownerPublicKey = owner;\n      signers = multiSigners;\n    }\n    return await sendAndConfirmTransaction('Transfer', this.connection, new Transaction().add(Token.createTransferInstruction(this.programId, source, destination, ownerPublicKey, multiSigners, amount)), this.payer, ...signers);\n  }\n  /**\n   * Grant a third-party permission to transfer up the specified number of tokens from an account\n   *\n   * @param account Public key of the account\n   * @param delegate Account authorized to perform a transfer tokens from the source account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Maximum number of tokens the delegate may transfer\n   */\n\n  async approve(account, delegate, owner, multiSigners, amount) {\n    let ownerPublicKey;\n    let signers;\n    if (isAccount(owner)) {\n      ownerPublicKey = owner.publicKey;\n      signers = [owner];\n    } else {\n      ownerPublicKey = owner;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction('Approve', this.connection, new Transaction().add(Token.createApproveInstruction(this.programId, account, delegate, ownerPublicKey, multiSigners, amount)), this.payer, ...signers);\n  }\n  /**\n   * Remove approval for the transfer of any remaining tokens\n   *\n   * @param account Public key of the account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   */\n\n  async revoke(account, owner, multiSigners) {\n    let ownerPublicKey;\n    let signers;\n    if (isAccount(owner)) {\n      ownerPublicKey = owner.publicKey;\n      signers = [owner];\n    } else {\n      ownerPublicKey = owner;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction('Revoke', this.connection, new Transaction().add(Token.createRevokeInstruction(this.programId, account, ownerPublicKey, multiSigners)), this.payer, ...signers);\n  }\n  /**\n   * Assign a new authority to the account\n   *\n   * @param account Public key of the account\n   * @param newAuthority New authority of the account\n   * @param authorityType Type of authority to set\n   * @param currentAuthority Current authority of the account\n   * @param multiSigners Signing accounts if `currentAuthority` is a multiSig\n   */\n\n  async setAuthority(account, newAuthority, authorityType, currentAuthority, multiSigners) {\n    let currentAuthorityPublicKey;\n    let signers;\n    if (isAccount(currentAuthority)) {\n      currentAuthorityPublicKey = currentAuthority.publicKey;\n      signers = [currentAuthority];\n    } else {\n      currentAuthorityPublicKey = currentAuthority;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction('SetAuthority', this.connection, new Transaction().add(Token.createSetAuthorityInstruction(this.programId, account, newAuthority, authorityType, currentAuthorityPublicKey, multiSigners)), this.payer, ...signers);\n  }\n  /**\n   * Mint new tokens\n   *\n   * @param dest Public key of the account to mint to\n   * @param authority Minting authority\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount Amount to mint\n   */\n\n  async mintTo(dest, authority, multiSigners, amount) {\n    let ownerPublicKey;\n    let signers;\n    if (isAccount(authority)) {\n      ownerPublicKey = authority.publicKey;\n      signers = [authority];\n    } else {\n      ownerPublicKey = authority;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction('MintTo', this.connection, new Transaction().add(Token.createMintToInstruction(this.programId, this.publicKey, dest, ownerPublicKey, multiSigners, amount)), this.payer, ...signers);\n  }\n  /**\n   * Burn tokens\n   *\n   * @param account Account to burn tokens from\n   * @param owner Account owner\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Amount to burn\n   */\n\n  async burn(account, owner, multiSigners, amount) {\n    let ownerPublicKey;\n    let signers;\n    if (isAccount(owner)) {\n      ownerPublicKey = owner.publicKey;\n      signers = [owner];\n    } else {\n      ownerPublicKey = owner;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction('Burn', this.connection, new Transaction().add(Token.createBurnInstruction(this.programId, this.publicKey, account, ownerPublicKey, multiSigners, amount)), this.payer, ...signers);\n  }\n  /**\n   * Close account\n   *\n   * @param account Account to close\n   * @param dest Account to receive the remaining balance of the closed account\n   * @param authority Authority which is allowed to close the account\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   */\n\n  async closeAccount(account, dest, authority, multiSigners) {\n    let authorityPublicKey;\n    let signers;\n    if (isAccount(authority)) {\n      authorityPublicKey = authority.publicKey;\n      signers = [authority];\n    } else {\n      authorityPublicKey = authority;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction('CloseAccount', this.connection, new Transaction().add(Token.createCloseAccountInstruction(this.programId, account, dest, authorityPublicKey, multiSigners)), this.payer, ...signers);\n  }\n  /**\n   * Freeze account\n   *\n   * @param account Account to freeze\n   * @param authority The mint freeze authority\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   */\n\n  async freezeAccount(account, authority, multiSigners) {\n    let authorityPublicKey;\n    let signers;\n    if (isAccount(authority)) {\n      authorityPublicKey = authority.publicKey;\n      signers = [authority];\n    } else {\n      authorityPublicKey = authority;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction('FreezeAccount', this.connection, new Transaction().add(Token.createFreezeAccountInstruction(this.programId, account, this.publicKey, authorityPublicKey, multiSigners)), this.payer, ...signers);\n  }\n  /**\n   * Thaw account\n   *\n   * @param account Account to thaw\n   * @param authority The mint freeze authority\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   */\n\n  async thawAccount(account, authority, multiSigners) {\n    let authorityPublicKey;\n    let signers;\n    if (isAccount(authority)) {\n      authorityPublicKey = authority.publicKey;\n      signers = [authority];\n    } else {\n      authorityPublicKey = authority;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction('ThawAccount', this.connection, new Transaction().add(Token.createThawAccountInstruction(this.programId, account, this.publicKey, authorityPublicKey, multiSigners)), this.payer, ...signers);\n  }\n  /**\n   * Transfer tokens to another account, asserting the token mint and decimals\n   *\n   * @param source Source account\n   * @param destination Destination account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Number of tokens to transfer\n   * @param decimals Number of decimals in transfer amount\n   */\n\n  async transferChecked(source, destination, owner, multiSigners, amount, decimals) {\n    let ownerPublicKey;\n    let signers;\n    if (isAccount(owner)) {\n      ownerPublicKey = owner.publicKey;\n      signers = [owner];\n    } else {\n      ownerPublicKey = owner;\n      signers = multiSigners;\n    }\n    return await sendAndConfirmTransaction('TransferChecked', this.connection, new Transaction().add(Token.createTransferCheckedInstruction(this.programId, source, this.publicKey, destination, ownerPublicKey, multiSigners, amount, decimals)), this.payer, ...signers);\n  }\n  /**\n   * Grant a third-party permission to transfer up the specified number of tokens from an account,\n   * asserting the token mint and decimals\n   *\n   * @param account Public key of the account\n   * @param delegate Account authorized to perform a transfer tokens from the source account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Maximum number of tokens the delegate may transfer\n   * @param decimals Number of decimals in approve amount\n   */\n\n  async approveChecked(account, delegate, owner, multiSigners, amount, decimals) {\n    let ownerPublicKey;\n    let signers;\n    if (isAccount(owner)) {\n      ownerPublicKey = owner.publicKey;\n      signers = [owner];\n    } else {\n      ownerPublicKey = owner;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction('ApproveChecked', this.connection, new Transaction().add(Token.createApproveCheckedInstruction(this.programId, account, this.publicKey, delegate, ownerPublicKey, multiSigners, amount, decimals)), this.payer, ...signers);\n  }\n  /**\n   * Mint new tokens, asserting the token mint and decimals\n   *\n   * @param dest Public key of the account to mint to\n   * @param authority Minting authority\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount Amount to mint\n   * @param decimals Number of decimals in amount to mint\n   */\n\n  async mintToChecked(dest, authority, multiSigners, amount, decimals) {\n    let ownerPublicKey;\n    let signers;\n    if (isAccount(authority)) {\n      ownerPublicKey = authority.publicKey;\n      signers = [authority];\n    } else {\n      ownerPublicKey = authority;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction('MintToChecked', this.connection, new Transaction().add(Token.createMintToCheckedInstruction(this.programId, this.publicKey, dest, ownerPublicKey, multiSigners, amount, decimals)), this.payer, ...signers);\n  }\n  /**\n   * Burn tokens, asserting the token mint and decimals\n   *\n   * @param account Account to burn tokens from\n   * @param owner Account owner\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Amount to burn\n   * @param decimals Number of decimals in amount to burn\n   */\n\n  async burnChecked(account, owner, multiSigners, amount, decimals) {\n    let ownerPublicKey;\n    let signers;\n    if (isAccount(owner)) {\n      ownerPublicKey = owner.publicKey;\n      signers = [owner];\n    } else {\n      ownerPublicKey = owner;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction('BurnChecked', this.connection, new Transaction().add(Token.createBurnCheckedInstruction(this.programId, this.publicKey, account, ownerPublicKey, multiSigners, amount, decimals)), this.payer, ...signers);\n  }\n  /**\n   * Sync amount in native SPL token account to underlying lamports\n   *\n   * @param nativeAccount Account to sync\n   */\n\n  async syncNative(nativeAccount) {\n    await sendAndConfirmTransaction('SyncNative', this.connection, new Transaction().add(Token.createSyncNativeInstruction(this.programId, nativeAccount)), this.payer);\n  }\n  /**\n   * Construct an InitializeMint instruction\n   *\n   * @param programId SPL Token program account\n   * @param mint Token mint account\n   * @param decimals Number of decimals in token account amounts\n   * @param mintAuthority Minting authority\n   * @param freezeAuthority Optional authority that can freeze token accounts\n   */\n\n  static createInitMintInstruction(programId, mint, decimals, mintAuthority, freezeAuthority) {\n    let keys = [{\n      pubkey: mint,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    const commandDataLayout = struct([u8('instruction'), u8('decimals'), publicKey('mintAuthority'), u8('option'), publicKey('freezeAuthority')]);\n    let data = buffer.Buffer.alloc(1024);\n    {\n      const encodeLength = commandDataLayout.encode({\n        instruction: 0,\n        // InitializeMint instruction\n        decimals,\n        mintAuthority: pubkeyToBuffer(mintAuthority),\n        option: freezeAuthority === null ? 0 : 1,\n        freezeAuthority: pubkeyToBuffer(freezeAuthority || new PublicKey(0))\n      }, data);\n      data = data.slice(0, encodeLength);\n    }\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n  }\n  /**\n   * Construct an InitializeAccount instruction\n   *\n   * @param programId SPL Token program account\n   * @param mint Token mint account\n   * @param account New account\n   * @param owner Owner of the new account\n   */\n\n  static createInitAccountInstruction(programId, mint, account, owner) {\n    const keys = [{\n      pubkey: account,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: mint,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: owner,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    const dataLayout = struct([u8('instruction')]);\n    const data = buffer.Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 1 // InitializeAccount instruction\n    }, data);\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n  }\n  /**\n   * Construct a Transfer instruction\n   *\n   * @param programId SPL Token program account\n   * @param source Source account\n   * @param destination Destination account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount Number of tokens to transfer\n   */\n\n  static createTransferInstruction(programId, source, destination, owner, multiSigners, amount) {\n    const dataLayout = struct([u8('instruction'), uint64('amount')]);\n    const data = buffer.Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 3,\n      // Transfer instruction\n      amount: new u64(amount).toBuffer()\n    }, data);\n    let keys = [{\n      pubkey: source,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: destination,\n      isSigner: false,\n      isWritable: true\n    }];\n    if (multiSigners.length === 0) {\n      keys.push({\n        pubkey: owner,\n        isSigner: true,\n        isWritable: false\n      });\n    } else {\n      keys.push({\n        pubkey: owner,\n        isSigner: false,\n        isWritable: false\n      });\n      multiSigners.forEach(signer => keys.push({\n        pubkey: signer.publicKey,\n        isSigner: true,\n        isWritable: false\n      }));\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data\n    });\n  }\n  /**\n   * Construct an Approve instruction\n   *\n   * @param programId SPL Token program account\n   * @param account Public key of the account\n   * @param delegate Account authorized to perform a transfer of tokens from the source account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Maximum number of tokens the delegate may transfer\n   */\n\n  static createApproveInstruction(programId, account, delegate, owner, multiSigners, amount) {\n    const dataLayout = struct([u8('instruction'), uint64('amount')]);\n    const data = buffer.Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 4,\n      // Approve instruction\n      amount: new u64(amount).toBuffer()\n    }, data);\n    let keys = [{\n      pubkey: account,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: delegate,\n      isSigner: false,\n      isWritable: false\n    }];\n    if (multiSigners.length === 0) {\n      keys.push({\n        pubkey: owner,\n        isSigner: true,\n        isWritable: false\n      });\n    } else {\n      keys.push({\n        pubkey: owner,\n        isSigner: false,\n        isWritable: false\n      });\n      multiSigners.forEach(signer => keys.push({\n        pubkey: signer.publicKey,\n        isSigner: true,\n        isWritable: false\n      }));\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data\n    });\n  }\n  /**\n   * Construct a Revoke instruction\n   *\n   * @param programId SPL Token program account\n   * @param account Public key of the account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   */\n\n  static createRevokeInstruction(programId, account, owner, multiSigners) {\n    const dataLayout = struct([u8('instruction')]);\n    const data = buffer.Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 5 // Approve instruction\n    }, data);\n    let keys = [{\n      pubkey: account,\n      isSigner: false,\n      isWritable: true\n    }];\n    if (multiSigners.length === 0) {\n      keys.push({\n        pubkey: owner,\n        isSigner: true,\n        isWritable: false\n      });\n    } else {\n      keys.push({\n        pubkey: owner,\n        isSigner: false,\n        isWritable: false\n      });\n      multiSigners.forEach(signer => keys.push({\n        pubkey: signer.publicKey,\n        isSigner: true,\n        isWritable: false\n      }));\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data\n    });\n  }\n  /**\n   * Construct a SetAuthority instruction\n   *\n   * @param programId SPL Token program account\n   * @param account Public key of the account\n   * @param newAuthority New authority of the account\n   * @param authorityType Type of authority to set\n   * @param currentAuthority Current authority of the specified type\n   * @param multiSigners Signing accounts if `currentAuthority` is a multiSig\n   */\n\n  static createSetAuthorityInstruction(programId, account, newAuthority, authorityType, currentAuthority, multiSigners) {\n    const commandDataLayout = struct([u8('instruction'), u8('authorityType'), u8('option'), publicKey('newAuthority')]);\n    let data = buffer.Buffer.alloc(1024);\n    {\n      const encodeLength = commandDataLayout.encode({\n        instruction: 6,\n        // SetAuthority instruction\n        authorityType: AuthorityTypeCodes[authorityType],\n        option: newAuthority === null ? 0 : 1,\n        newAuthority: pubkeyToBuffer(newAuthority || new PublicKey(0))\n      }, data);\n      data = data.slice(0, encodeLength);\n    }\n    let keys = [{\n      pubkey: account,\n      isSigner: false,\n      isWritable: true\n    }];\n    if (multiSigners.length === 0) {\n      keys.push({\n        pubkey: currentAuthority,\n        isSigner: true,\n        isWritable: false\n      });\n    } else {\n      keys.push({\n        pubkey: currentAuthority,\n        isSigner: false,\n        isWritable: false\n      });\n      multiSigners.forEach(signer => keys.push({\n        pubkey: signer.publicKey,\n        isSigner: true,\n        isWritable: false\n      }));\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data\n    });\n  }\n  /**\n   * Construct a MintTo instruction\n   *\n   * @param programId SPL Token program account\n   * @param mint Public key of the mint\n   * @param dest Public key of the account to mint to\n   * @param authority The mint authority\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount Amount to mint\n   */\n\n  static createMintToInstruction(programId, mint, dest, authority, multiSigners, amount) {\n    const dataLayout = struct([u8('instruction'), uint64('amount')]);\n    const data = buffer.Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 7,\n      // MintTo instruction\n      amount: new u64(amount).toBuffer()\n    }, data);\n    let keys = [{\n      pubkey: mint,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: dest,\n      isSigner: false,\n      isWritable: true\n    }];\n    if (multiSigners.length === 0) {\n      keys.push({\n        pubkey: authority,\n        isSigner: true,\n        isWritable: false\n      });\n    } else {\n      keys.push({\n        pubkey: authority,\n        isSigner: false,\n        isWritable: false\n      });\n      multiSigners.forEach(signer => keys.push({\n        pubkey: signer.publicKey,\n        isSigner: true,\n        isWritable: false\n      }));\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data\n    });\n  }\n  /**\n   * Construct a Burn instruction\n   *\n   * @param programId SPL Token program account\n   * @param mint Mint for the account\n   * @param account Account to burn tokens from\n   * @param owner Owner of the account\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount amount to burn\n   */\n\n  static createBurnInstruction(programId, mint, account, owner, multiSigners, amount) {\n    const dataLayout = struct([u8('instruction'), uint64('amount')]);\n    const data = buffer.Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 8,\n      // Burn instruction\n      amount: new u64(amount).toBuffer()\n    }, data);\n    let keys = [{\n      pubkey: account,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: mint,\n      isSigner: false,\n      isWritable: true\n    }];\n    if (multiSigners.length === 0) {\n      keys.push({\n        pubkey: owner,\n        isSigner: true,\n        isWritable: false\n      });\n    } else {\n      keys.push({\n        pubkey: owner,\n        isSigner: false,\n        isWritable: false\n      });\n      multiSigners.forEach(signer => keys.push({\n        pubkey: signer.publicKey,\n        isSigner: true,\n        isWritable: false\n      }));\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data\n    });\n  }\n  /**\n   * Construct a Close instruction\n   *\n   * @param programId SPL Token program account\n   * @param account Account to close\n   * @param dest Account to receive the remaining balance of the closed account\n   * @param authority Account Close authority\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   */\n\n  static createCloseAccountInstruction(programId, account, dest, owner, multiSigners) {\n    const dataLayout = struct([u8('instruction')]);\n    const data = buffer.Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 9 // CloseAccount instruction\n    }, data);\n    let keys = [{\n      pubkey: account,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: dest,\n      isSigner: false,\n      isWritable: true\n    }];\n    if (multiSigners.length === 0) {\n      keys.push({\n        pubkey: owner,\n        isSigner: true,\n        isWritable: false\n      });\n    } else {\n      keys.push({\n        pubkey: owner,\n        isSigner: false,\n        isWritable: false\n      });\n      multiSigners.forEach(signer => keys.push({\n        pubkey: signer.publicKey,\n        isSigner: true,\n        isWritable: false\n      }));\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data\n    });\n  }\n  /**\n   * Construct a Freeze instruction\n   *\n   * @param programId SPL Token program account\n   * @param account Account to freeze\n   * @param mint Mint account\n   * @param authority Mint freeze authority\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   */\n\n  static createFreezeAccountInstruction(programId, account, mint, authority, multiSigners) {\n    const dataLayout = struct([u8('instruction')]);\n    const data = buffer.Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 10 // FreezeAccount instruction\n    }, data);\n    let keys = [{\n      pubkey: account,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: mint,\n      isSigner: false,\n      isWritable: false\n    }];\n    if (multiSigners.length === 0) {\n      keys.push({\n        pubkey: authority,\n        isSigner: true,\n        isWritable: false\n      });\n    } else {\n      keys.push({\n        pubkey: authority,\n        isSigner: false,\n        isWritable: false\n      });\n      multiSigners.forEach(signer => keys.push({\n        pubkey: signer.publicKey,\n        isSigner: true,\n        isWritable: false\n      }));\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data\n    });\n  }\n  /**\n   * Construct a Thaw instruction\n   *\n   * @param programId SPL Token program account\n   * @param account Account to thaw\n   * @param mint Mint account\n   * @param authority Mint freeze authority\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   */\n\n  static createThawAccountInstruction(programId, account, mint, authority, multiSigners) {\n    const dataLayout = struct([u8('instruction')]);\n    const data = buffer.Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 11 // ThawAccount instruction\n    }, data);\n    let keys = [{\n      pubkey: account,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: mint,\n      isSigner: false,\n      isWritable: false\n    }];\n    if (multiSigners.length === 0) {\n      keys.push({\n        pubkey: authority,\n        isSigner: true,\n        isWritable: false\n      });\n    } else {\n      keys.push({\n        pubkey: authority,\n        isSigner: false,\n        isWritable: false\n      });\n      multiSigners.forEach(signer => keys.push({\n        pubkey: signer.publicKey,\n        isSigner: true,\n        isWritable: false\n      }));\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data\n    });\n  }\n  /**\n   * Construct a TransferChecked instruction\n   *\n   * @param programId SPL Token program account\n   * @param source Source account\n   * @param mint Mint account\n   * @param destination Destination account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount Number of tokens to transfer\n   * @param decimals Number of decimals in transfer amount\n   */\n\n  static createTransferCheckedInstruction(programId, source, mint, destination, owner, multiSigners, amount, decimals) {\n    const dataLayout = struct([u8('instruction'), uint64('amount'), u8('decimals')]);\n    const data = buffer.Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 12,\n      // TransferChecked instruction\n      amount: new u64(amount).toBuffer(),\n      decimals\n    }, data);\n    let keys = [{\n      pubkey: source,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: mint,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: destination,\n      isSigner: false,\n      isWritable: true\n    }];\n    if (multiSigners.length === 0) {\n      keys.push({\n        pubkey: owner,\n        isSigner: true,\n        isWritable: false\n      });\n    } else {\n      keys.push({\n        pubkey: owner,\n        isSigner: false,\n        isWritable: false\n      });\n      multiSigners.forEach(signer => keys.push({\n        pubkey: signer.publicKey,\n        isSigner: true,\n        isWritable: false\n      }));\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data\n    });\n  }\n  /**\n   * Construct an ApproveChecked instruction\n   *\n   * @param programId SPL Token program account\n   * @param account Public key of the account\n   * @param mint Mint account\n   * @param delegate Account authorized to perform a transfer of tokens from the source account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Maximum number of tokens the delegate may transfer\n   * @param decimals Number of decimals in approve amount\n   */\n\n  static createApproveCheckedInstruction(programId, account, mint, delegate, owner, multiSigners, amount, decimals) {\n    const dataLayout = struct([u8('instruction'), uint64('amount'), u8('decimals')]);\n    const data = buffer.Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 13,\n      // ApproveChecked instruction\n      amount: new u64(amount).toBuffer(),\n      decimals\n    }, data);\n    let keys = [{\n      pubkey: account,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: mint,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: delegate,\n      isSigner: false,\n      isWritable: false\n    }];\n    if (multiSigners.length === 0) {\n      keys.push({\n        pubkey: owner,\n        isSigner: true,\n        isWritable: false\n      });\n    } else {\n      keys.push({\n        pubkey: owner,\n        isSigner: false,\n        isWritable: false\n      });\n      multiSigners.forEach(signer => keys.push({\n        pubkey: signer.publicKey,\n        isSigner: true,\n        isWritable: false\n      }));\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data\n    });\n  }\n  /**\n   * Construct a MintToChecked instruction\n   *\n   * @param programId SPL Token program account\n   * @param mint Public key of the mint\n   * @param dest Public key of the account to mint to\n   * @param authority The mint authority\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount Amount to mint\n   * @param decimals Number of decimals in amount to mint\n   */\n\n  static createMintToCheckedInstruction(programId, mint, dest, authority, multiSigners, amount, decimals) {\n    const dataLayout = struct([u8('instruction'), uint64('amount'), u8('decimals')]);\n    const data = buffer.Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 14,\n      // MintToChecked instruction\n      amount: new u64(amount).toBuffer(),\n      decimals\n    }, data);\n    let keys = [{\n      pubkey: mint,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: dest,\n      isSigner: false,\n      isWritable: true\n    }];\n    if (multiSigners.length === 0) {\n      keys.push({\n        pubkey: authority,\n        isSigner: true,\n        isWritable: false\n      });\n    } else {\n      keys.push({\n        pubkey: authority,\n        isSigner: false,\n        isWritable: false\n      });\n      multiSigners.forEach(signer => keys.push({\n        pubkey: signer.publicKey,\n        isSigner: true,\n        isWritable: false\n      }));\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data\n    });\n  }\n  /**\n   * Construct a BurnChecked instruction\n   *\n   * @param programId SPL Token program account\n   * @param mint Mint for the account\n   * @param account Account to burn tokens from\n   * @param owner Owner of the account\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount amount to burn\n   */\n\n  static createBurnCheckedInstruction(programId, mint, account, owner, multiSigners, amount, decimals) {\n    const dataLayout = struct([u8('instruction'), uint64('amount'), u8('decimals')]);\n    const data = buffer.Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 15,\n      // BurnChecked instruction\n      amount: new u64(amount).toBuffer(),\n      decimals\n    }, data);\n    let keys = [{\n      pubkey: account,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: mint,\n      isSigner: false,\n      isWritable: true\n    }];\n    if (multiSigners.length === 0) {\n      keys.push({\n        pubkey: owner,\n        isSigner: true,\n        isWritable: false\n      });\n    } else {\n      keys.push({\n        pubkey: owner,\n        isSigner: false,\n        isWritable: false\n      });\n      multiSigners.forEach(signer => keys.push({\n        pubkey: signer.publicKey,\n        isSigner: true,\n        isWritable: false\n      }));\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data\n    });\n  }\n  /**\n   * Construct a SyncNative instruction\n   *\n   * @param programId SPL Token program account\n   * @param nativeAccount Account to sync lamports from\n   */\n\n  static createSyncNativeInstruction(programId, nativeAccount) {\n    const dataLayout = struct([u8('instruction')]);\n    const data = buffer.Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 17 // SyncNative instruction\n    }, data);\n    let keys = [{\n      pubkey: nativeAccount,\n      isSigner: false,\n      isWritable: true\n    }];\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data\n    });\n  }\n  /**\n   * Get the address for the associated token account\n   *\n   * @param associatedProgramId SPL Associated Token program account\n   * @param programId SPL Token program account\n   * @param mint Token mint account\n   * @param owner Owner of the new account\n   * @return Public key of the associated token account\n   */\n\n  static async getAssociatedTokenAddress(associatedProgramId, programId, mint, owner) {\n    let allowOwnerOffCurve = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer())) {\n      throw new Error(`Owner cannot sign: ${owner.toString()}`);\n    }\n    return (await PublicKey.findProgramAddress([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedProgramId))[0];\n  }\n  /**\n   * Construct the AssociatedTokenProgram instruction to create the associated\n   * token account\n   *\n   * @param associatedProgramId SPL Associated Token program account\n   * @param programId SPL Token program account\n   * @param mint Token mint account\n   * @param associatedAccount New associated account\n   * @param owner Owner of the new account\n   * @param payer Payer of fees\n   */\n\n  static createAssociatedTokenAccountInstruction(associatedProgramId, programId, mint, associatedAccount, owner, payer) {\n    const data = buffer.Buffer.alloc(0);\n    let keys = [{\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: associatedAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: owner,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: mint,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: programId,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      keys,\n      programId: associatedProgramId,\n      data\n    });\n  }\n}\nexport { ASSOCIATED_TOKEN_PROGRAM_ID, AccountLayout, MintLayout, NATIVE_MINT, TOKEN_PROGRAM_ID, Token, u64 };","map":{"version":3,"sources":["../node_modules/base64-js/index.js","../node_modules/ieee754/index.js","../node_modules/buffer/index.js","../node_modules/rollup-plugin-node-polyfills/polyfills/global.js","../node_modules/rollup-plugin-node-polyfills/polyfills/inherits.js","../node_modules/rollup-plugin-node-polyfills/polyfills/util.js","../node_modules/rollup-plugin-node-polyfills/polyfills/assert.js","../node_modules/buffer-layout/lib/Layout.js","../client/layout.js","../client/util/send-and-confirm-transaction.js","../client/token.js"],"names":["require$$0","ieee754","require$$1","inspect","isBuffer","global","inherits","utilInspect","Buffer","publicKey","property","BufferLayout","uint64","sendAndConfirmTransaction","title","connection","transaction","signers","realSendAndConfirmTransaction","skipPreflight","TOKEN_PROGRAM_ID","PublicKey","ASSOCIATED_TOKEN_PROGRAM_ID","FAILED_TO_FIND_ACCOUNT","INVALID_ACCOUNT_OWNER","pubkeyToBuffer","from","toBuffer","u64","BN","a","toArray","reverse","b","length","assert","zeroPad","alloc","copy","fromBuffer","buffer","map","i","toString","slice","join","isAccount","accountOrPublicKey","AuthorityTypeCodes","MintTokens","FreezeAccount","AccountOwner","CloseAccount","NATIVE_MINT","MintLayout","Layout","AccountLayout","MultisigLayout","Token","constructor","programId","payer","Object","assign","associatedProgramId","getMinBalanceRentForExemptMint","getMinimumBalanceForRentExemption","span","getMinBalanceRentForExemptAccount","getMinBalanceRentForExemptMultisig","createMint","mintAuthority","freezeAuthority","decimals","mintAccount","Keypair","generate","token","balanceNeeded","Transaction","add","createAccount","fromPubkey","newAccountPubkey","lamports","space","createInitMintInstruction","owner","newAccount","mintPublicKey","createInitAccountInstruction","createAssociatedTokenAccount","associatedAddress","getAssociatedTokenAddress","createAssociatedTokenAccountInternal","createAssociatedTokenAccountInstruction","getOrCreateAssociatedAccountInfo","getAccountInfo","err","message","createWrappedNativeAccount","amount","transfer","toPubkey","createMultisig","m","multisigAccount","keys","pubkey","isSigner","isWritable","SYSVAR_RENT_PUBKEY","forEach","signer","push","dataLayout","data","encode","instruction","getMintInfo","info","Error","equals","JSON","stringify","mintInfo","decode","mintAuthorityOption","supply","isInitialized","freezeAuthorityOption","account","commitment","accountInfo","address","mint","delegateOption","delegate","delegatedAmount","state","isFrozen","isNativeOption","rentExemptReserve","isNative","closeAuthorityOption","closeAuthority","getMultisigInfo","multisig","multisigInfo","signer1","signer2","signer3","signer4","signer5","signer6","signer7","signer8","signer9","signer10","signer11","source","destination","multiSigners","ownerPublicKey","createTransferInstruction","approve","createApproveInstruction","revoke","createRevokeInstruction","setAuthority","newAuthority","authorityType","currentAuthority","currentAuthorityPublicKey","createSetAuthorityInstruction","mintTo","dest","authority","createMintToInstruction","burn","createBurnInstruction","closeAccount","authorityPublicKey","createCloseAccountInstruction","freezeAccount","createFreezeAccountInstruction","thawAccount","createThawAccountInstruction","transferChecked","createTransferCheckedInstruction","approveChecked","createApproveCheckedInstruction","mintToChecked","createMintToCheckedInstruction","burnChecked","createBurnCheckedInstruction","syncNative","nativeAccount","createSyncNativeInstruction","commandDataLayout","encodeLength","option","TransactionInstruction","allowOwnerOffCurve","isOnCurve","findProgramAddress","associatedAccount","SystemProgram"],"mappings":"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AAE,KAAK,EAAE,KAAK,EAAE,OAAO,CAAC;AACvC;AAEA,MAAM,CAAC,OAAO,GAAG,OAAO;AACjB,SAAS,OAAO,CAAC,GAAG,EAAE;EAC3B,IAAI,GAAG,EAAE,MAAM,GAAG;AACpB;;;ACjWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,MAAM,CAAC;EACX,WAAW,CAAC,IAAI,EAAE,QAAQ,EAAE;IAC1B,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;MAC3B,MAAM,IAAI,SAAS,CAAC,yBAAyB,CAAC;IACpD;;IAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAAC,IAAI,GAAG,IAAI;;IAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAAC,QAAQ,GAAG,QAAQ;EAC5B;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,qBAAqB,CAAA,EAAG;IACtB,OAAO,CAAA,CAAE;EACb;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE;IAChB,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC;EACzC;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE;IACrB,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC;EACzC;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAO,CAAC,CAAC,EAAE,MAAM,EAAE;IACjB,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE;MACjB,MAAM,IAAI,UAAU,CAAC,oBAAoB,CAAC;IAChD;IACI,OAAO,IAAI,CAAC,IAAI;EACpB;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAAS,CAAC,QAAQ,EAAE;IAClB,MAAM,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;IACpD,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC;IACvB,EAAE,CAAC,QAAQ,GAAG,QAAQ;IACtB,OAAO,EAAE;EACb;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAAS,CAAC,MAAM,EAAE;IAChB,OAAO,SAAS;EACpB;AACA;eACc,GAAG,MAAA;;AAEjB;AACA;AACA;AACA;AACA;AACA,SAAS,gBAAgB,CAAC,IAAI,EAAE,EAAE,EAAE;EAClC,IAAI,EAAE,CAAC,QAAQ,EAAE;IACf,OAAO,IAAI,GAAG,GAAG,GAAG,EAAE,CAAC,QAAQ,GAAG,GAAG;EACzC;EACE,OAAO,IAAI;AACb;yBACwB,GAAG,gBAAA;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,qBAAqB,CAAC,KAAK,EAAE,MAAM,EAAE;EAC5C,IAAI,UAAU,KAAK,OAAO,KAAK,EAAE;IAC/B,MAAM,IAAI,SAAS,CAAC,2BAA2B,CAAC;EACpD;EACE,IAAI,KAAK,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;IACnC,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC;EACzD;EACE,IAAI,EAAE,MAAM,IAAK,MAAM,YAAY,MAAO,CAAC,EAAE;IAC3C,MAAM,IAAI,SAAS,CAAC,yBAAyB,CAAC;EAClD;EACE,IAAI,MAAM,CAAC,cAAc,CAAC,mBAAmB,CAAC,EAAE;IAC9C,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC;EAC/D;EACE,KAAK,CAAC,OAAO,GAAG,MAAM;EACtB,MAAM,CAAC,iBAAiB,GAAG,KAAK;EAChC,MAAM,CAAC,qBAAqB,GAAI,MAAM,IAAI,KAAK,EAAG;EAClD,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,SAAS,EAAE,QAAQ,EAAE;IAC/C,KAAK,EAAE,SAAA,CAAS,CAAC,EAAE,MAAM,EAAE;MACzB,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,EAAE,MAAM,CAAC;IAC3C,CAAK;IACD,QAAQ,EAAE;EACd,CAAG,CAAC;EACF,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,QAAQ,EAAE;IACrC,KAAK,EAAE,SAAA,CAAS,CAAC,EAAE,MAAM,EAAE;MACzB,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC;IACrC,CAAK;IACD,QAAQ,EAAE;EACd,CAAG,CAAC;AACJ;8BAC6B,GAAG,qBAAA;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,cAAc,SAAS,MAAM,CAAC;EACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAO,CAAA,EAAG;IACR,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC;EACjD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,WAAW,SAAS,cAAc,CAAC;EACvC,WAAW,CAAC,WAAW,EAAE,QAAQ,EAAE;IACjC,IAAI,SAAS,KAAK,WAAW,EAAE;MAC7B,WAAW,GAAG,CAAC;IACrB;IACI,IAAK,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,IAAM,CAAC,IAAI,WAAY,EAAE;MAC1D,MAAM,IAAI,SAAS,CAAC,0CAA0C,CAAC;IACrE;IACI,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC;;IAEvB;AACA;AACA;IACI,IAAI,CAAC,WAAW,GAAG,WAAW;EAClC;;EAEA;EACE,OAAO,CAAA,EAAG;IACR,OAAO,IAAI;EACf;;EAEA;EACE,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE;IAChB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,MAAM,GAAG,GAAG,CAAC,CAAC,MAAM,GAAG,MAAM;IAC7B,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC;EAC7C;;EAEA;EACE,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE;IACrB,OAAO,CAAC;EACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,YAAY,SAAS,cAAc,CAAC;EACxC,WAAW,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE;IACpC,IAAI,EAAE,MAAM,YAAY,MAAM,CAAC,EAAE;MAC/B,MAAM,IAAI,SAAS,CAAC,yBAAyB,CAAC;IACpD;IAEI,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB,CAAK,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;MACpC,MAAM,IAAI,SAAS,CAAC,qCAAqC,CAAC;IAChE;IAEI,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC;;IAEnD;IACI,IAAI,CAAC,MAAM,GAAG,MAAM;;IAExB;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAAC,MAAM,GAAG,MAAM;EACxB;;EAEA;EACE,OAAO,CAAA,EAAG;IACR,OAAS,IAAI,CAAC,MAAM,YAAY,IAAI,IACxB,IAAI,CAAC,MAAM,YAAY,MAAO;EAC9C;;EAEA;EACE,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE;IAChB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;EACtD;;EAEA;EACE,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE;IACrB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;EAC3D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,IAAI,SAAS,MAAM,CAAC;EACxB,WAAW,CAAC,IAAI,EAAE,QAAQ,EAAE;IAC1B,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC;IACrB,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE;MACjB,MAAM,IAAI,UAAU,CAAC,8BAA8B,CAAC;IAC1D;EACA;;EAEA;EACE,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE;IAChB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,OAAO,CAAC,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC;EAC1C;;EAEA;EACE,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE;IACrB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,CAAC,CAAC,WAAW,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC;IACrC,OAAO,IAAI,CAAC,IAAI;EACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,MAAM,SAAS,MAAM,CAAC;EAC1B,WAAW,CAAC,IAAI,EAAE,QAAQ,EAAE;IAC1B,KAAK,CAAE,IAAI,EAAE,QAAQ,CAAC;IACtB,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE;MACjB,MAAM,IAAI,UAAU,CAAC,8BAA8B,CAAC;IAC1D;EACA;;EAEA;EACE,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE;IAChB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,OAAO,CAAC,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC;EAC1C;;EAEA;EACE,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE;IACrB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,CAAC,CAAC,WAAW,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC;IACrC,OAAO,IAAI,CAAC,IAAI;EACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,GAAG,SAAS,MAAM,CAAC;EACvB,WAAW,CAAC,IAAI,EAAE,QAAQ,EAAE;IAC1B,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC;IACrB,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE;MACjB,MAAM,IAAI,UAAU,CAAC,8BAA8B,CAAC;IAC1D;EACA;;EAEA;EACE,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE;IAChB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,OAAO,CAAC,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC;EACzC;;EAEA;EACE,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE;IACrB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,CAAC,CAAC,UAAU,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC;IACpC,OAAO,IAAI,CAAC,IAAI;EACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,KAAK,SAAS,MAAM,CAAC;EACzB,WAAW,CAAC,IAAI,EAAE,QAAQ,EAAE;IAC1B,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC;IACrB,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE;MACjB,MAAM,IAAI,UAAU,CAAC,8BAA8B,CAAC;IAC1D;EACA;;EAEA;EACE,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE;IAChB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,OAAO,CAAC,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC;EACzC;;EAEA;EACE,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE;IACrB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,CAAC,CAAC,UAAU,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC;IACpC,OAAO,IAAI,CAAC,IAAI;EACpB;AACA;AAEA,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC;;AAE7B;AACA;AACA,SAAS,WAAW,CAAC,GAAG,EAAE;EACxB,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC;EACpC,MAAM,IAAI,GAAG,GAAG,GAAI,IAAI,GAAG,KAAM;EACjC,OAAO;IAAC,IAAI;IAAE;EAAI,CAAC;AACrB;AACA;AACA,SAAS,YAAY,CAAC,IAAI,EAAE,IAAI,EAAE;EAChC,OAAO,IAAI,GAAG,KAAK,GAAG,IAAI;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,UAAU,SAAS,MAAM,CAAC;EAC9B,WAAW,CAAC,QAAQ,EAAE;IACpB,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC;EACtB;;EAEA;EACE,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE;IAChB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,MAAM,IAAI,GAAG,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC;IACnC,MAAM,IAAI,GAAG,CAAC,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;IACvC,OAAO,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC;EACnC;;EAEA;EACE,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE;IACrB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC;IAC9B,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC;IACnC,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,GAAG,CAAC,CAAC;IACvC,OAAO,CAAC;EACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,YAAY,SAAS,MAAM,CAAC;EAChC,WAAW,CAAC,QAAQ,EAAE;IACpB,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC;EACtB;;EAEA;EACE,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE;IAChB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,MAAM,IAAI,GAAG,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC;IACnC,MAAM,IAAI,GAAG,CAAC,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;IACvC,OAAO,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC;EACnC;;EAEA;EACE,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE;IACrB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC;IAC9B,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC;IACnC,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,GAAG,CAAC,CAAC;IACvC,OAAO,CAAC;EACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,SAAS,SAAS,MAAM,CAAC;EAC7B,WAAW,CAAC,QAAQ,EAAE;IACpB,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC;EACtB;;EAEA;EACE,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE;IAChB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,MAAM,IAAI,GAAG,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC;IACnC,MAAM,IAAI,GAAG,CAAC,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;IACtC,OAAO,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC;EACnC;;EAEA;EACE,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE;IACrB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC;IAC9B,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC;IACnC,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,GAAG,CAAC,CAAC;IACtC,OAAO,CAAC;EACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,WAAW,SAAS,MAAM,CAAC;EAC/B,WAAW,CAAC,QAAQ,EAAE;IACpB,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC;EACtB;;EAEA;EACE,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE;IAChB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,MAAM,IAAI,GAAG,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC;IAClC,MAAM,IAAI,GAAG,CAAC,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;IACvC,OAAO,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC;EACnC;;EAEA;EACE,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE;IACrB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC;IAC9B,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC;IAClC,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,GAAG,CAAC,CAAC;IACvC,OAAO,CAAC;EACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,KAAK,SAAS,MAAM,CAAC;EACzB,WAAW,CAAC,QAAQ,EAAE;IACpB,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC;EACtB;;EAEA;EACE,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE;IAChB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,OAAO,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC;EAChC;;EAEA;EACE,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE;IACrB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,CAAC,CAAC,YAAY,CAAC,GAAG,EAAE,MAAM,CAAC;IAC3B,OAAO,CAAC;EACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,OAAO,SAAS,MAAM,CAAC;EAC3B,WAAW,CAAC,QAAQ,EAAE;IACpB,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC;EACtB;;EAEA;EACE,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE;IAChB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,OAAO,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC;EAChC;;EAEA;EACE,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE;IACrB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,CAAC,CAAC,YAAY,CAAC,GAAG,EAAE,MAAM,CAAC;IAC3B,OAAO,CAAC;EACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,MAAM,SAAS,MAAM,CAAC;EAC1B,WAAW,CAAC,QAAQ,EAAE;IACpB,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC;EACtB;;EAEA;EACE,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE;IAChB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,OAAO,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC;EACjC;;EAEA;EACE,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE;IACrB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,CAAC,CAAC,aAAa,CAAC,GAAG,EAAE,MAAM,CAAC;IAC5B,OAAO,CAAC;EACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,QAAQ,SAAS,MAAM,CAAC;EAC5B,WAAW,CAAC,QAAQ,EAAE;IACpB,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC;EACtB;;EAEA;EACE,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE;IAChB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,OAAO,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC;EACjC;;EAEA;EACE,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE;IACrB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,CAAC,CAAC,aAAa,CAAC,GAAG,EAAE,MAAM,CAAC;IAC5B,OAAO,CAAC;EACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,QAAQ,SAAS,MAAM,CAAC;EAC5B,WAAW,CAAC,aAAa,EAAE,KAAK,EAAE,QAAQ,EAAE;IAC1C,IAAI,EAAE,aAAa,YAAY,MAAM,CAAC,EAAE;MACtC,MAAM,IAAI,SAAS,CAAC,gCAAgC,CAAC;IAC3D;IACI,IAAI,EAAI,KAAK,YAAY,cAAc,IAAK,KAAK,CAAC,OAAO,EAAE,IACjD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,IAAK,CAAC,IAAI,KAAO,CAAC,EAAE;MACnD,MAAM,IAAI,SAAS,CAAC,qCAAqC,GACnC,uCAAuC,CAAC;IACpE;IACI,IAAI,IAAI,GAAG,CAAC,CAAC;IACb,IAAK,EAAE,KAAK,YAAY,cAAc,CAAC,IAC/B,CAAC,GAAG,aAAa,CAAC,IAAK,EAAE;MAC/B,IAAI,GAAG,KAAK,GAAG,aAAa,CAAC,IAAI;IACvC;IAEI,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC;;IAEzB;IACI,IAAI,CAAC,aAAa,GAAG,aAAa;;IAEtC;AACA;AACA;AACA;AACA;IACI,IAAI,CAAC,KAAK,GAAG,KAAK;EACtB;;EAEA;EACE,OAAO,CAAC,CAAC,EAAE,MAAM,EAAE;IACjB,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE;MAClB,OAAO,IAAI,CAAC,IAAI;IACtB;IACI,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,IAAI,IAAI,GAAG,CAAC;IACZ,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK;IACtB,IAAI,KAAK,YAAY,cAAc,EAAE;MACnC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC;IACrC;IACI,IAAI,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE;MAC/B,IAAI,GAAG,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI;IAC5C,CAAK,MAAM;MACL,IAAI,GAAG,GAAG,CAAC;MACX,OAAO,GAAG,GAAG,KAAK,EAAE;QAClB,IAAI,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC;QACpD,EAAE,GAAG;MACb;IACA;IACI,OAAO,IAAI;EACf;;EAEA;EACE,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE;IAChB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,MAAM,EAAE,GAAG,EAAE;IACb,IAAI,CAAC,GAAG,CAAC;IACT,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK;IACtB,IAAI,KAAK,YAAY,cAAc,EAAE;MACnC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC;IACrC;IACI,OAAO,CAAC,GAAG,KAAK,EAAE;MAChB,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;MAC7C,MAAM,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,EAAE,MAAM,CAAC;MAC/C,CAAC,IAAI,CAAC;IACZ;IACI,OAAO,EAAE;EACb;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE;IACrB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,MAAM,GAAG,GAAG,IAAI,CAAC,aAAa;IAC9B,MAAM,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC,KAAK;MACnC,OAAO,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC;IACnD,CAAK,EAAE,CAAC,CAAC;IACL,IAAI,IAAI,CAAC,KAAK,YAAY,cAAc,EAAE;MACxC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,MAAM,CAAC;IAC9C;IACI,OAAO,IAAI;EACf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,SAAS,SAAS,MAAM,CAAC;EAC7B,WAAW,CAAC,MAAM,EAAE,QAAQ,EAAE,cAAc,EAAE;IAC5C,IAAI,EAAE,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAClB,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,KAAK,GAAG,IAAK,CAAC,YAAY,MAAO,EAAE,IAAI,CAAC,CAAC,EAAE;MACvE,MAAM,IAAI,SAAS,CAAC,0CAA0C,CAAC;IACrE;IACI,IAAK,SAAS,KAAK,OAAO,QAAQ,IAC1B,SAAS,KAAK,cAAe,EAAE;MACrC,cAAc,GAAG,QAAQ;MACzB,QAAQ,GAAG,SAAS;IAC1B;;IAEA;IACI,KAAK,MAAM,EAAE,IAAI,MAAM,EAAE;MACvB,IAAK,CAAC,GAAG,EAAE,CAAC,IAAI,IACR,SAAS,KAAK,EAAE,CAAC,QAAS,EAAE;QAClC,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC;MAC/E;IACA;IAEI,IAAI,IAAI,GAAG,CAAC,CAAC;IACb,IAAI;MACF,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,KAAK,IAAI,GAAG,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;IAChE,CAAK,CAAC,OAAO,CAAC,EAAE,CAChB;IACI,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC;;IAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAAC,MAAM,GAAG,MAAM;;IAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC,cAAc;EAC1C;;EAEA;EACE,OAAO,CAAC,CAAC,EAAE,MAAM,EAAE;IACjB,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE;MAClB,OAAO,IAAI,CAAC,IAAI;IACtB;IACI,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,IAAI,IAAI,GAAG,CAAC;IACZ,IAAI;MACF,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,KAAK;QACtC,MAAM,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC,EAAE,MAAM,CAAC;QACjC,MAAM,IAAI,GAAG;QACb,OAAO,IAAI,GAAG,GAAG;MACzB,CAAO,EAAE,CAAC,CAAC;IACX,CAAK,CAAC,OAAO,CAAC,EAAE;MACV,MAAM,IAAI,UAAU,CAAC,oBAAoB,CAAC;IAChD;IACI,OAAO,IAAI;EACf;;EAEA;EACE,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE;IAChB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,MAAM,IAAI,GAAG,IAAI,CAAC,qBAAqB,EAAE;IACzC,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE;MAC5B,IAAI,SAAS,KAAK,EAAE,CAAC,QAAQ,EAAE;QAC7B,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC;MAChD;MACM,MAAM,IAAI,EAAE,CAAC,OAAO,CAAC,CAAC,EAAE,MAAM,CAAC;MAC/B,IAAI,IAAI,CAAC,cAAc,IACf,CAAC,CAAC,MAAM,KAAK,MAAO,EAAE;QAC5B;MACR;IACA;IACI,OAAO,IAAI;EACf;;EAEA;AACA;AACA;AACA;AACA;EACE,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE;IACrB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,MAAM,WAAW,GAAG,MAAM;IAC1B,IAAI,UAAU,GAAG,CAAC;IAClB,IAAI,SAAS,GAAG,CAAC;IACjB,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE;MAC5B,IAAI,IAAI,GAAG,EAAE,CAAC,IAAI;MAClB,SAAS,GAAI,CAAC,GAAG,IAAI,GAAI,IAAI,GAAG,CAAC;MACjC,IAAI,SAAS,KAAK,EAAE,CAAC,QAAQ,EAAE;QAC7B,MAAM,EAAE,GAAG,GAAG,CAAC,EAAE,CAAC,QAAQ,CAAC;QAC3B,IAAI,SAAS,KAAK,EAAE,EAAE;UACpB,SAAS,GAAG,EAAE,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,EAAE,MAAM,CAAC;UACpC,IAAI,CAAC,GAAG,IAAI,EAAE;YACxB;AACA;YACY,IAAI,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC,EAAE,MAAM,CAAC;UACxC;QACA;MACA;MACM,UAAU,GAAG,MAAM;MACnB,MAAM,IAAI,IAAI;IACpB;IACA;AACA;AACA;AACA;IACI,OAAQ,UAAU,GAAG,SAAS,GAAI,WAAW;EACjD;;EAEA;EACE,SAAS,CAAC,MAAM,EAAE;IAChB,MAAM,IAAI,GAAG,IAAI,CAAC,qBAAqB,EAAE;IACzC,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE;MAC5B,IAAK,SAAS,KAAK,EAAE,CAAC,QAAQ,IACtB,CAAC,GAAG,MAAM,CAAC,MAAO,EAAE;QAC1B,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,KAAK,EAAE;MAC1C;IACA;IACI,OAAO,IAAI;EACf;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAAS,CAAC,QAAQ,EAAE;IAClB,IAAI,QAAQ,KAAK,OAAO,QAAQ,EAAE;MAChC,MAAM,IAAI,SAAS,CAAC,yBAAyB,CAAC;IACpD;IACI,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE;MAC5B,IAAI,EAAE,CAAC,QAAQ,KAAK,QAAQ,EAAE;QAC5B,OAAO,EAAE;MACjB;IACA;EACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,QAAQ,CAAC,QAAQ,EAAE;IACjB,IAAI,QAAQ,KAAK,OAAO,QAAQ,EAAE;MAChC,MAAM,IAAI,SAAS,CAAC,yBAAyB,CAAC;IACpD;IACI,IAAI,MAAM,GAAG,CAAC;IACd,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE;MAC5B,IAAI,EAAE,CAAC,QAAQ,KAAK,QAAQ,EAAE;QAC5B,OAAO,MAAM;MACrB;MACM,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE;QACf,MAAM,GAAG,CAAC,CAAC;MACnB,CAAO,MAAM,IAAI,CAAC,IAAI,MAAM,EAAE;QACtB,MAAM,IAAI,EAAE,CAAC,IAAI;MACzB;IACA;EACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,kBAAkB,CAAC;EACvB,WAAW,CAAC,QAAQ,EAAE;IACxB;AACA;AACA;AACA;IACI,IAAI,CAAC,QAAQ,GAAG,QAAQ;EAC5B;;EAEA;AACA;AACA;AACA;EACE,MAAM,CAAA,EAAG;IACP,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC;EACrD;;EAEA;AACA;AACA;AACA;EACE,MAAM,CAAA,EAAG;IACP,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC;EACrD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,wBAAwB,SAAS,kBAAkB,CAAC;EACxD,WAAW,CAAC,MAAM,EAAE,QAAQ,EAAE;IAC5B,IAAI,EAAG,MAAM,YAAY,cAAc,IAC9B,MAAM,CAAC,OAAO,EAAE,CAAC,EAAE;MAC1B,MAAM,IAAI,SAAS,CAAC,mDAAmD,CAAC;IAC9E;IAEI,KAAK,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,IAAI,SAAS,CAAC;;IAEnD;AACA;IACI,IAAI,CAAC,MAAM,GAAG,MAAM;EACxB;;EAEA;EACE,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE;IAChB,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC;EACxC;;EAEA;EACE,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE;IACrB,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,CAAC;EAC7C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,KAAK,SAAS,MAAM,CAAC;EACzB,WAAW,CAAC,KAAK,EAAE,aAAa,EAAE,QAAQ,EAAE;IAC1C,MAAM,GAAG,GAAK,KAAK,YAAY,IAAI,IACpB,KAAK,YAAY,MAAQ;IACxC,IAAI,GAAG,EAAE;MACP,KAAK,GAAG,IAAI,wBAAwB,CAAC,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC;IACnE,CAAK,MAAM,IAAK,KAAK,YAAY,cAAc,IAC7B,KAAK,CAAC,OAAO,EAAE,EAAE;MAC7B,KAAK,GAAG,IAAI,wBAAwB,CAAC,KAAK,CAAC;IACjD,CAAK,MAAM,IAAI,EAAE,KAAK,YAAY,kBAAkB,CAAC,EAAE;MACjD,MAAM,IAAI,SAAS,CAAC,qCAAqC,GACnC,+BAA+B,CAAC;IAC5D;IACI,IAAI,SAAS,KAAK,aAAa,EAAE;MAC/B,aAAa,GAAG,IAAI;IAC1B;IACI,IAAI,EAAG,IAAI,KAAK,aAAa,IACnB,aAAa,YAAY,MAAO,CAAC,EAAE;MAC3C,MAAM,IAAI,SAAS,CAAC,wCAAwC,CAAC;IACnE;IACI,IAAI,IAAI,KAAK,aAAa,EAAE;MAC1B,IAAI,CAAC,GAAG,aAAa,CAAC,IAAI,EAAE;QAC1B,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC;MAChE;MACM,IAAI,SAAS,KAAK,aAAa,CAAC,QAAQ,EAAE;QACxC,aAAa,GAAG,aAAa,CAAC,SAAS,CAAC,SAAS,CAAC;MAC1D;IACA;;IAEA;AACA;AACA;AACA;IACI,IAAI,IAAI,GAAG,CAAC,CAAC;IACb,IAAI,aAAa,EAAE;MACjB,IAAI,GAAG,aAAa,CAAC,IAAI;MACzB,IAAK,CAAC,IAAI,IAAI,IAAK,GAAG,EAAE;QACtB,IAAI,IAAI,KAAK,CAAC,MAAM,CAAC,IAAI;MACjC;IACA;IACI,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC;;IAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAAC,aAAa,GAAG,KAAK;;IAE9B;AACA;AACA;AACA;AACA;IACI,IAAI,CAAC,uBAAuB,GAAG,GAAG;;IAEtC;AACA;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAAC,aAAa,GAAG,aAAa;;IAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAAC,QAAQ,GAAG,CAAA,CAAE;;IAEtB;IACI,IAAI,qBAAqB,GAAG,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC;;IAEvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAAC,gBAAgB,GAAG,UAAS,GAAG,EAAE;MACpC,OAAO,qBAAqB,CAAC,GAAG,CAAC;IACvC,CAAK;;IAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAAC,sBAAsB,GAAG,UAAS,GAAG,EAAE;MAC1C,qBAAqB,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;IAC5C,CAAK;EACL;;EAEA;EACE,OAAO,CAAC,CAAC,EAAE,MAAM,EAAE;IACjB,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE;MAClB,OAAO,IAAI,CAAC,IAAI;IACtB;IACI,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACA;AACA;AACA;IACI,MAAM,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,MAAM,CAAC;IACtC,IAAI,CAAC,GAAG,EAAE;MACR,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC;IAC1E;IACI,OAAO,GAAG,CAAC,OAAO,CAAC,CAAC,EAAE,MAAM,CAAC;EACjC;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,uBAAuB,CAAC,GAAG,EAAE;IAC3B,IAAI,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE;MACnD,IAAI,IAAI,CAAC,aAAa,IACf,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE;QACtD,OAAO,SAAS;MACxB;MACM,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;MAC3D,IAAI,GAAG,KACE,CAAC,GAAG,CAAC,MAAM,IACT,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE;QAC5C,OAAO,GAAG;MAClB;IACA,CAAK,MAAM;MACL,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE;QAC/B,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;QAC9B,IAAI,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;UACpC,OAAO,GAAG;QACpB;MACA;IACA;IACI,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC;EAClD;;EAEA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE;IAChB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,IAAI,IAAI;IACR,MAAM,GAAG,GAAG,IAAI,CAAC,aAAa;IAC9B,MAAM,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC;IACnC,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;IAC9B,IAAI,SAAS,KAAK,GAAG,EAAE;MACrB,IAAI,aAAa,GAAG,CAAC;MACrB,GAAG,GAAG,IAAI,CAAC,aAAa;MACxB,IAAI,IAAI,CAAC,uBAAuB,EAAE;QAChC,aAAa,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI;MACvC;MACM,IAAI,GAAG,IAAI,CAAC,qBAAqB,EAAE;MACnC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,KAAK;MAC1B,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,GAAG,aAAa,CAAC;IAC/E,CAAK,MAAM;MACL,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC;IAClC;IACI,OAAO,IAAI;EACf;;EAEA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE;IACrB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,MAAM,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC;IACtC,IAAI,SAAS,KAAK,GAAG,EAAE;MACrB,MAAM,GAAG,GAAG,IAAI,CAAC,aAAa;MAC9B,MAAM,GAAG,GAAG,IAAI,CAAC,aAAa;MAC9B,IAAI,aAAa,GAAG,CAAC;MACrB,IAAI,IAAI,CAAC,uBAAuB,EAAE;QAChC,aAAa,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI;MACvC;MACM,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC;MACxC,OAAO,aAAa,GAAG,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,EACpB,MAAM,GAAG,aAAa,CAAC;IAC/D;IACI,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,CAAC;EACrC;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,UAAU,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE;IACpC,MAAM,EAAE,GAAG,IAAI,aAAa,CAAC,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,CAAC;IAC7D,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE;IAC3B,OAAO,EAAE;EACb;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,UAAU,CAAC,EAAE,EAAE,MAAM,EAAE;IACrB,IAAI,OAAO,GAAG,EAAE;IAChB,IAAII,MAAAA,CAAAA,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;MACvB,IAAI,SAAS,KAAK,MAAM,EAAE;QACxB,MAAM,GAAG,CAAC;MAClB;MACM,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC;IACrD;IACI,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;EACjC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,aAAa,SAAS,MAAM,CAAC;EACjC,WAAW,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE;IAC5C,IAAI,EAAE,KAAK,YAAY,KAAK,CAAC,EAAE;MAC7B,MAAM,IAAI,SAAS,CAAC,uBAAuB,CAAC;IAClD;IACI,IAAK,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,IAAM,CAAC,GAAG,OAAQ,EAAE;MACjD,MAAM,IAAI,SAAS,CAAC,0CAA0C,CAAC;IACrE;IACI,IAAK,QAAQ,KAAK,OAAO,MAAM,IACvB,SAAS,KAAK,QAAS,EAAE;MAC/B,QAAQ,GAAG,MAAM;MACjB,MAAM,GAAG,IAAI;IACnB;IACI,IAAI,MAAM,EAAE;MACV,IAAI,EAAE,MAAM,YAAY,MAAM,CAAC,EAAE;QAC/B,MAAM,IAAI,SAAS,CAAC,yBAAyB,CAAC;MACtD;MACM,IAAK,IAAI,KAAK,KAAK,CAAC,aAAa,IACzB,CAAC,IAAI,MAAM,CAAC,IAAK,IACjB,MAAM,CAAC,IAAI,GAAG,KAAK,CAAC,aAAa,CAAC,IAAK,EAAE;QAC/C,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC;MACxE;MACM,IAAI,QAAQ,KAAK,OAAO,QAAQ,EAAE;QAChC,MAAM,IAAI,SAAS,CAAC,qCAAqC,CAAC;MAClE;IACA;IACI,IAAI,IAAI,GAAG,KAAK,CAAC,IAAI;IACrB,IAAI,CAAC,GAAG,KAAK,CAAC,IAAI,EAAE;MAClB,IAAI,GAAG,MAAM,GAAG,MAAM,CAAC,IAAI,GAAG,CAAC;MAC/B,IAAK,CAAC,IAAI,IAAI,IAAK,KAAK,CAAC,uBAAuB,EAAE;QAChD,IAAI,IAAI,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI;MAC/C;IACA;IACI,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC;;IAEzB;IACI,IAAI,CAAC,KAAK,GAAG,KAAK;;IAEtB;AACA;AACA;IACI,IAAI,CAAC,OAAO,GAAG,OAAO;;IAE1B;AACA;AACA;AACA;IACI,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,IAAI;EAChC;;EAEA;EACE,OAAO,CAAC,CAAC,EAAE,MAAM,EAAE;IACjB,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE;MACxB;AACA;MACM,OAAO,IAAI,CAAC,IAAI;IACtB;IACI,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,IAAI,aAAa,GAAG,CAAC;IACrB,IAAI,IAAI,CAAC,KAAK,CAAC,uBAAuB,EAAE;MACtC,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI;IAC1D;IACA;IACI,OAAO,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,MAAM,GAAG,aAAa,CAAC;EACzE;;EAEA;EACE,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE;IAChB,MAAM,IAAI,GAAG,IAAI,CAAC,qBAAqB,EAAE;IACzC,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,IAAI,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,EAAE,MAAM,CAAC,EAAE;MAC7C,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC;IACzC;IACI,IAAI,aAAa,GAAG,CAAC;IACrB,IAAI,IAAI,CAAC,KAAK,CAAC,uBAAuB,EAAE;MACtC,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI;IAC1D;IACI,IAAI,IAAI,CAAC,MAAM,EAAE;MACf,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,GAAG,aAAa,CAAC;IACzE,CAAK,MAAM,IAAI,IAAI,CAAC,QAAQ,EAAE;MACxB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI;IAChC,CAAK,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,uBAAuB,EAAE;MAC7C,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,OAAO;IAC5D;IACI,OAAO,IAAI;EACf;;EAEA;EACE,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE;IACrB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,IAAI,aAAa,GAAG,CAAC;IACrB,IAAI,IAAI,CAAC,KAAK,CAAC,uBAAuB,EAAE;MACtC,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI;IAC1D;IACI,IAAI,IAAI,CAAC,MAAM,IACP,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAE,EAAE;MAC3C,MAAM,IAAI,SAAS,CAAC,yBAAyB,GAAG,IAAI,CAAC,QAAQ,CAAC;IACpE;IACI,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,MAAM,CAAC;IACxD,IAAI,IAAI,GAAG,aAAa;IACxB,IAAI,IAAI,CAAC,MAAM,EAAE;MACf,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,MAAM,GAAG,aAAa,CAAC;MACjE,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,MAAM,GAAG,aAAa,CAAC;MACtD,IAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IACjB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAK,EAAE;QAC/B,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC;MACpE;IACA;IACI,OAAO,IAAI;EACf;;EAEA;AACA;EACE,SAAS,CAAC,MAAM,EAAE;IAChB,IAAI,IAAI,CAAC,MAAM,EAAE;MACf,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC;IAC1C;EACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,gBAAgB,CAAC,CAAC,EAAE;EAC3B,IAAI,CAAC,GAAG,CAAC,EAAE;IACT,CAAC,IAAI,WAAW;EACpB;EACE,OAAO,CAAC;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,YAAY,SAAS,MAAM,CAAC;EAChC,WAAW,CAAC,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE;IAC/B,IAAI,EAAG,IAAI,YAAY,IAAI,IACjB,IAAI,YAAY,MAAO,CAAC,EAAE;MAClC,MAAM,IAAI,SAAS,CAAC,sCAAsC,CAAC;IACjE;IACI,IAAK,QAAQ,KAAK,OAAO,GAAG,IACpB,SAAS,KAAK,QAAS,EAAE;MAC/B,QAAQ,GAAG,GAAG;MACd,GAAG,GAAG,SAAS;IACrB;IACI,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE;MACjB,MAAM,IAAI,UAAU,CAAC,4BAA4B,CAAC;IACxD;IACI,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC;;IAE9B;AACA;AACA;IACI,IAAI,CAAC,IAAI,GAAG,IAAI;;IAEpB;AACA;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG;;IAEpB;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAAC,MAAM,GAAG,EAAE;;IAEpB;AACA;AACA;IACI,IAAI,KAAK,GAAG,CAAC;IACb,IAAI,CAAC,eAAe,GAAG,UAAS,CAAC,EAAE;MACjC,KAAK,GAAG,gBAAgB,CAAC,CAAC,CAAC;MAC3B,OAAO,IAAI;IACjB,CAAK;IACD,IAAI,CAAC,eAAe,GAAG,YAAW;MAChC,OAAO,KAAK;IAClB,CAAK;EACL;;EAEA;EACE,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE;IAChB,MAAM,IAAI,GAAG,IAAI,CAAC,qBAAqB,EAAE;IACzC,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC;IACzC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC;IAC3B,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE;MAC5B,IAAI,SAAS,KAAK,EAAE,CAAC,QAAQ,EAAE;QAC7B,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC;MAC5C;IACA;IACI,OAAO,IAAI;EACf;;EAEA;AACA;AACA;AACA;AACA;EACE,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE;IACrB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC;IACzC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC;IAC3B,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE;MAC5B,IAAI,SAAS,KAAK,EAAE,CAAC,QAAQ,EAAE;QAC7B,MAAM,EAAE,GAAG,GAAG,CAAC,EAAE,CAAC,QAAQ,CAAC;QAC3B,IAAI,SAAS,KAAK,EAAE,EAAE;UACpB,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC;QACvB;MACA;IACA;IACI,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE,CAAC,EAAE,MAAM,CAAC;EAC9D;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,QAAQ,CAAC,IAAI,EAAE,QAAQ,EAAE;IACvB,MAAM,EAAE,GAAG,IAAI,QAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,CAAC;IAC7C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;IACpB,OAAO,EAAE;EACb;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,UAAU,CAAC,QAAQ,EAAE;IACvB;IACA;IACI,MAAM,EAAE,GAAG,IAAI,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC;IACtC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;IACpB,OAAO,EAAE;EACb;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,QAAQ,CAAC,QAAQ,EAAE;IACjB,IAAI,QAAQ,KAAK,OAAO,QAAQ,EAAE;MAChC,MAAM,IAAI,SAAS,CAAC,yBAAyB,CAAC;IACpD;IACI,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE;MAC5B,IAAI,EAAE,CAAC,QAAQ,KAAK,QAAQ,EAAE;QAC5B,OAAO,EAAE;MACjB;IACA;EACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,QAAQ,CAAC;EACb,WAAW,CAAC,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAE;IACrC,IAAI,EAAE,SAAS,YAAY,YAAY,CAAC,EAAE;MACxC,MAAM,IAAI,SAAS,CAAC,kCAAkC,CAAC;IAC7D;IACI,IAAK,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAM,CAAC,IAAI,IAAK,EAAE;MAC5C,MAAM,IAAI,SAAS,CAAC,+BAA+B,CAAC;IAC1D;IACI,MAAM,SAAS,GAAG,CAAC,GAAG,SAAS,CAAC,IAAI;IACpC,MAAM,QAAQ,GAAG,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,KAAK,GAAG,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;IACvE,IAAK,IAAI,GAAG,QAAQ,GAAI,SAAS,EAAE;MACjC,MAAM,IAAI,KAAK,CAAC,oCAAoC,IACjC,SAAS,GAAG,QAAQ,CAAC,GAAG,MAAM,GAC/B,SAAS,GAAG,UAAU,CAAC;IAC/C;;IAEA;AACA;IACI,IAAI,CAAC,SAAS,GAAG,SAAS;;IAE9B;IACI,IAAI,CAAC,IAAI,GAAG,IAAI;;IAEpB;AACA;AACA;AACA;AACA;IACI,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC;IAChC,IAAI,EAAE,KAAK,IAAI,EAAE;MAAA;MACf,IAAI,CAAC,SAAS,GAAG,UAAU;IACjC;;IAEA;AACA;AACA;IACI,IAAI,CAAC,KAAK,GAAG,QAAQ;IACrB,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE;MACtB,IAAI,CAAC,KAAK,GAAG,SAAS,GAAG,QAAQ,GAAG,IAAI;IAC9C;;IAEA;AACA;IACI,IAAI,CAAC,QAAQ,GAAG,gBAAgB,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC;;IAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAAC,QAAQ,GAAG,QAAQ;EAC5B;;EAEA;AACA;EACE,MAAM,CAAA,EAAG;IACP,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE;IAC7C,MAAM,SAAS,GAAG,gBAAgB,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC;IACxD,MAAM,KAAK,GAAG,SAAS,KAAK,IAAI,CAAC,KAAK;IACtC,OAAO,KAAK;EAChB;;EAEA;AACA;AACA;AACA;AACA;EACE,MAAM,CAAC,KAAK,EAAE;IACZ,IAAK,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,IACrB,KAAK,KAAK,gBAAgB,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAE,EAAE;MAC3D,MAAM,IAAI,SAAS,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,IAAI,CAAC,GACvC,uCAAuC,GAAG,IAAI,CAAC,SAAS,CAAC;IACrF;IACI,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE;IAC7C,MAAM,SAAS,GAAG,gBAAgB,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC;IACvD,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,gBAAgB,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,GACrC,SAAS,CAAC;EAC/C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,OAAO,SAAS,QAAQ,CAAC;EAC7B,WAAW,CAAC,SAAS,EAAE,QAAQ,EAAE;IAC/B,KAAK,CAAC,SAAS,EAAE,CAAC,EAAE,QAAQ,CAAC;EACjC;;EAEA;AACA;AACA;EACE,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE;IAChB,OAAO,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,MAAM,CAAC;EAC5D;;EAEA;EACE,MAAM,CAAC,KAAK,EAAE;IACZ,IAAI,SAAS,KAAK,OAAO,KAAK,EAAE;MACpC;MACM,KAAK,GAAG,CAAC,KAAK;IACpB;IACI,OAAO,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC;EACtD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,IAAI,SAAS,MAAM,CAAC;EACxB,WAAW,CAAC,MAAM,EAAE,QAAQ,EAAE;IAC5B,IAAI,EAAI,MAAM,YAAY,cAAc,IAAK,MAAM,CAAC,OAAO,EAAE,IACnD,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAK,CAAC,IAAI,MAAQ,CAAC,EAAE;MACrD,MAAM,IAAI,SAAS,CAAC,kCAAkC,GAChC,uCAAuC,CAAC;IACpE;IAEI,IAAI,IAAI,GAAG,CAAC,CAAC;IACb,IAAI,EAAE,MAAM,YAAY,cAAc,CAAC,EAAE;MACvC,IAAI,GAAG,MAAM;IACnB;IACI,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC;;IAEzB;AACA;AACA;AACA;AACA;IACI,IAAI,CAAC,MAAM,GAAG,MAAM;EACxB;;EAEA;EACE,OAAO,CAAC,CAAC,EAAE,MAAM,EAAE;IACjB,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI;IACpB,IAAI,CAAC,GAAG,IAAI,EAAE;MACZ,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC;IAC1C;IACI,OAAO,IAAI;EACf;;EAEA;EACE,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE;IAChB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI;IACpB,IAAI,CAAC,GAAG,IAAI,EAAE;MACZ,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC;IAC1C;IACI,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,GAAG,IAAI,CAAC;EACzC;;EAEA;AACA;AACA;AACA;AACA;EACE,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE;IACrB,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM;IACtB,IAAI,IAAI,CAAC,MAAM,YAAY,cAAc,EAAE;MACzC,IAAI,GAAG,GAAG,CAAC,MAAM;IACvB;IACI,IAAI,EAAEA,MAAAA,CAAAA,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,IAChB,IAAI,KAAK,GAAG,CAAC,MAAO,CAAC,EAAE;MAC/B,MAAM,IAAI,SAAS,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,GACnC,oBAAoB,GAAG,IAAI,GAAG,iBAAiB,CAAC;IAC5E;IACI,IAAK,MAAM,GAAG,IAAI,GAAI,CAAC,CAAC,MAAM,EAAE;MAC9B,MAAM,IAAI,UAAU,CAAC,0BAA0B,CAAC;IACtD;IACI,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,CAAC;IACjD,IAAI,IAAI,CAAC,MAAM,YAAY,cAAc,EAAE;MACzC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,EAAE,MAAM,CAAC;IACzC;IACI,OAAO,IAAI;EACf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,OAAO,SAAS,MAAM,CAAC;EAC3B,WAAW,CAAC,QAAQ,EAAE;IACpB,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC;EACvB;;EAEA;EACE,OAAO,CAAC,CAAC,EAAE,MAAM,EAAE;IACjB,IAAI,CAACA,MAAAA,CAAAA,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;MACvB,MAAM,IAAI,SAAS,CAAC,oBAAoB,CAAC;IAC/C;IACI,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,IAAI,GAAG,GAAG,MAAM;IAChB,OAAQ,GAAG,GAAG,CAAC,CAAC,MAAM,IAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAE,EAAE;MACzC,GAAG,IAAI,CAAC;IACd;IACI,OAAO,CAAC,GAAG,GAAG,GAAG,MAAM;EAC3B;;EAEA;EACE,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE;IACtB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,MAAM,CAAC;IAClC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC;EAC/D;;EAEA;EACE,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE;IACrB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACA;AACA;AACA;IACI,IAAI,QAAQ,KAAK,OAAO,GAAG,EAAE;MAC3B,GAAG,GAAG,GAAG,CAAC,QAAQ,EAAE;IAC1B;IACI,MAAM,IAAI,GAAG,IAAIA,MAAAA,CAAAA,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC;IACpC,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM;IACxB,IAAK,MAAM,GAAG,IAAI,GAAI,CAAC,CAAC,MAAM,EAAE;MAC9B,MAAM,IAAI,UAAU,CAAC,0BAA0B,CAAC;IACtD;IACI,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,MAAM,CAAC;IACpB,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC;IACpB,OAAO,IAAI,GAAG,CAAC;EACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,IAAI,SAAS,MAAM,CAAC;EACxB,WAAW,CAAC,OAAO,EAAE,QAAQ,EAAE;IAC7B,IAAK,QAAQ,KAAK,OAAO,OAAO,IACxB,SAAS,KAAK,QAAS,EAAE;MAC/B,QAAQ,GAAG,OAAO;MAClB,OAAO,GAAG,SAAS;IACzB;IACI,IAAI,SAAS,KAAK,OAAO,EAAE;MACzB,OAAO,GAAG,CAAC,CAAC;IAClB,CAAK,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;MACrC,MAAM,IAAI,SAAS,CAAC,4BAA4B,CAAC;IACvD;IAEI,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC;;IAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAAC,OAAO,GAAG,OAAO;EAC1B;;EAEA;EACE,OAAO,CAAC,CAAC,EAAE,MAAM,EAAE;IACjB,IAAI,CAACA,MAAAA,CAAAA,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;MACvB,MAAM,IAAI,SAAS,CAAC,oBAAoB,CAAC;IAC/C;IACI,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,OAAO,CAAC,CAAC,MAAM,GAAG,MAAM;EAC5B;;EAEA;EACE,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE;IACtB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACI,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,MAAM,CAAC;IAClC,IAAK,CAAC,IAAI,IAAI,CAAC,OAAO,IACd,IAAI,CAAC,OAAO,GAAG,IAAK,EAAE;MAC5B,MAAM,IAAI,UAAU,CAAC,6BAA6B,CAAC;IACzD;IACI,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,GAAG,IAAI,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC;EAC3D;;EAEA;EACE,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE;IACrB,IAAI,SAAS,KAAK,MAAM,EAAE;MACxB,MAAM,GAAG,CAAC;IAChB;IACA;AACA;AACA;IACI,IAAI,QAAQ,KAAK,OAAO,GAAG,EAAE;MAC3B,GAAG,GAAG,GAAG,CAAC,QAAQ,EAAE;IAC1B;IACI,MAAM,IAAI,GAAG,IAAIA,MAAAA,CAAAA,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC;IACpC,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM;IACxB,IAAK,CAAC,IAAI,IAAI,CAAC,OAAO,IACd,IAAI,CAAC,OAAO,GAAG,IAAK,EAAE;MAC5B,MAAM,IAAI,UAAU,CAAC,6BAA6B,CAAC;IACzD;IACI,IAAK,MAAM,GAAG,IAAI,GAAI,CAAC,CAAC,MAAM,EAAE;MAC9B,MAAM,IAAI,UAAU,CAAC,0BAA0B,CAAC;IACtD;IACI,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,MAAM,CAAC;IACpB,OAAO,IAAI;EACf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,QAAQ,SAAS,MAAM,CAAC;EAC5B,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE;IAC3B,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC;;IAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAAC,KAAK,GAAG,KAAK;EACtB;;EAEA;EACE,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE;IACtB,OAAO,IAAI,CAAC,KAAK;EACrB;;EAEA;EACE,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE;IACzB;IACI,OAAO,CAAC;EACZ;AACA;uBAEsB,GAAG,cAAA;oBACN,GAAG,WAAA;qBACF,GAAG,YAAA;aACX,GAAG,IAAA;eACD,GAAG,MAAA;YACN,GAAG,GAAA;cACD,GAAG,KAAA;cACH,GAAG,KAAA;gBACD,GAAG,OAAA;eACJ,GAAG,MAAA;iBACD,GAAG,QAAA;iBACH,GAAG,QAAA;kBACF,GAAG,SAAA;2BACM,GAAG,kBAAA;iCACG,GAAG,wBAAA;cACtB,GAAG,KAAA;sBACK,GAAG,aAAA;qBACJ,GAAG,YAAA;iBACP,GAAG,QAAA;gBACJ,GAAG,OAAA;aACN,GAAG,IAAA;gBACA,GAAG,OAAA;aACN,GAAG,IAAA;iBACC,GAAG,QAAA;;AAEnB;eACc,GAAI,CAAC,WAAW,EAAE,QAAQ,KAAK,IAAI,WAAW,CAAC,WAAW,EAAE,QAAQ,CAAC;;AAEnF;eACc,GAAI,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,KAAK,IAAI,YAAY,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC;;AAE1F;AACA;AACA,IAAA,EAAA,GAAA,QAAA,CAAA,EAAU,GAAI,QAAQ,IAAI,IAAI,IAAI,CAAC,CAAC,EAAE,QAAQ,CAAE;;AAEhD;AACA;YACW,GAAI,QAAQ,IAAI,IAAI,IAAI,CAAC,CAAC,EAAE,QAAQ,CAAC;;AAEhD;AACA;YACW,GAAI,QAAQ,IAAI,IAAI,IAAI,CAAC,CAAC,EAAE,QAAQ,CAAC;;AAEhD;AACA;AACA,IAAA,GAAA,GAAA,QAAA,CAAA,GAAW,GAAI,QAAQ,IAAI,IAAI,IAAI,CAAC,CAAC,EAAE,QAAQ,CAAE;;AAEjD;AACA;YACW,GAAI,QAAQ,IAAI,IAAI,IAAI,CAAC,CAAC,EAAE,QAAQ,CAAC;;AAEhD;AACA;YACW,GAAI,QAAQ,IAAI,IAAI,IAAI,CAAC,CAAC,EAAE,QAAQ,CAAC;;AAEhD;AACA;aACY,GAAI,QAAQ,IAAI,IAAI,UAAU,CAAC,QAAQ,CAAC;;AAEpD;AACA;cACa,GAAI,QAAQ,IAAI,IAAI,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC;;AAEpD;AACA;cACa,GAAI,QAAQ,IAAI,IAAI,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC;;AAEpD;AACA;cACa,GAAI,QAAQ,IAAI,IAAI,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC;;AAEpD;AACA;cACa,GAAI,QAAQ,IAAI,IAAI,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC;;AAEpD;AACA;cACa,GAAI,QAAQ,IAAI,IAAI,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC;;AAEpD;AACA;eACc,GAAI,QAAQ,IAAI,IAAI,YAAY,CAAC,QAAQ,CAAC;;AAExD;AACA;WACU,GAAI,QAAQ,IAAI,IAAI,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC;;AAE9C;AACA;YACW,GAAI,QAAQ,IAAI,IAAI,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC;;AAE/C;AACA;YACW,GAAI,QAAQ,IAAI,IAAI,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC;;AAE/C;AACA;YACW,GAAI,QAAQ,IAAI,IAAI,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC;;AAE/C;AACA;YACW,GAAI,QAAQ,IAAI,IAAI,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC;;AAE/C;AACA;YACW,GAAI,QAAQ,IAAI,IAAI,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC;;AAE/C;AACA;aACY,GAAI,QAAQ,IAAI,IAAI,SAAS,CAAC,QAAQ,CAAC;;AAEnD;AACA;cACa,GAAI,QAAQ,IAAI,IAAI,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC;;AAEnD;AACA;cACa,GAAI,QAAQ,IAAI,IAAI,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC;;AAEnD;AACA;cACa,GAAI,QAAQ,IAAI,IAAI,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC;;AAEnD;AACA;cACa,GAAI,QAAQ,IAAI,IAAI,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC;;AAEnD;AACA;cACa,GAAI,QAAQ,IAAI,IAAI,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC;;AAEnD;AACA;eACc,GAAI,QAAQ,IAAI,IAAI,WAAW,CAAC,QAAQ,CAAC;;AAEvD;YACW,GAAI,QAAQ,IAAI,IAAI,KAAK,CAAC,QAAQ,CAAC;;AAE9C;cACa,GAAI,QAAQ,IAAI,IAAI,OAAO,CAAC,QAAQ,CAAC;;AAElD;YACW,GAAI,QAAQ,IAAI,IAAI,MAAM,CAAC,QAAQ,CAAC;;AAE/C;cACa,GAAI,QAAQ,IAAI,IAAI,QAAQ,CAAC,QAAQ,CAAC;;AAEnD;AACA,IAAA,MAAA,GAAA,QAAA,CAAA,MAAc,GAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,cAAc,KAAK,IAAI,SAAS,CAAC,MAAM,EAAE,QAAQ,EAAE,cAAc,CAAE;;AAExG;aACY,GAAI,CAAC,IAAI,EAAE,GAAG,EAAE,QAAQ,KAAK,IAAI,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE,QAAQ,CAAC;;AAE9E;YACW,GAAI,CAAC,aAAa,EAAE,KAAK,EAAE,QAAQ,KAAK,IAAI,QAAQ,CAAC,aAAa,EAAE,KAAK,EAAE,QAAQ,CAAC;;AAE/F;cACa,GAAI,CAAC,KAAK,EAAE,aAAa,EAAE,QAAQ,KAAK,IAAI,KAAK,CAAC,KAAK,EAAE,aAAa,EAAE,QAAQ,CAAC;;AAE9F;iCACgC,GAAI,CAAC,MAAM,EAAE,QAAQ,KAAK,IAAI,wBAAwB,CAAC,MAAM,EAAE,QAAQ,CAAC;;AAExG;AACA,IAAA,IAAA,GAAA,QAAA,CAAA,IAAY,GAAI,CAAC,MAAM,EAAE,QAAQ,KAAK,IAAI,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAE;;AAEjE;aACY,GAAI,QAAQ,IAAI,IAAI,OAAO,CAAC,QAAQ,CAAC;;AAEjD;aACY,GAAI,CAAC,OAAO,EAAE,QAAQ,KAAK,IAAI,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC;;AAElE;cACa,GAAI,CAAC,KAAK,EAAE,QAAQ,KAAK,IAAI,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC;;ACvpFnE;AAIA;AACA;AACA;;AACO,MAAMC,SAAS,GAAG,SAAA,CAAA,EAA4C;EAAA,IAA3CC,QAAQ,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAW,WAApB;EACvB,OAAOC,IAAAA,CAAkB,EAAlBA,EAAsBD,QAAtBC,CAAP;AACD,CAFM;AAIP;AACA;AACA;;AACO,MAAMC,MAAM,GAAG,SAAA,CAAA,EAAyC;EAAA,IAAxCF,QAAQ,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAW,QAApB;EACpB,OAAOC,IAAAA,CAAkB,CAAlBA,EAAqBD,QAArBC,CAAP;AACD,CAFM;;ACdP;AAUO,SAASE,yBAAT,CACLC,KADK,EAELC,UAFK,EAGLC,WAHK,EAK0B;EAAA,SAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAD5BC,OAJE,OAAA,KAAA,CAAA,IAAA,OAAA,IAAA,WAAA,IAAA,MAAA,IAAA,GAAA,IAAA,EAAA,IAAA;IAIFA,OAJE,CAAA,IAAA,QAAA,SAAA,CAAA,IAAA;EAAA;EAML,OAAOC,2BAA6B,CAACH,UAAD,EAAaC,WAAb,EAA0BC,OAA1B,EAAmC;IACrEE,aAAa,EAAE;EADsD,CAAnC,CAApC;AAGD;MCOYC,gBAAgB,GAAc,IAAIC,SAAJ,CACzC,6CADyC,CAAA;MAI9BC,2BAA2B,GAAc,IAAID,SAAJ,CACpD,8CADoD,CAAA;AAItD,MAAME,sBAAsB,GAAG,wBAA/B;AACA,MAAMC,qBAAqB,GAAG,uBAA9B;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBhB,SAAxB,EAA6D;EAC3D,OAAOD,MAAAA,CAAAA,MAAM,CAACkB,IAAPlB,CAAYC,SAAS,CAACkB,QAAVlB,EAAZD,CAAP;AACD;AAED;AACA;AACA;;AACO,MAAMoB,GAAN,SAAkBC,EAAlB,CAAqB;EAC1B;AACF;AACA;EACEF,QAAQ,CAAA,EAAkB;IACxB,MAAMG,CAAC,GAAG,KAAA,CAAMC,OAAN,EAAA,CAAgBC,OAAhB,EAAV;IACA,MAAMC,CAAC,GAAGzB,MAAAA,CAAAA,MAAM,CAACkB,IAAPlB,CAAYsB,CAAZtB,CAAV;IACA,IAAIyB,CAAC,CAACC,MAAFD,KAAa,CAAjB,EAAoB;MAClB,OAAOA,CAAP;IACD;IACDE,MAAM,CAACF,CAAC,CAACC,MAAFD,GAAW,CAAZ,EAAe,eAAf,CAANE;IAEA,MAAMC,OAAO,GAAG5B,MAAAA,CAAAA,MAAM,CAAC6B,KAAP7B,CAAa,CAAbA,CAAhB;IACAyB,CAAC,CAACK,IAAFL,CAAOG,OAAPH,CAAAA;IACA,OAAOG,OAAP;EACD;EAED;AACF;AACA;;EACmB,OAAVG,UAAU,CAACC,MAAD,EAA6B;IAC5CL,MAAM,CAACK,MAAM,CAACN,MAAPM,KAAkB,CAAnB,EAAuB,0BAAyBA,MAAM,CAACN,MAAO,EAA9D,CAANC;IACA,OAAO,IAAIP,GAAJ,CACL,CAAC,GAAGY,MAAJ,CAAA,CACGR,OADH,EAAA,CAEGS,GAFH,CAEOC,CAAC,IAAK,KAAIA,CAAC,CAACC,QAAFD,CAAW,EAAXA,CAAe,EAApB,CAAsBE,KAAtB,CAA4B,CAAC,CAA7B,CAFZ,CAAA,CAGGC,IAHH,CAGQ,EAHR,CADK,EAKL,EALK,CAAP;EAOD;AA7ByB;AAgC5B,SAASC,SAAT,CAAmBC,kBAAnB,EAAqD;EACnD,OAAO,WAAA,IAAeA,kBAAtB;AACD;AAQD,MAAMC,kBAAkB,GAAG;EACzBC,UAAU,EAAE,CADa;EAEzBC,aAAa,EAAE,CAFU;EAGzBC,YAAY,EAAE,CAHW;EAIzBC,YAAY,EAAE;AAJW,CAA3B,CAAA,CAAA;;MAQaC,WAAW,GAAc,IAAIhC,SAAJ,CACpC,6CADoC,CAAA;AAItC;AACA;AACA;;MA8BaiC,UAAU,GAAkC3C,MAAAA,CAAoB,CAC3EA,GAAAA,CAAiB,qBAAjBA,CAD2E,EAE3E4C,SAAAA,CAAiB,eAAjBA,CAF2E,EAG3EA,MAAAA,CAAc,QAAdA,CAH2E,EAI3E5C,EAAAA,CAAgB,UAAhBA,CAJ2E,EAK3EA,EAAAA,CAAgB,eAAhBA,CAL2E,EAM3EA,GAAAA,CAAiB,uBAAjBA,CAN2E,EAO3E4C,SAAAA,CAAiB,iBAAjBA,CAP2E,CAApB5C,CAAAA;AAUzD;AACA;AACA;;AA4DA;AACA;AACA;;MACa6C,aAAa,GAAkC7C,MAAAA,CAC1D,CACE4C,SAAAA,CAAiB,MAAjBA,CADF,EAEEA,SAAAA,CAAiB,OAAjBA,CAFF,EAGEA,MAAAA,CAAc,QAAdA,CAHF,EAIE5C,GAAAA,CAAiB,gBAAjBA,CAJF,EAKE4C,SAAAA,CAAiB,UAAjBA,CALF,EAME5C,EAAAA,CAAgB,OAAhBA,CANF,EAOEA,GAAAA,CAAiB,gBAAjBA,CAPF,EAQE4C,MAAAA,CAAc,UAAdA,CARF,EASEA,MAAAA,CAAc,iBAAdA,CATF,EAUE5C,GAAAA,CAAiB,sBAAjBA,CAVF,EAWE4C,SAAAA,CAAiB,gBAAjBA,CAXF,CAD0D5C,CAAAA;AAgB5D;AACA;AACA;;AAkCA;AACA;AACA;;AACA,MAAM8C,cAAc,GAAG9C,MAAAA,CAAoB,CACzCA,EAAAA,CAAgB,GAAhBA,CADyC,EAEzCA,EAAAA,CAAgB,GAAhBA,CAFyC,EAGzCA,EAAAA,CAAgB,gBAAhBA,CAHyC,EAIzC4C,SAAAA,CAAiB,SAAjBA,CAJyC,EAKzCA,SAAAA,CAAiB,SAAjBA,CALyC,EAMzCA,SAAAA,CAAiB,SAAjBA,CANyC,EAOzCA,SAAAA,CAAiB,SAAjBA,CAPyC,EAQzCA,SAAAA,CAAiB,SAAjBA,CARyC,EASzCA,SAAAA,CAAiB,SAAjBA,CATyC,EAUzCA,SAAAA,CAAiB,SAAjBA,CAVyC,EAWzCA,SAAAA,CAAiB,SAAjBA,CAXyC,EAYzCA,SAAAA,CAAiB,SAAjBA,CAZyC,EAazCA,SAAAA,CAAiB,UAAjBA,CAbyC,EAczCA,SAAAA,CAAiB,UAAjBA,CAdyC,CAApB5C,CAAvB;AAiBA;AACA;AACA;;AACO,MAAM+C,KAAN,CAAY;EACjB;AACF;AACA;;EAGE;AACF;AACA;;EAGE;AACF;AACA;;EAGE;AACF;AACA;;EAGE;AACF;AACA;;EAGE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,WAAW,CACT5C,UADS,EAETN,SAFS,EAGTmD,SAHS,EAITC,KAJS,EAKT;IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA;IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,EAAA,KAAA,CAAA,CAAA;IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,EAAA,KAAA,CAAA,CAAA;IAAA,eAAA,CAAA,IAAA,EAAA,qBAAA,EAAA,KAAA,CAAA,CAAA;IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA;IACAC,MAAM,CAACC,MAAPD,CAAc,IAAdA,EAAoB;MAClB/C,UADkB;MAElBN,SAFkB;MAGlBmD,SAHkB;MAIlBC,KAJkB;MAKlB;MACAG,mBAAmB,EAAE1C;IANH,CAApBwC,CAAAA;EAQD;EAED;AACF;AACA;AACA;AACA;;EAC6C,aAA9BG,8BAA8B,CACzClD,UADyC,EAExB;IACjB,OAAO,MAAMA,UAAU,CAACmD,iCAAXnD,CAA6CuC,UAAU,CAACa,IAAxDpD,CAAb;EACD;EAED;AACF;AACA;AACA;AACA;;EACgD,aAAjCqD,iCAAiC,CAC5CrD,UAD4C,EAE3B;IACjB,OAAO,MAAMA,UAAU,CAACmD,iCAAXnD,CACXyC,aAAa,CAACW,IADHpD,CAAb;EAGD;EAED;AACF;AACA;AACA;AACA;;EACiD,aAAlCsD,kCAAkC,CAC7CtD,UAD6C,EAE5B;IACjB,OAAO,MAAMA,UAAU,CAACmD,iCAAXnD,CACX0C,cAAc,CAACU,IADJpD,CAAb;EAGD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACyB,aAAVuD,UAAU,CACrBvD,UADqB,EAErB8C,KAFqB,EAGrBU,aAHqB,EAIrBC,eAJqB,EAKrBC,QALqB,EAMrBb,SANqB,EAOL;IAChB,MAAMc,WAAW,GAAGC,OAAO,CAACC,QAARD,EAApB;IACA,MAAME,KAAK,GAAG,IAAInB,KAAJ,CACZ3C,UADY,EAEZ2D,WAAW,CAACjE,SAFA,EAGZmD,SAHY,EAIZC,KAJY,CAAd,CAFgB,CAAA;;IAUhB,MAAMiB,aAAa,GAAG,MAAMpB,KAAK,CAACO,8BAANP,CAC1B3C,UAD0B2C,CAA5B;IAIA,MAAM1C,WAAW,GAAG,IAAI+D,WAAJ,EAApB;IACA/D,WAAW,CAACgE,GAAZhE,CACE,aAAa,CAACiE,aAAd,CAA4B;MAC1BC,UAAU,EAAErB,KAAK,CAACpD,SADQ;MAE1B0E,gBAAgB,EAAET,WAAW,CAACjE,SAFJ;MAG1B2E,QAAQ,EAAEN,aAHgB;MAI1BO,KAAK,EAAE/B,UAAU,CAACa,IAJQ;MAK1BP;IAL0B,CAA5B,CADF5C,CAAAA;IAUAA,WAAW,CAACgE,GAAZhE,CACE0C,KAAK,CAAC4B,yBAAN5B,CACEE,SADFF,EAEEgB,WAAW,CAACjE,SAFdiD,EAGEe,QAHFf,EAIEa,aAJFb,EAKEc,eALFd,CADF1C,CAAAA,CAzBgB,CAAA;;IAoChB,MAAMH,yBAAyB,CAC7B,kCAD6B,EAE7BE,UAF6B,EAG7BC,WAH6B,EAI7B6C,KAJ6B,EAK7Ba,WAL6B,CAA/B;IAQA,OAAOG,KAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EACqB,MAAbI,aAAa,CAACM,KAAD,EAAuC;IACxD;IACA,MAAMT,aAAa,GAAG,MAAMpB,KAAK,CAACU,iCAANV,CAC1B,IAAA,CAAK3C,UADqB2C,CAA5B;IAIA,MAAM8B,UAAU,GAAGb,OAAO,CAACC,QAARD,EAAnB;IACA,MAAM3D,WAAW,GAAG,IAAI+D,WAAJ,EAApB;IACA/D,WAAW,CAACgE,GAAZhE,CACE,aAAa,CAACiE,aAAd,CAA4B;MAC1BC,UAAU,EAAE,IAAA,CAAKrB,KAAL,CAAWpD,SADG;MAE1B0E,gBAAgB,EAAEK,UAAU,CAAC/E,SAFH;MAG1B2E,QAAQ,EAAEN,aAHgB;MAI1BO,KAAK,EAAE7B,aAAa,CAACW,IAJK;MAK1BP,SAAS,EAAE,IAAA,CAAKA;IALU,CAA5B,CADF5C,CAAAA;IAUA,MAAMyE,aAAa,GAAG,IAAA,CAAKhF,SAA3B;IACAO,WAAW,CAACgE,GAAZhE,CACE0C,KAAK,CAACgC,4BAANhC,CACE,IAAA,CAAKE,SADPF,EAEE+B,aAFF/B,EAGE8B,UAAU,CAAC/E,SAHbiD,EAIE6B,KAJF7B,CADF1C,CAAAA,CAnBwD,CAAA;;IA6BxD,MAAMH,yBAAyB,CAC7B,qCAD6B,EAE7B,IAAA,CAAKE,UAFwB,EAG7BC,WAH6B,EAI7B,IAAA,CAAK6C,KAJwB,EAK7B2B,UAL6B,CAA/B;IAQA,OAAOA,UAAU,CAAC/E,SAAlB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EACoC,MAA5BkF,4BAA4B,CAACJ,KAAD,EAAuC;IACvE,MAAMK,iBAAiB,GAAG,MAAMlC,KAAK,CAACmC,yBAANnC,CAC9B,IAAA,CAAKM,mBADyBN,EAE9B,IAAA,CAAKE,SAFyBF,EAG9B,IAAA,CAAKjD,SAHyBiD,EAI9B6B,KAJ8B7B,CAAhC;IAOA,OAAO,IAAA,CAAKoC,oCAAL,CAA0CP,KAA1C,EAAiDK,iBAAjD,CAAP;EACD;EAEyC,MAApCE,oCAAoC,CACxCP,KADwC,EAExCK,iBAFwC,EAGpB;IACpB,MAAM/E,yBAAyB,CAC7B,8BAD6B,EAE7B,IAAA,CAAKE,UAFwB,EAG7B,IAAIgE,WAAJ,EAAA,CAAkBC,GAAlB,CACEtB,KAAK,CAACqC,uCAANrC,CACE,IAAA,CAAKM,mBADPN,EAEE,IAAA,CAAKE,SAFPF,EAGE,IAAA,CAAKjD,SAHPiD,EAIEkC,iBAJFlC,EAKE6B,KALF7B,EAME,IAAA,CAAKG,KAAL,CAAWpD,SANbiD,CADF,CAH6B,EAa7B,IAAA,CAAKG,KAbwB,CAA/B;IAgBA,OAAO+B,iBAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EACwC,MAAhCI,gCAAgC,CACpCT,KADoC,EAEd;IACtB,MAAMK,iBAAiB,GAAG,MAAMlC,KAAK,CAACmC,yBAANnC,CAC9B,IAAA,CAAKM,mBADyBN,EAE9B,IAAA,CAAKE,SAFyBF,EAG9B,IAAA,CAAKjD,SAHyBiD,EAI9B6B,KAJ8B7B,CAAhC,CADsB,CAAA;IAStB;IACA;;IACA,IAAI;MACF,OAAO,MAAM,IAAA,CAAKuC,cAAL,CAAoBL,iBAApB,CAAb;IACD,CAFD,CAEE,OAAOM,GAAP,EAAY;MACZ;MACA;MACA;MACA;MACA,IACEA,GAAG,CAACC,OAAJD,KAAgB3E,sBAAhB2E,IACAA,GAAG,CAACC,OAAJD,KAAgB1E,qBAFlB,EAGE;QACA;QACA;QACA,IAAI;UACF,MAAM,IAAA,CAAKsE,oCAAL,CACJP,KADI,EAEJK,iBAFI,CAAN;QAID,CALD,CAKE,OAAOM,GAAP,EAAY,CAAA;UAEZ;UACA;QAAA,CAXF,CAAA;;QAeA,OAAO,MAAM,IAAA,CAAKD,cAAL,CAAoBL,iBAApB,CAAb;MACD,CAnBD,MAmBO;QACL,MAAMM,GAAN;MACD;IACF;EACF;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACyC,aAA1BE,0BAA0B,CACrCrF,UADqC,EAErC6C,SAFqC,EAGrC2B,KAHqC,EAIrC1B,KAJqC,EAKrCwC,MALqC,EAMjB;IACpB;IACA,MAAMvB,aAAa,GAAG,MAAMpB,KAAK,CAACU,iCAANV,CAC1B3C,UAD0B2C,CAA5B,CAFoB,CAAA;;IAOpB,MAAM8B,UAAU,GAAGb,OAAO,CAACC,QAARD,EAAnB;IACA,MAAM3D,WAAW,GAAG,IAAI+D,WAAJ,EAApB;IACA/D,WAAW,CAACgE,GAAZhE,CACE,aAAa,CAACiE,aAAd,CAA4B;MAC1BC,UAAU,EAAErB,KAAK,CAACpD,SADQ;MAE1B0E,gBAAgB,EAAEK,UAAU,CAAC/E,SAFH;MAG1B2E,QAAQ,EAAEN,aAHgB;MAI1BO,KAAK,EAAE7B,aAAa,CAACW,IAJK;MAK1BP;IAL0B,CAA5B,CADF5C,CAAAA,CAToB,CAAA;;IAoBpBA,WAAW,CAACgE,GAAZhE,CACE,aAAa,CAACsF,QAAd,CAAuB;MACrBpB,UAAU,EAAErB,KAAK,CAACpD,SADG;MAErB8F,QAAQ,EAAEf,UAAU,CAAC/E,SAFA;MAGrB2E,QAAQ,EAAEiB;IAHW,CAAvB,CADFrF,CAAAA,CApBoB,CAAA;IA6BpB;IACA;;IACAA,WAAW,CAACgE,GAAZhE,CACE0C,KAAK,CAACgC,4BAANhC,CACEE,SADFF,EAEEL,WAFFK,EAGE8B,UAAU,CAAC/E,SAHbiD,EAIE6B,KAJF7B,CADF1C,CAAAA,CA/BoB,CAAA;;IAyCpB,MAAMH,yBAAyB,CAC7B,gDAD6B,EAE7BE,UAF6B,EAG7BC,WAH6B,EAI7B6C,KAJ6B,EAK7B2B,UAL6B,CAA/B;IAQA,OAAOA,UAAU,CAAC/E,SAAlB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACsB,MAAd+F,cAAc,CAClBC,CADkB,EAElBxF,OAFkB,EAGE;IACpB,MAAMyF,eAAe,GAAG/B,OAAO,CAACC,QAARD,EAAxB,CADoB,CAAA;;IAIpB,MAAMG,aAAa,GAAG,MAAMpB,KAAK,CAACW,kCAANX,CAC1B,IAAA,CAAK3C,UADqB2C,CAA5B;IAGA,MAAM1C,WAAW,GAAG,IAAI+D,WAAJ,EAApB;IACA/D,WAAW,CAACgE,GAAZhE,CACE,aAAa,CAACiE,aAAd,CAA4B;MAC1BC,UAAU,EAAE,IAAA,CAAKrB,KAAL,CAAWpD,SADG;MAE1B0E,gBAAgB,EAAEuB,eAAe,CAACjG,SAFR;MAG1B2E,QAAQ,EAAEN,aAHgB;MAI1BO,KAAK,EAAE5B,cAAc,CAACU,IAJI;MAK1BP,SAAS,EAAE,IAAA,CAAKA;IALU,CAA5B,CADF5C,CAAAA,CARoB,CAAA;;IAmBpB,IAAI2F,IAAI,GAAG,CACT;MAACC,MAAM,EAAEF,eAAe,CAACjG,SAAzB;MAAoCoG,QAAQ,EAAE,KAA9C;MAAqDC,UAAU,EAAE;IAAjE,CADS,EAET;MAACF,MAAM,EAAEG,kBAAT;MAA6BF,QAAQ,EAAE,KAAvC;MAA8CC,UAAU,EAAE;IAA1D,CAFS,CAAX;IAIA7F,OAAO,CAAC+F,OAAR/F,CAAgBgG,MAAM,IACpB,IAAI,CAACC,IAAL,CAAU;MAACN,MAAM,EAAEK,MAAT;MAAiBJ,QAAQ,EAAE,KAA3B;MAAkCC,UAAU,EAAE;IAA9C,CAAV,CADF7F,CAAAA;IAGA,MAAMkG,UAAU,GAAGxG,MAAAA,CAAoB,CACrCA,EAAAA,CAAgB,aAAhBA,CADqC,EAErCA,EAAAA,CAAgB,GAAhBA,CAFqC,CAApBA,CAAnB;IAIA,MAAMyG,IAAI,GAAG5G,MAAAA,CAAAA,MAAM,CAAC6B,KAAP7B,CAAa2G,UAAU,CAAChD,IAAxB3D,CAAb;IACA2G,UAAU,CAACE,MAAXF,CACE;MACEG,WAAW,EAAE,CADf;MACkB;MAChBb;IAFF,CADFU,EAKEC,IALFD,CAAAA;IAOAnG,WAAW,CAACgE,GAAZhE,CAAgB;MACd2F,IADc;MAEd/C,SAAS,EAAE,IAAA,CAAKA,SAFF;MAGdwD;IAHc,CAAhBpG,CAAAA,CAtCoB,CAAA;;IA6CpB,MAAMH,yBAAyB,CAC7B,sCAD6B,EAE7B,IAAA,CAAKE,UAFwB,EAG7BC,WAH6B,EAI7B,IAAA,CAAK6C,KAJwB,EAK7B6C,eAL6B,CAA/B;IAQA,OAAOA,eAAe,CAACjG,SAAvB;EACD;EAED;AACF;AACA;;EACmB,MAAX8G,WAAW,CAAA,EAAsB;IACrC,MAAMC,IAAI,GAAG,MAAM,IAAA,CAAKzG,UAAL,CAAgBkF,cAAhB,CAA+B,IAAA,CAAKxF,SAApC,CAAnB;IACA,IAAI+G,IAAI,KAAK,IAAb,EAAmB;MACjB,MAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;IACD;IACD,IAAI,CAACD,IAAI,CAACjC,KAALiC,CAAWE,MAAXF,CAAkB,IAAA,CAAK5D,SAAvB4D,CAAL,EAAwC;MACtC,MAAM,IAAIC,KAAJ,CAAW,uBAAsBE,IAAI,CAACC,SAALD,CAAeH,IAAI,CAACjC,KAApBoC,CAA2B,EAA5D,CAAN;IACD;IACD,IAAIH,IAAI,CAACJ,IAALI,CAAUtF,MAAVsF,IAAoBlE,UAAU,CAACa,IAAnC,EAAyC;MACvC,MAAM,IAAIsD,KAAJ,CAAW,mBAAX,CAAN;IACD;IAED,MAAML,IAAI,GAAG5G,MAAAA,CAAAA,MAAM,CAACkB,IAAPlB,CAAYgH,IAAI,CAACJ,IAAjB5G,CAAb;IACA,MAAMqH,QAAQ,GAAGvE,UAAU,CAACwE,MAAXxE,CAAkB8D,IAAlB9D,CAAjB;IAEA,IAAIuE,QAAQ,CAACE,mBAATF,KAAiC,CAArC,EAAwC;MACtCA,QAAQ,CAACtD,aAATsD,GAAyB,IAAzBA;IACD,CAFD,MAEO;MACLA,QAAQ,CAACtD,aAATsD,GAAyB,IAAIxG,SAAJ,CAAcwG,QAAQ,CAACtD,aAAvB,CAAzBsD;IACD;IAEDA,QAAQ,CAACG,MAATH,GAAkBjG,GAAG,CAACW,UAAJX,CAAeiG,QAAQ,CAACG,MAAxBpG,CAAlBiG;IACAA,QAAQ,CAACI,aAATJ,GAAyBA,QAAQ,CAACI,aAATJ,IAA0B,CAAnDA;IAEA,IAAIA,QAAQ,CAACK,qBAATL,KAAmC,CAAvC,EAA0C;MACxCA,QAAQ,CAACrD,eAATqD,GAA2B,IAA3BA;IACD,CAFD,MAEO;MACLA,QAAQ,CAACrD,eAATqD,GAA2B,IAAIxG,SAAJ,CAAcwG,QAAQ,CAACrD,eAAvB,CAA3BqD;IACD;IACD,OAAOA,QAAP;EACD;EAED;AACF;AACA;AACA;AACA;;EACsB,MAAd5B,cAAc,CAClBkC,OADkB,EAElBC,UAFkB,EAGI;IACtB,MAAMZ,IAAI,GAAG,MAAM,IAAA,CAAKzG,UAAL,CAAgBkF,cAAhB,CAA+BkC,OAA/B,EAAwCC,UAAxC,CAAnB;IACA,IAAIZ,IAAI,KAAK,IAAb,EAAmB;MACjB,MAAM,IAAIC,KAAJ,CAAUlG,sBAAV,CAAN;IACD;IACD,IAAI,CAACiG,IAAI,CAACjC,KAALiC,CAAWE,MAAXF,CAAkB,IAAA,CAAK5D,SAAvB4D,CAAL,EAAwC;MACtC,MAAM,IAAIC,KAAJ,CAAUjG,qBAAV,CAAN;IACD;IACD,IAAIgG,IAAI,CAACJ,IAALI,CAAUtF,MAAVsF,IAAoBhE,aAAa,CAACW,IAAtC,EAA4C;MAC1C,MAAM,IAAIsD,KAAJ,CAAW,sBAAX,CAAN;IACD;IAED,MAAML,IAAI,GAAG5G,MAAAA,CAAAA,MAAM,CAACkB,IAAPlB,CAAYgH,IAAI,CAACJ,IAAjB5G,CAAb;IACA,MAAM6H,WAAW,GAAG7E,aAAa,CAACsE,MAAdtE,CAAqB4D,IAArB5D,CAApB;IACA6E,WAAW,CAACC,OAAZD,GAAsBF,OAAtBE;IACAA,WAAW,CAACE,IAAZF,GAAmB,IAAIhH,SAAJ,CAAcgH,WAAW,CAACE,IAA1B,CAAnBF;IACAA,WAAW,CAAC9C,KAAZ8C,GAAoB,IAAIhH,SAAJ,CAAcgH,WAAW,CAAC9C,KAA1B,CAApB8C;IACAA,WAAW,CAAChC,MAAZgC,GAAqBzG,GAAG,CAACW,UAAJX,CAAeyG,WAAW,CAAChC,MAA3BzE,CAArByG;IAEA,IAAIA,WAAW,CAACG,cAAZH,KAA+B,CAAnC,EAAsC;MACpCA,WAAW,CAACI,QAAZJ,GAAuB,IAAvBA;MACAA,WAAW,CAACK,eAAZL,GAA8B,IAAIzG,GAAJ,EAA9ByG;IACD,CAHD,MAGO;MACLA,WAAW,CAACI,QAAZJ,GAAuB,IAAIhH,SAAJ,CAAcgH,WAAW,CAACI,QAA1B,CAAvBJ;MACAA,WAAW,CAACK,eAAZL,GAA8BzG,GAAG,CAACW,UAAJX,CAAeyG,WAAW,CAACK,eAA3B9G,CAA9ByG;IACD;IAEDA,WAAW,CAACJ,aAAZI,GAA4BA,WAAW,CAACM,KAAZN,KAAsB,CAAlDA;IACAA,WAAW,CAACO,QAAZP,GAAuBA,WAAW,CAACM,KAAZN,KAAsB,CAA7CA;IAEA,IAAIA,WAAW,CAACQ,cAAZR,KAA+B,CAAnC,EAAsC;MACpCA,WAAW,CAACS,iBAAZT,GAAgCzG,GAAG,CAACW,UAAJX,CAAeyG,WAAW,CAACU,QAA3BnH,CAAhCyG;MACAA,WAAW,CAACU,QAAZV,GAAuB,IAAvBA;IACD,CAHD,MAGO;MACLA,WAAW,CAACS,iBAAZT,GAAgC,IAAhCA;MACAA,WAAW,CAACU,QAAZV,GAAuB,KAAvBA;IACD;IAED,IAAIA,WAAW,CAACW,oBAAZX,KAAqC,CAAzC,EAA4C;MAC1CA,WAAW,CAACY,cAAZZ,GAA6B,IAA7BA;IACD,CAFD,MAEO;MACLA,WAAW,CAACY,cAAZZ,GAA6B,IAAIhH,SAAJ,CAAcgH,WAAW,CAACY,cAA1B,CAA7BZ;IACD;IAED,IAAI,CAACA,WAAW,CAACE,IAAZF,CAAiBX,MAAjBW,CAAwB,IAAA,CAAK5H,SAA7B4H,CAAL,EAA8C;MAC5C,MAAM,IAAIZ,KAAJ,CACH,yBAAwBE,IAAI,CAACC,SAALD,CACvBU,WAAW,CAACE,IADWZ,CAEvB,QAAOA,IAAI,CAACC,SAALD,CAAe,IAAA,CAAKlH,SAApBkH,CAA+B,EAHpC,CAAN;IAKD;IACD,OAAOU,WAAP;EACD;EAED;AACF;AACA;AACA;AACA;;EACuB,MAAfa,eAAe,CAACC,QAAD,EAA6C;IAChE,MAAM3B,IAAI,GAAG,MAAM,IAAA,CAAKzG,UAAL,CAAgBkF,cAAhB,CAA+BkD,QAA/B,CAAnB;IACA,IAAI3B,IAAI,KAAK,IAAb,EAAmB;MACjB,MAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;IACD;IACD,IAAI,CAACD,IAAI,CAACjC,KAALiC,CAAWE,MAAXF,CAAkB,IAAA,CAAK5D,SAAvB4D,CAAL,EAAwC;MACtC,MAAM,IAAIC,KAAJ,CAAW,wBAAX,CAAN;IACD;IACD,IAAID,IAAI,CAACJ,IAALI,CAAUtF,MAAVsF,IAAoB/D,cAAc,CAACU,IAAvC,EAA6C;MAC3C,MAAM,IAAIsD,KAAJ,CAAW,uBAAX,CAAN;IACD;IAED,MAAML,IAAI,GAAG5G,MAAAA,CAAAA,MAAM,CAACkB,IAAPlB,CAAYgH,IAAI,CAACJ,IAAjB5G,CAAb;IACA,MAAM4I,YAAY,GAAG3F,cAAc,CAACqE,MAAfrE,CAAsB2D,IAAtB3D,CAArB;IACA2F,YAAY,CAACC,OAAbD,GAAuB,IAAI/H,SAAJ,CAAc+H,YAAY,CAACC,OAA3B,CAAvBD;IACAA,YAAY,CAACE,OAAbF,GAAuB,IAAI/H,SAAJ,CAAc+H,YAAY,CAACE,OAA3B,CAAvBF;IACAA,YAAY,CAACG,OAAbH,GAAuB,IAAI/H,SAAJ,CAAc+H,YAAY,CAACG,OAA3B,CAAvBH;IACAA,YAAY,CAACI,OAAbJ,GAAuB,IAAI/H,SAAJ,CAAc+H,YAAY,CAACI,OAA3B,CAAvBJ;IACAA,YAAY,CAACK,OAAbL,GAAuB,IAAI/H,SAAJ,CAAc+H,YAAY,CAACK,OAA3B,CAAvBL;IACAA,YAAY,CAACM,OAAbN,GAAuB,IAAI/H,SAAJ,CAAc+H,YAAY,CAACM,OAA3B,CAAvBN;IACAA,YAAY,CAACO,OAAbP,GAAuB,IAAI/H,SAAJ,CAAc+H,YAAY,CAACO,OAA3B,CAAvBP;IACAA,YAAY,CAACQ,OAAbR,GAAuB,IAAI/H,SAAJ,CAAc+H,YAAY,CAACQ,OAA3B,CAAvBR;IACAA,YAAY,CAACS,OAAbT,GAAuB,IAAI/H,SAAJ,CAAc+H,YAAY,CAACS,OAA3B,CAAvBT;IACAA,YAAY,CAACU,QAAbV,GAAwB,IAAI/H,SAAJ,CAAc+H,YAAY,CAACU,QAA3B,CAAxBV;IACAA,YAAY,CAACW,QAAbX,GAAwB,IAAI/H,SAAJ,CAAc+H,YAAY,CAACW,QAA3B,CAAxBX;IAEA,OAAOA,YAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACgB,MAAR9C,QAAQ,CACZ0D,MADY,EAEZC,WAFY,EAGZ1E,KAHY,EAIZ2E,YAJY,EAKZ7D,MALY,EAMmB;IAC/B,IAAI8D,cAAJ;IACA,IAAIlJ,OAAJ;IACA,IAAI6B,SAAS,CAACyC,KAAD,CAAb,EAAsB;MACpB4E,cAAc,GAAG5E,KAAK,CAAC9E,SAAvB0J;MACAlJ,OAAO,GAAG,CAACsE,KAAD,CAAVtE;IACD,CAHD,MAGO;MACLkJ,cAAc,GAAG5E,KAAjB4E;MACAlJ,OAAO,GAAGiJ,YAAVjJ;IACD;IACD,OAAO,MAAMJ,yBAAyB,CACpC,UADoC,EAEpC,IAAA,CAAKE,UAF+B,EAGpC,IAAIgE,WAAJ,EAAA,CAAkBC,GAAlB,CACEtB,KAAK,CAAC0G,yBAAN1G,CACE,IAAA,CAAKE,SADPF,EAEEsG,MAFFtG,EAGEuG,WAHFvG,EAIEyG,cAJFzG,EAKEwG,YALFxG,EAME2C,MANF3C,CADF,CAHoC,EAapC,IAAA,CAAKG,KAb+B,EAcpC,GAAG5C,OAdiC,CAAtC;EAgBD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACe,MAAPoJ,OAAO,CACXlC,OADW,EAEXM,QAFW,EAGXlD,KAHW,EAIX2E,YAJW,EAKX7D,MALW,EAMI;IACf,IAAI8D,cAAJ;IACA,IAAIlJ,OAAJ;IACA,IAAI6B,SAAS,CAACyC,KAAD,CAAb,EAAsB;MACpB4E,cAAc,GAAG5E,KAAK,CAAC9E,SAAvB0J;MACAlJ,OAAO,GAAG,CAACsE,KAAD,CAAVtE;IACD,CAHD,MAGO;MACLkJ,cAAc,GAAG5E,KAAjB4E;MACAlJ,OAAO,GAAGiJ,YAAVjJ;IACD;IACD,MAAMJ,yBAAyB,CAC7B,SAD6B,EAE7B,IAAA,CAAKE,UAFwB,EAG7B,IAAIgE,WAAJ,EAAA,CAAkBC,GAAlB,CACEtB,KAAK,CAAC4G,wBAAN5G,CACE,IAAA,CAAKE,SADPF,EAEEyE,OAFFzE,EAGE+E,QAHF/E,EAIEyG,cAJFzG,EAKEwG,YALFxG,EAME2C,MANF3C,CADF,CAH6B,EAa7B,IAAA,CAAKG,KAbwB,EAc7B,GAAG5C,OAd0B,CAA/B;EAgBD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;EACc,MAANsJ,MAAM,CACVpC,OADU,EAEV5C,KAFU,EAGV2E,YAHU,EAIK;IACf,IAAIC,cAAJ;IACA,IAAIlJ,OAAJ;IACA,IAAI6B,SAAS,CAACyC,KAAD,CAAb,EAAsB;MACpB4E,cAAc,GAAG5E,KAAK,CAAC9E,SAAvB0J;MACAlJ,OAAO,GAAG,CAACsE,KAAD,CAAVtE;IACD,CAHD,MAGO;MACLkJ,cAAc,GAAG5E,KAAjB4E;MACAlJ,OAAO,GAAGiJ,YAAVjJ;IACD;IACD,MAAMJ,yBAAyB,CAC7B,QAD6B,EAE7B,IAAA,CAAKE,UAFwB,EAG7B,IAAIgE,WAAJ,EAAA,CAAkBC,GAAlB,CACEtB,KAAK,CAAC8G,uBAAN9G,CACE,IAAA,CAAKE,SADPF,EAEEyE,OAFFzE,EAGEyG,cAHFzG,EAIEwG,YAJFxG,CADF,CAH6B,EAW7B,IAAA,CAAKG,KAXwB,EAY7B,GAAG5C,OAZ0B,CAA/B;EAcD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACoB,MAAZwJ,YAAY,CAChBtC,OADgB,EAEhBuC,YAFgB,EAGhBC,aAHgB,EAIhBC,gBAJgB,EAKhBV,YALgB,EAMD;IACf,IAAIW,yBAAJ;IACA,IAAI5J,OAAJ;IACA,IAAI6B,SAAS,CAAC8H,gBAAD,CAAb,EAAiC;MAC/BC,yBAAyB,GAAGD,gBAAgB,CAACnK,SAA7CoK;MACA5J,OAAO,GAAG,CAAC2J,gBAAD,CAAV3J;IACD,CAHD,MAGO;MACL4J,yBAAyB,GAAGD,gBAA5BC;MACA5J,OAAO,GAAGiJ,YAAVjJ;IACD;IACD,MAAMJ,yBAAyB,CAC7B,cAD6B,EAE7B,IAAA,CAAKE,UAFwB,EAG7B,IAAIgE,WAAJ,EAAA,CAAkBC,GAAlB,CACEtB,KAAK,CAACoH,6BAANpH,CACE,IAAA,CAAKE,SADPF,EAEEyE,OAFFzE,EAGEgH,YAHFhH,EAIEiH,aAJFjH,EAKEmH,yBALFnH,EAMEwG,YANFxG,CADF,CAH6B,EAa7B,IAAA,CAAKG,KAbwB,EAc7B,GAAG5C,OAd0B,CAA/B;EAgBD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EACc,MAAN8J,MAAM,CACVC,IADU,EAEVC,SAFU,EAGVf,YAHU,EAIV7D,MAJU,EAKK;IACf,IAAI8D,cAAJ;IACA,IAAIlJ,OAAJ;IACA,IAAI6B,SAAS,CAACmI,SAAD,CAAb,EAA0B;MACxBd,cAAc,GAAGc,SAAS,CAACxK,SAA3B0J;MACAlJ,OAAO,GAAG,CAACgK,SAAD,CAAVhK;IACD,CAHD,MAGO;MACLkJ,cAAc,GAAGc,SAAjBd;MACAlJ,OAAO,GAAGiJ,YAAVjJ;IACD;IACD,MAAMJ,yBAAyB,CAC7B,QAD6B,EAE7B,IAAA,CAAKE,UAFwB,EAG7B,IAAIgE,WAAJ,EAAA,CAAkBC,GAAlB,CACEtB,KAAK,CAACwH,uBAANxH,CACE,IAAA,CAAKE,SADPF,EAEE,IAAA,CAAKjD,SAFPiD,EAGEsH,IAHFtH,EAIEyG,cAJFzG,EAKEwG,YALFxG,EAME2C,MANF3C,CADF,CAH6B,EAa7B,IAAA,CAAKG,KAbwB,EAc7B,GAAG5C,OAd0B,CAA/B;EAgBD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EACY,MAAJkK,IAAI,CACRhD,OADQ,EAER5C,KAFQ,EAGR2E,YAHQ,EAIR7D,MAJQ,EAKO;IACf,IAAI8D,cAAJ;IACA,IAAIlJ,OAAJ;IACA,IAAI6B,SAAS,CAACyC,KAAD,CAAb,EAAsB;MACpB4E,cAAc,GAAG5E,KAAK,CAAC9E,SAAvB0J;MACAlJ,OAAO,GAAG,CAACsE,KAAD,CAAVtE;IACD,CAHD,MAGO;MACLkJ,cAAc,GAAG5E,KAAjB4E;MACAlJ,OAAO,GAAGiJ,YAAVjJ;IACD;IACD,MAAMJ,yBAAyB,CAC7B,MAD6B,EAE7B,IAAA,CAAKE,UAFwB,EAG7B,IAAIgE,WAAJ,EAAA,CAAkBC,GAAlB,CACEtB,KAAK,CAAC0H,qBAAN1H,CACE,IAAA,CAAKE,SADPF,EAEE,IAAA,CAAKjD,SAFPiD,EAGEyE,OAHFzE,EAIEyG,cAJFzG,EAKEwG,YALFxG,EAME2C,MANF3C,CADF,CAH6B,EAa7B,IAAA,CAAKG,KAbwB,EAc7B,GAAG5C,OAd0B,CAA/B;EAgBD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EACoB,MAAZoK,YAAY,CAChBlD,OADgB,EAEhB6C,IAFgB,EAGhBC,SAHgB,EAIhBf,YAJgB,EAKD;IACf,IAAIoB,kBAAJ;IACA,IAAIrK,OAAJ;IACA,IAAI6B,SAAS,CAACmI,SAAD,CAAb,EAA0B;MACxBK,kBAAkB,GAAGL,SAAS,CAACxK,SAA/B6K;MACArK,OAAO,GAAG,CAACgK,SAAD,CAAVhK;IACD,CAHD,MAGO;MACLqK,kBAAkB,GAAGL,SAArBK;MACArK,OAAO,GAAGiJ,YAAVjJ;IACD;IACD,MAAMJ,yBAAyB,CAC7B,cAD6B,EAE7B,IAAA,CAAKE,UAFwB,EAG7B,IAAIgE,WAAJ,EAAA,CAAkBC,GAAlB,CACEtB,KAAK,CAAC6H,6BAAN7H,CACE,IAAA,CAAKE,SADPF,EAEEyE,OAFFzE,EAGEsH,IAHFtH,EAIE4H,kBAJF5H,EAKEwG,YALFxG,CADF,CAH6B,EAY7B,IAAA,CAAKG,KAZwB,EAa7B,GAAG5C,OAb0B,CAA/B;EAeD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;EACqB,MAAbuK,aAAa,CACjBrD,OADiB,EAEjB8C,SAFiB,EAGjBf,YAHiB,EAIF;IACf,IAAIoB,kBAAJ;IACA,IAAIrK,OAAJ;IACA,IAAI6B,SAAS,CAACmI,SAAD,CAAb,EAA0B;MACxBK,kBAAkB,GAAGL,SAAS,CAACxK,SAA/B6K;MACArK,OAAO,GAAG,CAACgK,SAAD,CAAVhK;IACD,CAHD,MAGO;MACLqK,kBAAkB,GAAGL,SAArBK;MACArK,OAAO,GAAGiJ,YAAVjJ;IACD;IACD,MAAMJ,yBAAyB,CAC7B,eAD6B,EAE7B,IAAA,CAAKE,UAFwB,EAG7B,IAAIgE,WAAJ,EAAA,CAAkBC,GAAlB,CACEtB,KAAK,CAAC+H,8BAAN/H,CACE,IAAA,CAAKE,SADPF,EAEEyE,OAFFzE,EAGE,IAAA,CAAKjD,SAHPiD,EAIE4H,kBAJF5H,EAKEwG,YALFxG,CADF,CAH6B,EAY7B,IAAA,CAAKG,KAZwB,EAa7B,GAAG5C,OAb0B,CAA/B;EAeD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;EACmB,MAAXyK,WAAW,CACfvD,OADe,EAEf8C,SAFe,EAGff,YAHe,EAIA;IACf,IAAIoB,kBAAJ;IACA,IAAIrK,OAAJ;IACA,IAAI6B,SAAS,CAACmI,SAAD,CAAb,EAA0B;MACxBK,kBAAkB,GAAGL,SAAS,CAACxK,SAA/B6K;MACArK,OAAO,GAAG,CAACgK,SAAD,CAAVhK;IACD,CAHD,MAGO;MACLqK,kBAAkB,GAAGL,SAArBK;MACArK,OAAO,GAAGiJ,YAAVjJ;IACD;IACD,MAAMJ,yBAAyB,CAC7B,aAD6B,EAE7B,IAAA,CAAKE,UAFwB,EAG7B,IAAIgE,WAAJ,EAAA,CAAkBC,GAAlB,CACEtB,KAAK,CAACiI,4BAANjI,CACE,IAAA,CAAKE,SADPF,EAEEyE,OAFFzE,EAGE,IAAA,CAAKjD,SAHPiD,EAIE4H,kBAJF5H,EAKEwG,YALFxG,CADF,CAH6B,EAY7B,IAAA,CAAKG,KAZwB,EAa7B,GAAG5C,OAb0B,CAA/B;EAeD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACuB,MAAf2K,eAAe,CACnB5B,MADmB,EAEnBC,WAFmB,EAGnB1E,KAHmB,EAInB2E,YAJmB,EAKnB7D,MALmB,EAMnB5B,QANmB,EAOY;IAC/B,IAAI0F,cAAJ;IACA,IAAIlJ,OAAJ;IACA,IAAI6B,SAAS,CAACyC,KAAD,CAAb,EAAsB;MACpB4E,cAAc,GAAG5E,KAAK,CAAC9E,SAAvB0J;MACAlJ,OAAO,GAAG,CAACsE,KAAD,CAAVtE;IACD,CAHD,MAGO;MACLkJ,cAAc,GAAG5E,KAAjB4E;MACAlJ,OAAO,GAAGiJ,YAAVjJ;IACD;IACD,OAAO,MAAMJ,yBAAyB,CACpC,iBADoC,EAEpC,IAAA,CAAKE,UAF+B,EAGpC,IAAIgE,WAAJ,EAAA,CAAkBC,GAAlB,CACEtB,KAAK,CAACmI,gCAANnI,CACE,IAAA,CAAKE,SADPF,EAEEsG,MAFFtG,EAGE,IAAA,CAAKjD,SAHPiD,EAIEuG,WAJFvG,EAKEyG,cALFzG,EAMEwG,YANFxG,EAOE2C,MAPF3C,EAQEe,QARFf,CADF,CAHoC,EAepC,IAAA,CAAKG,KAf+B,EAgBpC,GAAG5C,OAhBiC,CAAtC;EAkBD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACsB,MAAd6K,cAAc,CAClB3D,OADkB,EAElBM,QAFkB,EAGlBlD,KAHkB,EAIlB2E,YAJkB,EAKlB7D,MALkB,EAMlB5B,QANkB,EAOH;IACf,IAAI0F,cAAJ;IACA,IAAIlJ,OAAJ;IACA,IAAI6B,SAAS,CAACyC,KAAD,CAAb,EAAsB;MACpB4E,cAAc,GAAG5E,KAAK,CAAC9E,SAAvB0J;MACAlJ,OAAO,GAAG,CAACsE,KAAD,CAAVtE;IACD,CAHD,MAGO;MACLkJ,cAAc,GAAG5E,KAAjB4E;MACAlJ,OAAO,GAAGiJ,YAAVjJ;IACD;IACD,MAAMJ,yBAAyB,CAC7B,gBAD6B,EAE7B,IAAA,CAAKE,UAFwB,EAG7B,IAAIgE,WAAJ,EAAA,CAAkBC,GAAlB,CACEtB,KAAK,CAACqI,+BAANrI,CACE,IAAA,CAAKE,SADPF,EAEEyE,OAFFzE,EAGE,IAAA,CAAKjD,SAHPiD,EAIE+E,QAJF/E,EAKEyG,cALFzG,EAMEwG,YANFxG,EAOE2C,MAPF3C,EAQEe,QARFf,CADF,CAH6B,EAe7B,IAAA,CAAKG,KAfwB,EAgB7B,GAAG5C,OAhB0B,CAA/B;EAkBD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACqB,MAAb+K,aAAa,CACjBhB,IADiB,EAEjBC,SAFiB,EAGjBf,YAHiB,EAIjB7D,MAJiB,EAKjB5B,QALiB,EAMF;IACf,IAAI0F,cAAJ;IACA,IAAIlJ,OAAJ;IACA,IAAI6B,SAAS,CAACmI,SAAD,CAAb,EAA0B;MACxBd,cAAc,GAAGc,SAAS,CAACxK,SAA3B0J;MACAlJ,OAAO,GAAG,CAACgK,SAAD,CAAVhK;IACD,CAHD,MAGO;MACLkJ,cAAc,GAAGc,SAAjBd;MACAlJ,OAAO,GAAGiJ,YAAVjJ;IACD;IACD,MAAMJ,yBAAyB,CAC7B,eAD6B,EAE7B,IAAA,CAAKE,UAFwB,EAG7B,IAAIgE,WAAJ,EAAA,CAAkBC,GAAlB,CACEtB,KAAK,CAACuI,8BAANvI,CACE,IAAA,CAAKE,SADPF,EAEE,IAAA,CAAKjD,SAFPiD,EAGEsH,IAHFtH,EAIEyG,cAJFzG,EAKEwG,YALFxG,EAME2C,MANF3C,EAOEe,QAPFf,CADF,CAH6B,EAc7B,IAAA,CAAKG,KAdwB,EAe7B,GAAG5C,OAf0B,CAA/B;EAiBD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACmB,MAAXiL,WAAW,CACf/D,OADe,EAEf5C,KAFe,EAGf2E,YAHe,EAIf7D,MAJe,EAKf5B,QALe,EAMA;IACf,IAAI0F,cAAJ;IACA,IAAIlJ,OAAJ;IACA,IAAI6B,SAAS,CAACyC,KAAD,CAAb,EAAsB;MACpB4E,cAAc,GAAG5E,KAAK,CAAC9E,SAAvB0J;MACAlJ,OAAO,GAAG,CAACsE,KAAD,CAAVtE;IACD,CAHD,MAGO;MACLkJ,cAAc,GAAG5E,KAAjB4E;MACAlJ,OAAO,GAAGiJ,YAAVjJ;IACD;IACD,MAAMJ,yBAAyB,CAC7B,aAD6B,EAE7B,IAAA,CAAKE,UAFwB,EAG7B,IAAIgE,WAAJ,EAAA,CAAkBC,GAAlB,CACEtB,KAAK,CAACyI,4BAANzI,CACE,IAAA,CAAKE,SADPF,EAEE,IAAA,CAAKjD,SAFPiD,EAGEyE,OAHFzE,EAIEyG,cAJFzG,EAKEwG,YALFxG,EAME2C,MANF3C,EAOEe,QAPFf,CADF,CAH6B,EAc7B,IAAA,CAAKG,KAdwB,EAe7B,GAAG5C,OAf0B,CAA/B;EAiBD;EAED;AACF;AACA;AACA;AACA;;EACkB,MAAVmL,UAAU,CAACC,aAAD,EAA0C;IACxD,MAAMxL,yBAAyB,CAC7B,YAD6B,EAE7B,IAAA,CAAKE,UAFwB,EAG7B,IAAIgE,WAAJ,EAAA,CAAkBC,GAAlB,CACEtB,KAAK,CAAC4I,2BAAN5I,CAAkC,IAAA,CAAKE,SAAvCF,EAAkD2I,aAAlD3I,CADF,CAH6B,EAM7B,IAAA,CAAKG,KANwB,CAA/B;EAQD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACkC,OAAzByB,yBAAyB,CAC9B1B,SAD8B,EAE9B2E,IAF8B,EAG9B9D,QAH8B,EAI9BF,aAJ8B,EAK9BC,eAL8B,EAMN;IACxB,IAAImC,IAAI,GAAG,CACT;MAACC,MAAM,EAAE2B,IAAT;MAAe1B,QAAQ,EAAE,KAAzB;MAAgCC,UAAU,EAAE;IAA5C,CADS,EAET;MAACF,MAAM,EAAEG,kBAAT;MAA6BF,QAAQ,EAAE,KAAvC;MAA8CC,UAAU,EAAE;IAA1D,CAFS,CAAX;IAIA,MAAMyF,iBAAiB,GAAG5L,MAAAA,CAAoB,CAC5CA,EAAAA,CAAgB,aAAhBA,CAD4C,EAE5CA,EAAAA,CAAgB,UAAhBA,CAF4C,EAG5C4C,SAAAA,CAAiB,eAAjBA,CAH4C,EAI5C5C,EAAAA,CAAgB,QAAhBA,CAJ4C,EAK5C4C,SAAAA,CAAiB,iBAAjBA,CAL4C,CAApB5C,CAA1B;IAOA,IAAIyG,IAAI,GAAG5G,MAAAA,CAAAA,MAAM,CAAC6B,KAAP7B,CAAa,IAAbA,CAAX;IACA;MACE,MAAMgM,YAAY,GAAG,iBAAiB,CAACnF,MAAlB,CACnB;QACEC,WAAW,EAAE,CADf;QACkB;QAChB7C,QAFF;QAGEF,aAAa,EAAE9C,cAAc,CAAC8C,aAAD,CAH/B;QAIEkI,MAAM,EAAEjI,eAAe,KAAK,IAApBA,GAA2B,CAA3BA,GAA+B,CAJzC;QAKEA,eAAe,EAAE/C,cAAc,CAAC+C,eAAe,IAAI,IAAInD,SAAJ,CAAc,CAAd,CAApB;MALjC,CADmB,EAQnB+F,IARmB,CAArB;MAUAA,IAAI,GAAGA,IAAI,CAACxE,KAALwE,CAAW,CAAXA,EAAcoF,YAAdpF,CAAPA;IACD;IAED,OAAO,IAAIsF,sBAAJ,CAA2B;MAChC/F,IADgC;MAEhC/C,SAFgC;MAGhCwD;IAHgC,CAA3B,CAAP;EAKD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EACqC,OAA5B1B,4BAA4B,CACjC9B,SADiC,EAEjC2E,IAFiC,EAGjCJ,OAHiC,EAIjC5C,KAJiC,EAKT;IACxB,MAAMoB,IAAI,GAAG,CACX;MAACC,MAAM,EAAEuB,OAAT;MAAkBtB,QAAQ,EAAE,KAA5B;MAAmCC,UAAU,EAAE;IAA/C,CADW,EAEX;MAACF,MAAM,EAAE2B,IAAT;MAAe1B,QAAQ,EAAE,KAAzB;MAAgCC,UAAU,EAAE;IAA5C,CAFW,EAGX;MAACF,MAAM,EAAErB,KAAT;MAAgBsB,QAAQ,EAAE,KAA1B;MAAiCC,UAAU,EAAE;IAA7C,CAHW,EAIX;MAACF,MAAM,EAAEG,kBAAT;MAA6BF,QAAQ,EAAE,KAAvC;MAA8CC,UAAU,EAAE;IAA1D,CAJW,CAAb;IAMA,MAAMK,UAAU,GAAGxG,MAAAA,CAAoB,CAACA,EAAAA,CAAgB,aAAhBA,CAAD,CAApBA,CAAnB;IACA,MAAMyG,IAAI,GAAG5G,MAAAA,CAAAA,MAAM,CAAC6B,KAAP7B,CAAa2G,UAAU,CAAChD,IAAxB3D,CAAb;IACA2G,UAAU,CAACE,MAAXF,CACE;MACEG,WAAW,EAAE,CADf,CAAA;IAAA,CADFH,EAIEC,IAJFD,CAAAA;IAOA,OAAO,IAAIuF,sBAAJ,CAA2B;MAChC/F,IADgC;MAEhC/C,SAFgC;MAGhCwD;IAHgC,CAA3B,CAAP;EAKD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACkC,OAAzBgD,yBAAyB,CAC9BxG,SAD8B,EAE9BoG,MAF8B,EAG9BC,WAH8B,EAI9B1E,KAJ8B,EAK9B2E,YAL8B,EAM9B7D,MAN8B,EAON;IACxB,MAAMc,UAAU,GAAGxG,MAAAA,CAAoB,CACrCA,EAAAA,CAAgB,aAAhBA,CADqC,EAErC4C,MAAAA,CAAc,QAAdA,CAFqC,CAApB5C,CAAnB;IAKA,MAAMyG,IAAI,GAAG5G,MAAAA,CAAAA,MAAM,CAAC6B,KAAP7B,CAAa2G,UAAU,CAAChD,IAAxB3D,CAAb;IACA2G,UAAU,CAACE,MAAXF,CACE;MACEG,WAAW,EAAE,CADf;MACkB;MAChBjB,MAAM,EAAE,IAAIzE,GAAJ,CAAQyE,MAAR,CAAA,CAAgB1E,QAAhB;IAFV,CADFwF,EAKEC,IALFD,CAAAA;IAQA,IAAIR,IAAI,GAAG,CACT;MAACC,MAAM,EAAEoD,MAAT;MAAiBnD,QAAQ,EAAE,KAA3B;MAAkCC,UAAU,EAAE;IAA9C,CADS,EAET;MAACF,MAAM,EAAEqD,WAAT;MAAsBpD,QAAQ,EAAE,KAAhC;MAAuCC,UAAU,EAAE;IAAnD,CAFS,CAAX;IAIA,IAAIoD,YAAY,CAAChI,MAAbgI,KAAwB,CAA5B,EAA+B;MAC7BvD,IAAI,CAACO,IAALP,CAAU;QACRC,MAAM,EAAErB,KADA;QAERsB,QAAQ,EAAE,IAFF;QAGRC,UAAU,EAAE;MAHJ,CAAVH,CAAAA;IAKD,CAND,MAMO;MACLA,IAAI,CAACO,IAALP,CAAU;QAACC,MAAM,EAAErB,KAAT;QAAgBsB,QAAQ,EAAE,KAA1B;QAAiCC,UAAU,EAAE;MAA7C,CAAVH,CAAAA;MACAuD,YAAY,CAAClD,OAAbkD,CAAqBjD,MAAM,IACzB,IAAI,CAACC,IAAL,CAAU;QACRN,MAAM,EAAEK,MAAM,CAACxG,SADP;QAERoG,QAAQ,EAAE,IAFF;QAGRC,UAAU,EAAE;MAHJ,CAAV,CADFoD,CAAAA;IAOD;IACD,OAAO,IAAIwC,sBAAJ,CAA2B;MAChC/F,IADgC;MAEhC/C,SAAS,EAAEA,SAFqB;MAGhCwD;IAHgC,CAA3B,CAAP;EAKD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACiC,OAAxBkD,wBAAwB,CAC7B1G,SAD6B,EAE7BuE,OAF6B,EAG7BM,QAH6B,EAI7BlD,KAJ6B,EAK7B2E,YAL6B,EAM7B7D,MAN6B,EAOL;IACxB,MAAMc,UAAU,GAAGxG,MAAAA,CAAoB,CACrCA,EAAAA,CAAgB,aAAhBA,CADqC,EAErC4C,MAAAA,CAAc,QAAdA,CAFqC,CAApB5C,CAAnB;IAKA,MAAMyG,IAAI,GAAG5G,MAAAA,CAAAA,MAAM,CAAC6B,KAAP7B,CAAa2G,UAAU,CAAChD,IAAxB3D,CAAb;IACA2G,UAAU,CAACE,MAAXF,CACE;MACEG,WAAW,EAAE,CADf;MACkB;MAChBjB,MAAM,EAAE,IAAIzE,GAAJ,CAAQyE,MAAR,CAAA,CAAgB1E,QAAhB;IAFV,CADFwF,EAKEC,IALFD,CAAAA;IAQA,IAAIR,IAAI,GAAG,CACT;MAACC,MAAM,EAAEuB,OAAT;MAAkBtB,QAAQ,EAAE,KAA5B;MAAmCC,UAAU,EAAE;IAA/C,CADS,EAET;MAACF,MAAM,EAAE6B,QAAT;MAAmB5B,QAAQ,EAAE,KAA7B;MAAoCC,UAAU,EAAE;IAAhD,CAFS,CAAX;IAIA,IAAIoD,YAAY,CAAChI,MAAbgI,KAAwB,CAA5B,EAA+B;MAC7BvD,IAAI,CAACO,IAALP,CAAU;QAACC,MAAM,EAAErB,KAAT;QAAgBsB,QAAQ,EAAE,IAA1B;QAAgCC,UAAU,EAAE;MAA5C,CAAVH,CAAAA;IACD,CAFD,MAEO;MACLA,IAAI,CAACO,IAALP,CAAU;QAACC,MAAM,EAAErB,KAAT;QAAgBsB,QAAQ,EAAE,KAA1B;QAAiCC,UAAU,EAAE;MAA7C,CAAVH,CAAAA;MACAuD,YAAY,CAAClD,OAAbkD,CAAqBjD,MAAM,IACzB,IAAI,CAACC,IAAL,CAAU;QACRN,MAAM,EAAEK,MAAM,CAACxG,SADP;QAERoG,QAAQ,EAAE,IAFF;QAGRC,UAAU,EAAE;MAHJ,CAAV,CADFoD,CAAAA;IAOD;IAED,OAAO,IAAIwC,sBAAJ,CAA2B;MAChC/F,IADgC;MAEhC/C,SAAS,EAAEA,SAFqB;MAGhCwD;IAHgC,CAA3B,CAAP;EAKD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EACgC,OAAvBoD,uBAAuB,CAC5B5G,SAD4B,EAE5BuE,OAF4B,EAG5B5C,KAH4B,EAI5B2E,YAJ4B,EAKJ;IACxB,MAAM/C,UAAU,GAAGxG,MAAAA,CAAoB,CAACA,EAAAA,CAAgB,aAAhBA,CAAD,CAApBA,CAAnB;IAEA,MAAMyG,IAAI,GAAG5G,MAAAA,CAAAA,MAAM,CAAC6B,KAAP7B,CAAa2G,UAAU,CAAChD,IAAxB3D,CAAb;IACA2G,UAAU,CAACE,MAAXF,CACE;MACEG,WAAW,EAAE,CADf,CAAA;IAAA,CADFH,EAIEC,IAJFD,CAAAA;IAOA,IAAIR,IAAI,GAAG,CAAC;MAACC,MAAM,EAAEuB,OAAT;MAAkBtB,QAAQ,EAAE,KAA5B;MAAmCC,UAAU,EAAE;IAA/C,CAAD,CAAX;IACA,IAAIoD,YAAY,CAAChI,MAAbgI,KAAwB,CAA5B,EAA+B;MAC7BvD,IAAI,CAACO,IAALP,CAAU;QAACC,MAAM,EAAErB,KAAT;QAAgBsB,QAAQ,EAAE,IAA1B;QAAgCC,UAAU,EAAE;MAA5C,CAAVH,CAAAA;IACD,CAFD,MAEO;MACLA,IAAI,CAACO,IAALP,CAAU;QAACC,MAAM,EAAErB,KAAT;QAAgBsB,QAAQ,EAAE,KAA1B;QAAiCC,UAAU,EAAE;MAA7C,CAAVH,CAAAA;MACAuD,YAAY,CAAClD,OAAbkD,CAAqBjD,MAAM,IACzB,IAAI,CAACC,IAAL,CAAU;QACRN,MAAM,EAAEK,MAAM,CAACxG,SADP;QAERoG,QAAQ,EAAE,IAFF;QAGRC,UAAU,EAAE;MAHJ,CAAV,CADFoD,CAAAA;IAOD;IAED,OAAO,IAAIwC,sBAAJ,CAA2B;MAChC/F,IADgC;MAEhC/C,SAAS,EAAEA,SAFqB;MAGhCwD;IAHgC,CAA3B,CAAP;EAKD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACsC,OAA7B0D,6BAA6B,CAClClH,SADkC,EAElCuE,OAFkC,EAGlCuC,YAHkC,EAIlCC,aAJkC,EAKlCC,gBALkC,EAMlCV,YANkC,EAOV;IACxB,MAAMqC,iBAAiB,GAAG5L,MAAAA,CAAoB,CAC5CA,EAAAA,CAAgB,aAAhBA,CAD4C,EAE5CA,EAAAA,CAAgB,eAAhBA,CAF4C,EAG5CA,EAAAA,CAAgB,QAAhBA,CAH4C,EAI5C4C,SAAAA,CAAiB,cAAjBA,CAJ4C,CAApB5C,CAA1B;IAOA,IAAIyG,IAAI,GAAG5G,MAAAA,CAAAA,MAAM,CAAC6B,KAAP7B,CAAa,IAAbA,CAAX;IACA;MACE,MAAMgM,YAAY,GAAG,iBAAiB,CAACnF,MAAlB,CACnB;QACEC,WAAW,EAAE,CADf;QACkB;QAChBqD,aAAa,EAAE3H,kBAAkB,CAAC2H,aAAD,CAFnC;QAGE8B,MAAM,EAAE/B,YAAY,KAAK,IAAjBA,GAAwB,CAAxBA,GAA4B,CAHtC;QAIEA,YAAY,EAAEjJ,cAAc,CAACiJ,YAAY,IAAI,IAAIrJ,SAAJ,CAAc,CAAd,CAAjB;MAJ9B,CADmB,EAOnB+F,IAPmB,CAArB;MASAA,IAAI,GAAGA,IAAI,CAACxE,KAALwE,CAAW,CAAXA,EAAcoF,YAAdpF,CAAPA;IACD;IAED,IAAIT,IAAI,GAAG,CAAC;MAACC,MAAM,EAAEuB,OAAT;MAAkBtB,QAAQ,EAAE,KAA5B;MAAmCC,UAAU,EAAE;IAA/C,CAAD,CAAX;IACA,IAAIoD,YAAY,CAAChI,MAAbgI,KAAwB,CAA5B,EAA+B;MAC7BvD,IAAI,CAACO,IAALP,CAAU;QAACC,MAAM,EAAEgE,gBAAT;QAA2B/D,QAAQ,EAAE,IAArC;QAA2CC,UAAU,EAAE;MAAvD,CAAVH,CAAAA;IACD,CAFD,MAEO;MACLA,IAAI,CAACO,IAALP,CAAU;QAACC,MAAM,EAAEgE,gBAAT;QAA2B/D,QAAQ,EAAE,KAArC;QAA4CC,UAAU,EAAE;MAAxD,CAAVH,CAAAA;MACAuD,YAAY,CAAClD,OAAbkD,CAAqBjD,MAAM,IACzB,IAAI,CAACC,IAAL,CAAU;QACRN,MAAM,EAAEK,MAAM,CAACxG,SADP;QAERoG,QAAQ,EAAE,IAFF;QAGRC,UAAU,EAAE;MAHJ,CAAV,CADFoD,CAAAA;IAOD;IAED,OAAO,IAAIwC,sBAAJ,CAA2B;MAChC/F,IADgC;MAEhC/C,SAAS,EAAEA,SAFqB;MAGhCwD;IAHgC,CAA3B,CAAP;EAKD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACgC,OAAvB8D,uBAAuB,CAC5BtH,SAD4B,EAE5B2E,IAF4B,EAG5ByC,IAH4B,EAI5BC,SAJ4B,EAK5Bf,YAL4B,EAM5B7D,MAN4B,EAOJ;IACxB,MAAMc,UAAU,GAAGxG,MAAAA,CAAoB,CACrCA,EAAAA,CAAgB,aAAhBA,CADqC,EAErC4C,MAAAA,CAAc,QAAdA,CAFqC,CAApB5C,CAAnB;IAKA,MAAMyG,IAAI,GAAG5G,MAAAA,CAAAA,MAAM,CAAC6B,KAAP7B,CAAa2G,UAAU,CAAChD,IAAxB3D,CAAb;IACA2G,UAAU,CAACE,MAAXF,CACE;MACEG,WAAW,EAAE,CADf;MACkB;MAChBjB,MAAM,EAAE,IAAIzE,GAAJ,CAAQyE,MAAR,CAAA,CAAgB1E,QAAhB;IAFV,CADFwF,EAKEC,IALFD,CAAAA;IAQA,IAAIR,IAAI,GAAG,CACT;MAACC,MAAM,EAAE2B,IAAT;MAAe1B,QAAQ,EAAE,KAAzB;MAAgCC,UAAU,EAAE;IAA5C,CADS,EAET;MAACF,MAAM,EAAEoE,IAAT;MAAenE,QAAQ,EAAE,KAAzB;MAAgCC,UAAU,EAAE;IAA5C,CAFS,CAAX;IAIA,IAAIoD,YAAY,CAAChI,MAAbgI,KAAwB,CAA5B,EAA+B;MAC7BvD,IAAI,CAACO,IAALP,CAAU;QACRC,MAAM,EAAEqE,SADA;QAERpE,QAAQ,EAAE,IAFF;QAGRC,UAAU,EAAE;MAHJ,CAAVH,CAAAA;IAKD,CAND,MAMO;MACLA,IAAI,CAACO,IAALP,CAAU;QAACC,MAAM,EAAEqE,SAAT;QAAoBpE,QAAQ,EAAE,KAA9B;QAAqCC,UAAU,EAAE;MAAjD,CAAVH,CAAAA;MACAuD,YAAY,CAAClD,OAAbkD,CAAqBjD,MAAM,IACzB,IAAI,CAACC,IAAL,CAAU;QACRN,MAAM,EAAEK,MAAM,CAACxG,SADP;QAERoG,QAAQ,EAAE,IAFF;QAGRC,UAAU,EAAE;MAHJ,CAAV,CADFoD,CAAAA;IAOD;IAED,OAAO,IAAIwC,sBAAJ,CAA2B;MAChC/F,IADgC;MAEhC/C,SAAS,EAAEA,SAFqB;MAGhCwD;IAHgC,CAA3B,CAAP;EAKD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAC8B,OAArBgE,qBAAqB,CAC1BxH,SAD0B,EAE1B2E,IAF0B,EAG1BJ,OAH0B,EAI1B5C,KAJ0B,EAK1B2E,YAL0B,EAM1B7D,MAN0B,EAOF;IACxB,MAAMc,UAAU,GAAGxG,MAAAA,CAAoB,CACrCA,EAAAA,CAAgB,aAAhBA,CADqC,EAErC4C,MAAAA,CAAc,QAAdA,CAFqC,CAApB5C,CAAnB;IAKA,MAAMyG,IAAI,GAAG5G,MAAAA,CAAAA,MAAM,CAAC6B,KAAP7B,CAAa2G,UAAU,CAAChD,IAAxB3D,CAAb;IACA2G,UAAU,CAACE,MAAXF,CACE;MACEG,WAAW,EAAE,CADf;MACkB;MAChBjB,MAAM,EAAE,IAAIzE,GAAJ,CAAQyE,MAAR,CAAA,CAAgB1E,QAAhB;IAFV,CADFwF,EAKEC,IALFD,CAAAA;IAQA,IAAIR,IAAI,GAAG,CACT;MAACC,MAAM,EAAEuB,OAAT;MAAkBtB,QAAQ,EAAE,KAA5B;MAAmCC,UAAU,EAAE;IAA/C,CADS,EAET;MAACF,MAAM,EAAE2B,IAAT;MAAe1B,QAAQ,EAAE,KAAzB;MAAgCC,UAAU,EAAE;IAA5C,CAFS,CAAX;IAIA,IAAIoD,YAAY,CAAChI,MAAbgI,KAAwB,CAA5B,EAA+B;MAC7BvD,IAAI,CAACO,IAALP,CAAU;QACRC,MAAM,EAAErB,KADA;QAERsB,QAAQ,EAAE,IAFF;QAGRC,UAAU,EAAE;MAHJ,CAAVH,CAAAA;IAKD,CAND,MAMO;MACLA,IAAI,CAACO,IAALP,CAAU;QAACC,MAAM,EAAErB,KAAT;QAAgBsB,QAAQ,EAAE,KAA1B;QAAiCC,UAAU,EAAE;MAA7C,CAAVH,CAAAA;MACAuD,YAAY,CAAClD,OAAbkD,CAAqBjD,MAAM,IACzB,IAAI,CAACC,IAAL,CAAU;QACRN,MAAM,EAAEK,MAAM,CAACxG,SADP;QAERoG,QAAQ,EAAE,IAFF;QAGRC,UAAU,EAAE;MAHJ,CAAV,CADFoD,CAAAA;IAOD;IAED,OAAO,IAAIwC,sBAAJ,CAA2B;MAChC/F,IADgC;MAEhC/C,SAAS,EAAEA,SAFqB;MAGhCwD;IAHgC,CAA3B,CAAP;EAKD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACsC,OAA7BmE,6BAA6B,CAClC3H,SADkC,EAElCuE,OAFkC,EAGlC6C,IAHkC,EAIlCzF,KAJkC,EAKlC2E,YALkC,EAMV;IACxB,MAAM/C,UAAU,GAAGxG,MAAAA,CAAoB,CAACA,EAAAA,CAAgB,aAAhBA,CAAD,CAApBA,CAAnB;IACA,MAAMyG,IAAI,GAAG5G,MAAAA,CAAAA,MAAM,CAAC6B,KAAP7B,CAAa2G,UAAU,CAAChD,IAAxB3D,CAAb;IACA2G,UAAU,CAACE,MAAXF,CACE;MACEG,WAAW,EAAE,CADf,CAAA;IAAA,CADFH,EAIEC,IAJFD,CAAAA;IAOA,IAAIR,IAAI,GAAG,CACT;MAACC,MAAM,EAAEuB,OAAT;MAAkBtB,QAAQ,EAAE,KAA5B;MAAmCC,UAAU,EAAE;IAA/C,CADS,EAET;MAACF,MAAM,EAAEoE,IAAT;MAAenE,QAAQ,EAAE,KAAzB;MAAgCC,UAAU,EAAE;IAA5C,CAFS,CAAX;IAIA,IAAIoD,YAAY,CAAChI,MAAbgI,KAAwB,CAA5B,EAA+B;MAC7BvD,IAAI,CAACO,IAALP,CAAU;QAACC,MAAM,EAAErB,KAAT;QAAgBsB,QAAQ,EAAE,IAA1B;QAAgCC,UAAU,EAAE;MAA5C,CAAVH,CAAAA;IACD,CAFD,MAEO;MACLA,IAAI,CAACO,IAALP,CAAU;QAACC,MAAM,EAAErB,KAAT;QAAgBsB,QAAQ,EAAE,KAA1B;QAAiCC,UAAU,EAAE;MAA7C,CAAVH,CAAAA;MACAuD,YAAY,CAAClD,OAAbkD,CAAqBjD,MAAM,IACzB,IAAI,CAACC,IAAL,CAAU;QACRN,MAAM,EAAEK,MAAM,CAACxG,SADP;QAERoG,QAAQ,EAAE,IAFF;QAGRC,UAAU,EAAE;MAHJ,CAAV,CADFoD,CAAAA;IAOD;IAED,OAAO,IAAIwC,sBAAJ,CAA2B;MAChC/F,IADgC;MAEhC/C,SAAS,EAAEA,SAFqB;MAGhCwD;IAHgC,CAA3B,CAAP;EAKD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACuC,OAA9BqE,8BAA8B,CACnC7H,SADmC,EAEnCuE,OAFmC,EAGnCI,IAHmC,EAInC0C,SAJmC,EAKnCf,YALmC,EAMX;IACxB,MAAM/C,UAAU,GAAGxG,MAAAA,CAAoB,CAACA,EAAAA,CAAgB,aAAhBA,CAAD,CAApBA,CAAnB;IACA,MAAMyG,IAAI,GAAG5G,MAAAA,CAAAA,MAAM,CAAC6B,KAAP7B,CAAa2G,UAAU,CAAChD,IAAxB3D,CAAb;IACA2G,UAAU,CAACE,MAAXF,CACE;MACEG,WAAW,EAAE,EADf,CAAA;IAAA,CADFH,EAIEC,IAJFD,CAAAA;IAOA,IAAIR,IAAI,GAAG,CACT;MAACC,MAAM,EAAEuB,OAAT;MAAkBtB,QAAQ,EAAE,KAA5B;MAAmCC,UAAU,EAAE;IAA/C,CADS,EAET;MAACF,MAAM,EAAE2B,IAAT;MAAe1B,QAAQ,EAAE,KAAzB;MAAgCC,UAAU,EAAE;IAA5C,CAFS,CAAX;IAIA,IAAIoD,YAAY,CAAChI,MAAbgI,KAAwB,CAA5B,EAA+B;MAC7BvD,IAAI,CAACO,IAALP,CAAU;QAACC,MAAM,EAAEqE,SAAT;QAAoBpE,QAAQ,EAAE,IAA9B;QAAoCC,UAAU,EAAE;MAAhD,CAAVH,CAAAA;IACD,CAFD,MAEO;MACLA,IAAI,CAACO,IAALP,CAAU;QAACC,MAAM,EAAEqE,SAAT;QAAoBpE,QAAQ,EAAE,KAA9B;QAAqCC,UAAU,EAAE;MAAjD,CAAVH,CAAAA;MACAuD,YAAY,CAAClD,OAAbkD,CAAqBjD,MAAM,IACzB,IAAI,CAACC,IAAL,CAAU;QACRN,MAAM,EAAEK,MAAM,CAACxG,SADP;QAERoG,QAAQ,EAAE,IAFF;QAGRC,UAAU,EAAE;MAHJ,CAAV,CADFoD,CAAAA;IAOD;IAED,OAAO,IAAIwC,sBAAJ,CAA2B;MAChC/F,IADgC;MAEhC/C,SAAS,EAAEA,SAFqB;MAGhCwD;IAHgC,CAA3B,CAAP;EAKD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACqC,OAA5BuE,4BAA4B,CACjC/H,SADiC,EAEjCuE,OAFiC,EAGjCI,IAHiC,EAIjC0C,SAJiC,EAKjCf,YALiC,EAMT;IACxB,MAAM/C,UAAU,GAAGxG,MAAAA,CAAoB,CAACA,EAAAA,CAAgB,aAAhBA,CAAD,CAApBA,CAAnB;IACA,MAAMyG,IAAI,GAAG5G,MAAAA,CAAAA,MAAM,CAAC6B,KAAP7B,CAAa2G,UAAU,CAAChD,IAAxB3D,CAAb;IACA2G,UAAU,CAACE,MAAXF,CACE;MACEG,WAAW,EAAE,EADf,CAAA;IAAA,CADFH,EAIEC,IAJFD,CAAAA;IAOA,IAAIR,IAAI,GAAG,CACT;MAACC,MAAM,EAAEuB,OAAT;MAAkBtB,QAAQ,EAAE,KAA5B;MAAmCC,UAAU,EAAE;IAA/C,CADS,EAET;MAACF,MAAM,EAAE2B,IAAT;MAAe1B,QAAQ,EAAE,KAAzB;MAAgCC,UAAU,EAAE;IAA5C,CAFS,CAAX;IAIA,IAAIoD,YAAY,CAAChI,MAAbgI,KAAwB,CAA5B,EAA+B;MAC7BvD,IAAI,CAACO,IAALP,CAAU;QAACC,MAAM,EAAEqE,SAAT;QAAoBpE,QAAQ,EAAE,IAA9B;QAAoCC,UAAU,EAAE;MAAhD,CAAVH,CAAAA;IACD,CAFD,MAEO;MACLA,IAAI,CAACO,IAALP,CAAU;QAACC,MAAM,EAAEqE,SAAT;QAAoBpE,QAAQ,EAAE,KAA9B;QAAqCC,UAAU,EAAE;MAAjD,CAAVH,CAAAA;MACAuD,YAAY,CAAClD,OAAbkD,CAAqBjD,MAAM,IACzB,IAAI,CAACC,IAAL,CAAU;QACRN,MAAM,EAAEK,MAAM,CAACxG,SADP;QAERoG,QAAQ,EAAE,IAFF;QAGRC,UAAU,EAAE;MAHJ,CAAV,CADFoD,CAAAA;IAOD;IAED,OAAO,IAAIwC,sBAAJ,CAA2B;MAChC/F,IADgC;MAEhC/C,SAAS,EAAEA,SAFqB;MAGhCwD;IAHgC,CAA3B,CAAP;EAKD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACyC,OAAhCyE,gCAAgC,CACrCjI,SADqC,EAErCoG,MAFqC,EAGrCzB,IAHqC,EAIrC0B,WAJqC,EAKrC1E,KALqC,EAMrC2E,YANqC,EAOrC7D,MAPqC,EAQrC5B,QARqC,EASb;IACxB,MAAM0C,UAAU,GAAGxG,MAAAA,CAAoB,CACrCA,EAAAA,CAAgB,aAAhBA,CADqC,EAErC4C,MAAAA,CAAc,QAAdA,CAFqC,EAGrC5C,EAAAA,CAAgB,UAAhBA,CAHqC,CAApBA,CAAnB;IAMA,MAAMyG,IAAI,GAAG5G,MAAAA,CAAAA,MAAM,CAAC6B,KAAP7B,CAAa2G,UAAU,CAAChD,IAAxB3D,CAAb;IACA2G,UAAU,CAACE,MAAXF,CACE;MACEG,WAAW,EAAE,EADf;MACmB;MACjBjB,MAAM,EAAE,IAAIzE,GAAJ,CAAQyE,MAAR,CAAA,CAAgB1E,QAAhB,EAFV;MAGE8C;IAHF,CADF0C,EAMEC,IANFD,CAAAA;IASA,IAAIR,IAAI,GAAG,CACT;MAACC,MAAM,EAAEoD,MAAT;MAAiBnD,QAAQ,EAAE,KAA3B;MAAkCC,UAAU,EAAE;IAA9C,CADS,EAET;MAACF,MAAM,EAAE2B,IAAT;MAAe1B,QAAQ,EAAE,KAAzB;MAAgCC,UAAU,EAAE;IAA5C,CAFS,EAGT;MAACF,MAAM,EAAEqD,WAAT;MAAsBpD,QAAQ,EAAE,KAAhC;MAAuCC,UAAU,EAAE;IAAnD,CAHS,CAAX;IAKA,IAAIoD,YAAY,CAAChI,MAAbgI,KAAwB,CAA5B,EAA+B;MAC7BvD,IAAI,CAACO,IAALP,CAAU;QACRC,MAAM,EAAErB,KADA;QAERsB,QAAQ,EAAE,IAFF;QAGRC,UAAU,EAAE;MAHJ,CAAVH,CAAAA;IAKD,CAND,MAMO;MACLA,IAAI,CAACO,IAALP,CAAU;QAACC,MAAM,EAAErB,KAAT;QAAgBsB,QAAQ,EAAE,KAA1B;QAAiCC,UAAU,EAAE;MAA7C,CAAVH,CAAAA;MACAuD,YAAY,CAAClD,OAAbkD,CAAqBjD,MAAM,IACzB,IAAI,CAACC,IAAL,CAAU;QACRN,MAAM,EAAEK,MAAM,CAACxG,SADP;QAERoG,QAAQ,EAAE,IAFF;QAGRC,UAAU,EAAE;MAHJ,CAAV,CADFoD,CAAAA;IAOD;IACD,OAAO,IAAIwC,sBAAJ,CAA2B;MAChC/F,IADgC;MAEhC/C,SAAS,EAAEA,SAFqB;MAGhCwD;IAHgC,CAA3B,CAAP;EAKD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACwC,OAA/B2E,+BAA+B,CACpCnI,SADoC,EAEpCuE,OAFoC,EAGpCI,IAHoC,EAIpCE,QAJoC,EAKpClD,KALoC,EAMpC2E,YANoC,EAOpC7D,MAPoC,EAQpC5B,QARoC,EASZ;IACxB,MAAM0C,UAAU,GAAGxG,MAAAA,CAAoB,CACrCA,EAAAA,CAAgB,aAAhBA,CADqC,EAErC4C,MAAAA,CAAc,QAAdA,CAFqC,EAGrC5C,EAAAA,CAAgB,UAAhBA,CAHqC,CAApBA,CAAnB;IAMA,MAAMyG,IAAI,GAAG5G,MAAAA,CAAAA,MAAM,CAAC6B,KAAP7B,CAAa2G,UAAU,CAAChD,IAAxB3D,CAAb;IACA2G,UAAU,CAACE,MAAXF,CACE;MACEG,WAAW,EAAE,EADf;MACmB;MACjBjB,MAAM,EAAE,IAAIzE,GAAJ,CAAQyE,MAAR,CAAA,CAAgB1E,QAAhB,EAFV;MAGE8C;IAHF,CADF0C,EAMEC,IANFD,CAAAA;IASA,IAAIR,IAAI,GAAG,CACT;MAACC,MAAM,EAAEuB,OAAT;MAAkBtB,QAAQ,EAAE,KAA5B;MAAmCC,UAAU,EAAE;IAA/C,CADS,EAET;MAACF,MAAM,EAAE2B,IAAT;MAAe1B,QAAQ,EAAE,KAAzB;MAAgCC,UAAU,EAAE;IAA5C,CAFS,EAGT;MAACF,MAAM,EAAE6B,QAAT;MAAmB5B,QAAQ,EAAE,KAA7B;MAAoCC,UAAU,EAAE;IAAhD,CAHS,CAAX;IAKA,IAAIoD,YAAY,CAAChI,MAAbgI,KAAwB,CAA5B,EAA+B;MAC7BvD,IAAI,CAACO,IAALP,CAAU;QAACC,MAAM,EAAErB,KAAT;QAAgBsB,QAAQ,EAAE,IAA1B;QAAgCC,UAAU,EAAE;MAA5C,CAAVH,CAAAA;IACD,CAFD,MAEO;MACLA,IAAI,CAACO,IAALP,CAAU;QAACC,MAAM,EAAErB,KAAT;QAAgBsB,QAAQ,EAAE,KAA1B;QAAiCC,UAAU,EAAE;MAA7C,CAAVH,CAAAA;MACAuD,YAAY,CAAClD,OAAbkD,CAAqBjD,MAAM,IACzB,IAAI,CAACC,IAAL,CAAU;QACRN,MAAM,EAAEK,MAAM,CAACxG,SADP;QAERoG,QAAQ,EAAE,IAFF;QAGRC,UAAU,EAAE;MAHJ,CAAV,CADFoD,CAAAA;IAOD;IAED,OAAO,IAAIwC,sBAAJ,CAA2B;MAChC/F,IADgC;MAEhC/C,SAAS,EAAEA,SAFqB;MAGhCwD;IAHgC,CAA3B,CAAP;EAKD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACuC,OAA9B6E,8BAA8B,CACnCrI,SADmC,EAEnC2E,IAFmC,EAGnCyC,IAHmC,EAInCC,SAJmC,EAKnCf,YALmC,EAMnC7D,MANmC,EAOnC5B,QAPmC,EAQX;IACxB,MAAM0C,UAAU,GAAGxG,MAAAA,CAAoB,CACrCA,EAAAA,CAAgB,aAAhBA,CADqC,EAErC4C,MAAAA,CAAc,QAAdA,CAFqC,EAGrC5C,EAAAA,CAAgB,UAAhBA,CAHqC,CAApBA,CAAnB;IAMA,MAAMyG,IAAI,GAAG5G,MAAAA,CAAAA,MAAM,CAAC6B,KAAP7B,CAAa2G,UAAU,CAAChD,IAAxB3D,CAAb;IACA2G,UAAU,CAACE,MAAXF,CACE;MACEG,WAAW,EAAE,EADf;MACmB;MACjBjB,MAAM,EAAE,IAAIzE,GAAJ,CAAQyE,MAAR,CAAA,CAAgB1E,QAAhB,EAFV;MAGE8C;IAHF,CADF0C,EAMEC,IANFD,CAAAA;IASA,IAAIR,IAAI,GAAG,CACT;MAACC,MAAM,EAAE2B,IAAT;MAAe1B,QAAQ,EAAE,KAAzB;MAAgCC,UAAU,EAAE;IAA5C,CADS,EAET;MAACF,MAAM,EAAEoE,IAAT;MAAenE,QAAQ,EAAE,KAAzB;MAAgCC,UAAU,EAAE;IAA5C,CAFS,CAAX;IAIA,IAAIoD,YAAY,CAAChI,MAAbgI,KAAwB,CAA5B,EAA+B;MAC7BvD,IAAI,CAACO,IAALP,CAAU;QACRC,MAAM,EAAEqE,SADA;QAERpE,QAAQ,EAAE,IAFF;QAGRC,UAAU,EAAE;MAHJ,CAAVH,CAAAA;IAKD,CAND,MAMO;MACLA,IAAI,CAACO,IAALP,CAAU;QAACC,MAAM,EAAEqE,SAAT;QAAoBpE,QAAQ,EAAE,KAA9B;QAAqCC,UAAU,EAAE;MAAjD,CAAVH,CAAAA;MACAuD,YAAY,CAAClD,OAAbkD,CAAqBjD,MAAM,IACzB,IAAI,CAACC,IAAL,CAAU;QACRN,MAAM,EAAEK,MAAM,CAACxG,SADP;QAERoG,QAAQ,EAAE,IAFF;QAGRC,UAAU,EAAE;MAHJ,CAAV,CADFoD,CAAAA;IAOD;IAED,OAAO,IAAIwC,sBAAJ,CAA2B;MAChC/F,IADgC;MAEhC/C,SAAS,EAAEA,SAFqB;MAGhCwD;IAHgC,CAA3B,CAAP;EAKD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACqC,OAA5B+E,4BAA4B,CACjCvI,SADiC,EAEjC2E,IAFiC,EAGjCJ,OAHiC,EAIjC5C,KAJiC,EAKjC2E,YALiC,EAMjC7D,MANiC,EAOjC5B,QAPiC,EAQT;IACxB,MAAM0C,UAAU,GAAGxG,MAAAA,CAAoB,CACrCA,EAAAA,CAAgB,aAAhBA,CADqC,EAErC4C,MAAAA,CAAc,QAAdA,CAFqC,EAGrC5C,EAAAA,CAAgB,UAAhBA,CAHqC,CAApBA,CAAnB;IAMA,MAAMyG,IAAI,GAAG5G,MAAAA,CAAAA,MAAM,CAAC6B,KAAP7B,CAAa2G,UAAU,CAAChD,IAAxB3D,CAAb;IACA2G,UAAU,CAACE,MAAXF,CACE;MACEG,WAAW,EAAE,EADf;MACmB;MACjBjB,MAAM,EAAE,IAAIzE,GAAJ,CAAQyE,MAAR,CAAA,CAAgB1E,QAAhB,EAFV;MAGE8C;IAHF,CADF0C,EAMEC,IANFD,CAAAA;IASA,IAAIR,IAAI,GAAG,CACT;MAACC,MAAM,EAAEuB,OAAT;MAAkBtB,QAAQ,EAAE,KAA5B;MAAmCC,UAAU,EAAE;IAA/C,CADS,EAET;MAACF,MAAM,EAAE2B,IAAT;MAAe1B,QAAQ,EAAE,KAAzB;MAAgCC,UAAU,EAAE;IAA5C,CAFS,CAAX;IAIA,IAAIoD,YAAY,CAAChI,MAAbgI,KAAwB,CAA5B,EAA+B;MAC7BvD,IAAI,CAACO,IAALP,CAAU;QACRC,MAAM,EAAErB,KADA;QAERsB,QAAQ,EAAE,IAFF;QAGRC,UAAU,EAAE;MAHJ,CAAVH,CAAAA;IAKD,CAND,MAMO;MACLA,IAAI,CAACO,IAALP,CAAU;QAACC,MAAM,EAAErB,KAAT;QAAgBsB,QAAQ,EAAE,KAA1B;QAAiCC,UAAU,EAAE;MAA7C,CAAVH,CAAAA;MACAuD,YAAY,CAAClD,OAAbkD,CAAqBjD,MAAM,IACzB,IAAI,CAACC,IAAL,CAAU;QACRN,MAAM,EAAEK,MAAM,CAACxG,SADP;QAERoG,QAAQ,EAAE,IAFF;QAGRC,UAAU,EAAE;MAHJ,CAAV,CADFoD,CAAAA;IAOD;IAED,OAAO,IAAIwC,sBAAJ,CAA2B;MAChC/F,IADgC;MAEhC/C,SAAS,EAAEA,SAFqB;MAGhCwD;IAHgC,CAA3B,CAAP;EAKD;EAED;AACF;AACA;AACA;AACA;AACA;;EACoC,OAA3BkF,2BAA2B,CAChC1I,SADgC,EAEhCyI,aAFgC,EAGR;IACxB,MAAMlF,UAAU,GAAGxG,MAAAA,CAAoB,CAACA,EAAAA,CAAgB,aAAhBA,CAAD,CAApBA,CAAnB;IAEA,MAAMyG,IAAI,GAAG5G,MAAAA,CAAAA,MAAM,CAAC6B,KAAP7B,CAAa2G,UAAU,CAAChD,IAAxB3D,CAAb;IACA2G,UAAU,CAACE,MAAXF,CACE;MACEG,WAAW,EAAE,EADf,CAAA;IAAA,CADFH,EAIEC,IAJFD,CAAAA;IAOA,IAAIR,IAAI,GAAG,CAAC;MAACC,MAAM,EAAEyF,aAAT;MAAwBxF,QAAQ,EAAE,KAAlC;MAAyCC,UAAU,EAAE;IAArD,CAAD,CAAX;IACA,OAAO,IAAI4F,sBAAJ,CAA2B;MAAC/F,IAAD;MAAO/C,SAAS,EAAEA,SAAlB;MAA6BwD;IAA7B,CAA3B,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACwC,aAAzBvB,yBAAyB,CACpC7B,mBADoC,EAEpCJ,SAFoC,EAGpC2E,IAHoC,EAIpChD,KAJoC,EAMhB;IAAA,IADpBoH,kBAAkB,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAY,KALM;IAOpC,IAAI,CAACA,kBAAD,IAAuB,CAACtL,SAAS,CAACuL,SAAVvL,CAAoBkE,KAAK,CAAC5D,QAAN4D,EAApBlE,CAA5B,EAAmE;MACjE,MAAM,IAAIoG,KAAJ,CAAW,sBAAqBlC,KAAK,CAAC5C,QAAN4C,EAAiB,EAAjD,CAAN;IACD;IACD,OAAO,CACL,MAAMlE,SAAS,CAACwL,kBAAVxL,CACJ,CAACkE,KAAK,CAAC5D,QAAN4D,EAAD,EAAmB3B,SAAS,CAACjC,QAAViC,EAAnB,EAAyC2E,IAAI,CAAC5G,QAAL4G,EAAzC,CADIlH,EAEJ2C,mBAFI3C,CADD,EAKL,CALK,CAAP;EAMD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACgD,OAAvC0E,uCAAuC,CAC5C/B,mBAD4C,EAE5CJ,SAF4C,EAG5C2E,IAH4C,EAI5CuE,iBAJ4C,EAK5CvH,KAL4C,EAM5C1B,KAN4C,EAOpB;IACxB,MAAMuD,IAAI,GAAG5G,MAAAA,CAAAA,MAAM,CAAC6B,KAAP7B,CAAa,CAAbA,CAAb;IAEA,IAAImG,IAAI,GAAG,CACT;MAACC,MAAM,EAAE/C,KAAT;MAAgBgD,QAAQ,EAAE,IAA1B;MAAgCC,UAAU,EAAE;IAA5C,CADS,EAET;MAACF,MAAM,EAAEkG,iBAAT;MAA4BjG,QAAQ,EAAE,KAAtC;MAA6CC,UAAU,EAAE;IAAzD,CAFS,EAGT;MAACF,MAAM,EAAErB,KAAT;MAAgBsB,QAAQ,EAAE,KAA1B;MAAiCC,UAAU,EAAE;IAA7C,CAHS,EAIT;MAACF,MAAM,EAAE2B,IAAT;MAAe1B,QAAQ,EAAE,KAAzB;MAAgCC,UAAU,EAAE;IAA5C,CAJS,EAKT;MAACF,MAAM,EAAEmG,aAAa,CAACnJ,SAAvB;MAAkCiD,QAAQ,EAAE,KAA5C;MAAmDC,UAAU,EAAE;IAA/D,CALS,EAMT;MAACF,MAAM,EAAEhD,SAAT;MAAoBiD,QAAQ,EAAE,KAA9B;MAAqCC,UAAU,EAAE;IAAjD,CANS,EAOT;MAACF,MAAM,EAAEG,kBAAT;MAA6BF,QAAQ,EAAE,KAAvC;MAA8CC,UAAU,EAAE;IAA1D,CAPS,CAAX;IAUA,OAAO,IAAI4F,sBAAJ,CAA2B;MAChC/F,IADgC;MAEhC/C,SAAS,EAAEI,mBAFqB;MAGhCoD;IAHgC,CAA3B,CAAP;EAKD;AA7/DgB","sourcesContent":["'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","export default (typeof global !== \"undefined\" ? global :\n  typeof self !== \"undefined\" ? self :\n  typeof window !== \"undefined\" ? window : {});","\nvar inherits;\nif (typeof Object.create === 'function'){\n  inherits = function inherits(ctor, superCtor) {\n    // implementation from standard node.js 'util' module\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  inherits = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\nexport default inherits;\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nimport process from 'process';\nvar formatRegExp = /%[sdj%]/g;\nexport function format(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexport function deprecate(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexport function debuglog(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = 0;\n      debugs[set] = function() {\n        var msg = format.apply(null, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nexport function inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    _extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nexport function isArray(ar) {\n  return Array.isArray(ar);\n}\n\nexport function isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\n\nexport function isNull(arg) {\n  return arg === null;\n}\n\nexport function isNullOrUndefined(arg) {\n  return arg == null;\n}\n\nexport function isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nexport function isString(arg) {\n  return typeof arg === 'string';\n}\n\nexport function isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\n\nexport function isUndefined(arg) {\n  return arg === void 0;\n}\n\nexport function isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\n\nexport function isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nexport function isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\n\nexport function isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\n\nexport function isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nexport function isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\n\nexport function isBuffer(maybeBuf) {\n  return Buffer.isBuffer(maybeBuf);\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexport function log() {\n  console.log('%s - %s', timestamp(), format.apply(null, arguments));\n}\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nimport inherits from './inherits';\nexport {inherits}\n\nexport function _extend(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nexport default {\n  inherits: inherits,\n  _extend: _extend,\n  log: log,\n  isBuffer: isBuffer,\n  isPrimitive: isPrimitive,\n  isFunction: isFunction,\n  isError: isError,\n  isDate: isDate,\n  isObject: isObject,\n  isRegExp: isRegExp,\n  isUndefined: isUndefined,\n  isSymbol: isSymbol,\n  isString: isString,\n  isNumber: isNumber,\n  isNullOrUndefined: isNullOrUndefined,\n  isNull: isNull,\n  isBoolean: isBoolean,\n  isArray: isArray,\n  inspect: inspect,\n  deprecate: deprecate,\n  format: format,\n  debuglog: debuglog\n}\n","\nfunction compare(a, b) {\n  if (a === b) {\n    return 0;\n  }\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) {\n    return -1;\n  }\n  if (y < x) {\n    return 1;\n  }\n  return 0;\n}\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    if (hasOwn.call(obj, key)) keys.push(key);\n  }\n  return keys;\n};\n// based on node assert, original notice:\n\n// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nimport {isBuffer} from 'buffer';\nimport {isPrimitive, inherits, isError, isFunction, isRegExp, isDate, inspect as utilInspect} from 'util';\nvar pSlice = Array.prototype.slice;\nvar _functionsHaveNames;\nfunction functionsHaveNames() {\n  if (typeof _functionsHaveNames !== 'undefined') {\n    return _functionsHaveNames;\n  }\n  return _functionsHaveNames = (function () {\n    return function foo() {}.name === 'foo';\n  }());\n}\nfunction pToString (obj) {\n  return Object.prototype.toString.call(obj);\n}\nfunction isView(arrbuf) {\n  if (isBuffer(arrbuf)) {\n    return false;\n  }\n  if (typeof global.ArrayBuffer !== 'function') {\n    return false;\n  }\n  if (typeof ArrayBuffer.isView === 'function') {\n    return ArrayBuffer.isView(arrbuf);\n  }\n  if (!arrbuf) {\n    return false;\n  }\n  if (arrbuf instanceof DataView) {\n    return true;\n  }\n  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {\n    return true;\n  }\n  return false;\n}\n// 1. The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nfunction assert(value, message) {\n  if (!value) fail(value, true, message, '==', ok);\n}\nexport default assert;\n\n// 2. The AssertionError is defined in assert.\n// new assert.AssertionError({ message: message,\n//                             actual: actual,\n//                             expected: expected })\n\nvar regex = /\\s*function\\s+([^\\(\\s]*)\\s*/;\n// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js\nfunction getName(func) {\n  if (!isFunction(func)) {\n    return;\n  }\n  if (functionsHaveNames()) {\n    return func.name;\n  }\n  var str = func.toString();\n  var match = str.match(regex);\n  return match && match[1];\n}\nassert.AssertionError = AssertionError;\nexport function AssertionError(options) {\n  this.name = 'AssertionError';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n  var stackStartFunction = options.stackStartFunction || fail;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, stackStartFunction);\n  } else {\n    // non v8 browsers so we can have a stacktrace\n    var err = new Error();\n    if (err.stack) {\n      var out = err.stack;\n\n      // try to strip useless frames\n      var fn_name = getName(stackStartFunction);\n      var idx = out.indexOf('\\n' + fn_name);\n      if (idx >= 0) {\n        // once we have located the function frame\n        // we need to strip out everything before it (and its line)\n        var next_line = out.indexOf('\\n', idx + 1);\n        out = out.substring(next_line + 1);\n      }\n\n      this.stack = out;\n    }\n  }\n}\n\n// assert.AssertionError instanceof Error\ninherits(AssertionError, Error);\n\nfunction truncate(s, n) {\n  if (typeof s === 'string') {\n    return s.length < n ? s : s.slice(0, n);\n  } else {\n    return s;\n  }\n}\nfunction inspect(something) {\n  if (functionsHaveNames() || !isFunction(something)) {\n    return utilInspect(something);\n  }\n  var rawname = getName(something);\n  var name = rawname ? ': ' + rawname : '';\n  return '[Function' +  name + ']';\n}\nfunction getMessage(self) {\n  return truncate(inspect(self.actual), 128) + ' ' +\n         self.operator + ' ' +\n         truncate(inspect(self.expected), 128);\n}\n\n// At present only the three keys mentioned above are used and\n// understood by the spec. Implementations or sub modules can pass\n// other keys to the AssertionError's constructor - they will be\n// ignored.\n\n// 3. All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided.  All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\nexport function fail(actual, expected, message, operator, stackStartFunction) {\n  throw new AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n}\n\n// EXTENSION! allows for well behaved errors defined elsewhere.\nassert.fail = fail;\n\n// 4. Pure assertion tests whether a value is truthy, as determined\n// by !!guard.\n// assert.ok(guard, message_opt);\n// This statement is equivalent to assert.equal(true, !!guard,\n// message_opt);. To test strictly for the value true, use\n// assert.strictEqual(true, guard, message_opt);.\n\nexport function ok(value, message) {\n  if (!value) fail(value, true, message, '==', ok);\n}\nassert.ok = ok;\nexport {ok as assert};\n\n// 5. The equality assertion tests shallow, coercive equality with\n// ==.\n// assert.equal(actual, expected, message_opt);\nassert.equal = equal;\nexport function equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, '==', equal);\n}\n\n// 6. The non-equality assertion tests for whether two objects are not equal\n// with != assert.notEqual(actual, expected, message_opt);\nassert.notEqual = notEqual;\nexport function notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, '!=', notEqual);\n  }\n}\n\n// 7. The equivalence assertion tests a deep equality relation.\n// assert.deepEqual(actual, expected, message_opt);\nassert.deepEqual = deepEqual;\nexport function deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'deepEqual', deepEqual);\n  }\n}\nassert.deepStrictEqual = deepStrictEqual;\nexport function deepStrictEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'deepStrictEqual', deepStrictEqual);\n  }\n}\n\nfunction _deepEqual(actual, expected, strict, memos) {\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n  } else if (isBuffer(actual) && isBuffer(expected)) {\n    return compare(actual, expected) === 0;\n\n  // 7.2. If the expected value is a Date object, the actual value is\n  // equivalent if it is also a Date object that refers to the same time.\n  } else if (isDate(actual) && isDate(expected)) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3 If the expected value is a RegExp object, the actual value is\n  // equivalent if it is also a RegExp object with the same source and\n  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n  } else if (isRegExp(actual) && isRegExp(expected)) {\n    return actual.source === expected.source &&\n           actual.global === expected.global &&\n           actual.multiline === expected.multiline &&\n           actual.lastIndex === expected.lastIndex &&\n           actual.ignoreCase === expected.ignoreCase;\n\n  // 7.4. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if ((actual === null || typeof actual !== 'object') &&\n             (expected === null || typeof expected !== 'object')) {\n    return strict ? actual === expected : actual == expected;\n\n  // If both values are instances of typed arrays, wrap their underlying\n  // ArrayBuffers in a Buffer each to increase performance\n  // This optimization requires the arrays to have the same type as checked by\n  // Object.prototype.toString (aka pToString). Never perform binary\n  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their\n  // bit patterns are not identical.\n  } else if (isView(actual) && isView(expected) &&\n             pToString(actual) === pToString(expected) &&\n             !(actual instanceof Float32Array ||\n               actual instanceof Float64Array)) {\n    return compare(new Uint8Array(actual.buffer),\n                   new Uint8Array(expected.buffer)) === 0;\n\n  // 7.5 For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else if (isBuffer(actual) !== isBuffer(expected)) {\n    return false;\n  } else {\n    memos = memos || {actual: [], expected: []};\n\n    var actualIndex = memos.actual.indexOf(actual);\n    if (actualIndex !== -1) {\n      if (actualIndex === memos.expected.indexOf(expected)) {\n        return true;\n      }\n    }\n\n    memos.actual.push(actual);\n    memos.expected.push(expected);\n\n    return objEquiv(actual, expected, strict, memos);\n  }\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\nfunction objEquiv(a, b, strict, actualVisitedObjects) {\n  if (a === null || a === undefined || b === null || b === undefined)\n    return false;\n  // if one is a primitive, the other must be same\n  if (isPrimitive(a) || isPrimitive(b))\n    return a === b;\n  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))\n    return false;\n  var aIsArgs = isArguments(a);\n  var bIsArgs = isArguments(b);\n  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))\n    return false;\n  if (aIsArgs) {\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return _deepEqual(a, b, strict);\n  }\n  var ka = objectKeys(a);\n  var kb = objectKeys(b);\n  var key, i;\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length !== kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] !== kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))\n      return false;\n  }\n  return true;\n}\n\n// 8. The non-equivalence assertion tests for any deep inequality.\n// assert.notDeepEqual(actual, expected, message_opt);\nassert.notDeepEqual = notDeepEqual;\nexport function notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'notDeepEqual', notDeepEqual);\n  }\n}\n\nassert.notDeepStrictEqual = notDeepStrictEqual;\nexport function notDeepStrictEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);\n  }\n}\n\n\n// 9. The strict equality assertion tests strict equality, as determined by ===.\n// assert.strictEqual(actual, expected, message_opt);\nassert.strictEqual = strictEqual;\nexport function strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, '===', strictEqual);\n  }\n}\n\n// 10. The strict non-equality assertion tests for strict inequality, as\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\nassert.notStrictEqual = notStrictEqual;\nexport function notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, '!==', notStrictEqual);\n  }\n}\n\nfunction expectedException(actual, expected) {\n  if (!actual || !expected) {\n    return false;\n  }\n\n  if (Object.prototype.toString.call(expected) == '[object RegExp]') {\n    return expected.test(actual);\n  }\n\n  try {\n    if (actual instanceof expected) {\n      return true;\n    }\n  } catch (e) {\n    // Ignore.  The instanceof check doesn't work for arrow functions.\n  }\n\n  if (Error.isPrototypeOf(expected)) {\n    return false;\n  }\n\n  return expected.call({}, actual) === true;\n}\n\nfunction _tryBlock(block) {\n  var error;\n  try {\n    block();\n  } catch (e) {\n    error = e;\n  }\n  return error;\n}\n\nfunction _throws(shouldThrow, block, expected, message) {\n  var actual;\n\n  if (typeof block !== 'function') {\n    throw new TypeError('\"block\" argument must be a function');\n  }\n\n  if (typeof expected === 'string') {\n    message = expected;\n    expected = null;\n  }\n\n  actual = _tryBlock(block);\n\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +\n            (message ? ' ' + message : '.');\n\n  if (shouldThrow && !actual) {\n    fail(actual, expected, 'Missing expected exception' + message);\n  }\n\n  var userProvidedMessage = typeof message === 'string';\n  var isUnwantedException = !shouldThrow && isError(actual);\n  var isUnexpectedException = !shouldThrow && actual && !expected;\n\n  if ((isUnwantedException &&\n      userProvidedMessage &&\n      expectedException(actual, expected)) ||\n      isUnexpectedException) {\n    fail(actual, expected, 'Got unwanted exception' + message);\n  }\n\n  if ((shouldThrow && actual && expected &&\n      !expectedException(actual, expected)) || (!shouldThrow && actual)) {\n    throw actual;\n  }\n}\n\n// 11. Expected to throw an error:\n// assert.throws(block, Error_opt, message_opt);\nassert.throws = throws;\nexport function throws(block, /*optional*/error, /*optional*/message) {\n  _throws(true, block, error, message);\n}\n\n// EXTENSION! This is annoying to write outside this module.\nassert.doesNotThrow = doesNotThrow;\nexport function doesNotThrow(block, /*optional*/error, /*optional*/message) {\n  _throws(false, block, error, message);\n}\n\nassert.ifError = ifError;\nexport function ifError(err) {\n  if (err) throw err;\n}\n","/* The MIT License (MIT)\n *\n * Copyright 2015-2018 Peter A. Bigot\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * Support for translating between Buffer instances and JavaScript\n * native types.\n *\n * {@link module:Layout~Layout|Layout} is the basis of a class\n * hierarchy that associates property names with sequences of encoded\n * bytes.\n *\n * Layouts are supported for these scalar (numeric) types:\n * * {@link module:Layout~UInt|Unsigned integers in little-endian\n *   format} with {@link module:Layout.u8|8-bit}, {@link\n *   module:Layout.u16|16-bit}, {@link module:Layout.u24|24-bit},\n *   {@link module:Layout.u32|32-bit}, {@link\n *   module:Layout.u40|40-bit}, and {@link module:Layout.u48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~UIntBE|Unsigned integers in big-endian\n *   format} with {@link module:Layout.u16be|16-bit}, {@link\n *   module:Layout.u24be|24-bit}, {@link module:Layout.u32be|32-bit},\n *   {@link module:Layout.u40be|40-bit}, and {@link\n *   module:Layout.u48be|48-bit} representation ranges;\n * * {@link module:Layout~Int|Signed integers in little-endian\n *   format} with {@link module:Layout.s8|8-bit}, {@link\n *   module:Layout.s16|16-bit}, {@link module:Layout.s24|24-bit},\n *   {@link module:Layout.s32|32-bit}, {@link\n *   module:Layout.s40|40-bit}, and {@link module:Layout.s48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~IntBE|Signed integers in big-endian format}\n *   with {@link module:Layout.s16be|16-bit}, {@link\n *   module:Layout.s24be|24-bit}, {@link module:Layout.s32be|32-bit},\n *   {@link module:Layout.s40be|40-bit}, and {@link\n *   module:Layout.s48be|48-bit} representation ranges;\n * * 64-bit integral values that decode to an exact (if magnitude is\n *   less than 2^53) or nearby integral Number in {@link\n *   module:Layout.nu64|unsigned little-endian}, {@link\n *   module:Layout.nu64be|unsigned big-endian}, {@link\n *   module:Layout.ns64|signed little-endian}, and {@link\n *   module:Layout.ns64be|unsigned big-endian} encodings;\n * * 32-bit floating point values with {@link\n *   module:Layout.f32|little-endian} and {@link\n *   module:Layout.f32be|big-endian} representations;\n * * 64-bit floating point values with {@link\n *   module:Layout.f64|little-endian} and {@link\n *   module:Layout.f64be|big-endian} representations;\n * * {@link module:Layout.const|Constants} that take no space in the\n *   encoded expression.\n *\n * and for these aggregate types:\n * * {@link module:Layout.seq|Sequence}s of instances of a {@link\n *   module:Layout~Layout|Layout}, with JavaScript representation as\n *   an Array and constant or data-dependent {@link\n *   module:Layout~Sequence#count|length};\n * * {@link module:Layout.struct|Structure}s that aggregate a\n *   heterogeneous sequence of {@link module:Layout~Layout|Layout}\n *   instances, with JavaScript representation as an Object;\n * * {@link module:Layout.union|Union}s that support multiple {@link\n *   module:Layout~VariantLayout|variant layouts} over a fixed\n *   (padded) or variable (not padded) span of bytes, using an\n *   unsigned integer at the start of the data or a separate {@link\n *   module:Layout.unionLayoutDiscriminator|layout element} to\n *   determine which layout to use when interpreting the buffer\n *   contents;\n * * {@link module:Layout.bits|BitStructure}s that contain a sequence\n *   of individual {@link\n *   module:Layout~BitStructure#addField|BitField}s packed into an 8,\n *   16, 24, or 32-bit unsigned integer starting at the least- or\n *   most-significant bit;\n * * {@link module:Layout.cstr|C strings} of varying length;\n * * {@link module:Layout.blob|Blobs} of fixed- or variable-{@link\n *   module:Layout~Blob#length|length} raw data.\n *\n * All {@link module:Layout~Layout|Layout} instances are immutable\n * after construction, to prevent internal state from becoming\n * inconsistent.\n *\n * @local Layout\n * @local ExternalLayout\n * @local GreedyCount\n * @local OffsetLayout\n * @local UInt\n * @local UIntBE\n * @local Int\n * @local IntBE\n * @local NearUInt64\n * @local NearUInt64BE\n * @local NearInt64\n * @local NearInt64BE\n * @local Float\n * @local FloatBE\n * @local Double\n * @local DoubleBE\n * @local Sequence\n * @local Structure\n * @local UnionDiscriminator\n * @local UnionLayoutDiscriminator\n * @local Union\n * @local VariantLayout\n * @local BitStructure\n * @local BitField\n * @local Boolean\n * @local Blob\n * @local CString\n * @local Constant\n * @local bindConstructorLayout\n * @module Layout\n * @license MIT\n * @author Peter A. Bigot\n * @see {@link https://github.com/pabigot/buffer-layout|buffer-layout on GitHub}\n */\n\n'use strict';\n\n/**\n * Base class for layout objects.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * Layout#encode|encode} or {@link Layout#decode|decode} functions.\n *\n * @param {Number} span - Initializer for {@link Layout#span|span}.  The\n * parameter must be an integer; a negative value signifies that the\n * span is {@link Layout#getSpan|value-specific}.\n *\n * @param {string} [property] - Initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n */\nclass Layout {\n  constructor(span, property) {\n    if (!Number.isInteger(span)) {\n      throw new TypeError('span must be an integer');\n    }\n\n    /** The span of the layout in bytes.\n     *\n     * Positive values are generally expected.\n     *\n     * Zero will only appear in {@link Constant}s and in {@link\n     * Sequence}s where the {@link Sequence#count|count} is zero.\n     *\n     * A negative value indicates that the span is value-specific, and\n     * must be obtained using {@link Layout#getSpan|getSpan}. */\n    this.span = span;\n\n    /** The property name used when this layout is represented in an\n     * Object.\n     *\n     * Used only for layouts that {@link Layout#decode|decode} to Object\n     * instances.  If left undefined the span of the unnamed layout will\n     * be treated as padding: it will not be mutated by {@link\n     * Layout#encode|encode} nor represented as a property in the\n     * decoded Object. */\n    this.property = property;\n  }\n\n  /** Function to create an Object into which decoded properties will\n   * be written.\n   *\n   * Used only for layouts that {@link Layout#decode|decode} to Object\n   * instances, which means:\n   * * {@link Structure}\n   * * {@link Union}\n   * * {@link VariantLayout}\n   * * {@link BitStructure}\n   *\n   * If left undefined the JavaScript representation of these layouts\n   * will be Object instances.\n   *\n   * See {@link bindConstructorLayout}.\n   */\n  makeDestinationObject() {\n    return {};\n  }\n\n  /**\n   * Decode from a Buffer into an JavaScript value.\n   *\n   * @param {Buffer} b - the buffer from which encoded data is read.\n   *\n   * @param {Number} [offset] - the offset at which the encoded data\n   * starts.  If absent a zero offset is inferred.\n   *\n   * @returns {(Number|Array|Object)} - the value of the decoded data.\n   *\n   * @abstract\n   */\n  decode(b, offset) {\n    throw new Error('Layout is abstract');\n  }\n\n  /**\n   * Encode a JavaScript value into a Buffer.\n   *\n   * @param {(Number|Array|Object)} src - the value to be encoded into\n   * the buffer.  The type accepted depends on the (sub-)type of {@link\n   * Layout}.\n   *\n   * @param {Buffer} b - the buffer into which encoded data will be\n   * written.\n   *\n   * @param {Number} [offset] - the offset at which the encoded data\n   * starts.  If absent a zero offset is inferred.\n   *\n   * @returns {Number} - the number of bytes encoded, including the\n   * space skipped for internal padding, but excluding data such as\n   * {@link Sequence#count|lengths} when stored {@link\n   * ExternalLayout|externally}.  This is the adjustment to `offset`\n   * producing the offset where data for the next layout would be\n   * written.\n   *\n   * @abstract\n   */\n  encode(src, b, offset) {\n    throw new Error('Layout is abstract');\n  }\n\n  /**\n   * Calculate the span of a specific instance of a layout.\n   *\n   * @param {Buffer} b - the buffer that contains an encoded instance.\n   *\n   * @param {Number} [offset] - the offset at which the encoded instance\n   * starts.  If absent a zero offset is inferred.\n   *\n   * @return {Number} - the number of bytes covered by the layout\n   * instance.  If this method is not overridden in a subclass the\n   * definition-time constant {@link Layout#span|span} will be\n   * returned.\n   *\n   * @throws {RangeError} - if the length of the value cannot be\n   * determined.\n   */\n  getSpan(b, offset) {\n    if (0 > this.span) {\n      throw new RangeError('indeterminate span');\n    }\n    return this.span;\n  }\n\n  /**\n   * Replicate the layout using a new property.\n   *\n   * This function must be used to get a structurally-equivalent layout\n   * with a different name since all {@link Layout} instances are\n   * immutable.\n   *\n   * **NOTE** This is a shallow copy.  All fields except {@link\n   * Layout#property|property} are strictly equal to the origin layout.\n   *\n   * @param {String} property - the value for {@link\n   * Layout#property|property} in the replica.\n   *\n   * @returns {Layout} - the copy with {@link Layout#property|property}\n   * set to `property`.\n   */\n  replicate(property) {\n    const rv = Object.create(this.constructor.prototype);\n    Object.assign(rv, this);\n    rv.property = property;\n    return rv;\n  }\n\n  /**\n   * Create an object from layout properties and an array of values.\n   *\n   * **NOTE** This function returns `undefined` if invoked on a layout\n   * that does not return its value as an Object.  Objects are\n   * returned for things that are a {@link Structure}, which includes\n   * {@link VariantLayout|variant layouts} if they are structures, and\n   * excludes {@link Union}s.  If you want this feature for a union\n   * you must use {@link Union.getVariant|getVariant} to select the\n   * desired layout.\n   *\n   * @param {Array} values - an array of values that correspond to the\n   * default order for properties.  As with {@link Layout#decode|decode}\n   * layout elements that have no property name are skipped when\n   * iterating over the array values.  Only the top-level properties are\n   * assigned; arguments are not assigned to properties of contained\n   * layouts.  Any unused values are ignored.\n   *\n   * @return {(Object|undefined)}\n   */\n  fromArray(values) {\n    return undefined;\n  }\n}\nexports.Layout = Layout;\n\n/* Provide text that carries a name (such as for a function that will\n * be throwing an error) annotated with the property of a given layout\n * (such as one for which the value was unacceptable).\n *\n * @ignore */\nfunction nameWithProperty(name, lo) {\n  if (lo.property) {\n    return name + '[' + lo.property + ']';\n  }\n  return name;\n}\nexports.nameWithProperty = nameWithProperty;\n\n/**\n * Augment a class so that instances can be encoded/decoded using a\n * given layout.\n *\n * Calling this function couples `Class` with `layout` in several ways:\n *\n * * `Class.layout_` becomes a static member property equal to `layout`;\n * * `layout.boundConstructor_` becomes a static member property equal\n *    to `Class`;\n * * The {@link Layout#makeDestinationObject|makeDestinationObject()}\n *   property of `layout` is set to a function that returns a `new\n *   Class()`;\n * * `Class.decode(b, offset)` becomes a static member function that\n *   delegates to {@link Layout#decode|layout.decode}.  The\n *   synthesized function may be captured and extended.\n * * `Class.prototype.encode(b, offset)` provides an instance member\n *   function that delegates to {@link Layout#encode|layout.encode}\n *   with `src` set to `this`.  The synthesized function may be\n *   captured and extended, but when the extension is invoked `this`\n *   must be explicitly bound to the instance.\n *\n * @param {class} Class - a JavaScript class with a nullary\n * constructor.\n *\n * @param {Layout} layout - the {@link Layout} instance used to encode\n * instances of `Class`.\n */\nfunction bindConstructorLayout(Class, layout) {\n  if ('function' !== typeof Class) {\n    throw new TypeError('Class must be constructor');\n  }\n  if (Class.hasOwnProperty('layout_')) {\n    throw new Error('Class is already bound to a layout');\n  }\n  if (!(layout && (layout instanceof Layout))) {\n    throw new TypeError('layout must be a Layout');\n  }\n  if (layout.hasOwnProperty('boundConstructor_')) {\n    throw new Error('layout is already bound to a constructor');\n  }\n  Class.layout_ = layout;\n  layout.boundConstructor_ = Class;\n  layout.makeDestinationObject = (() => new Class());\n  Object.defineProperty(Class.prototype, 'encode', {\n    value: function(b, offset) {\n      return layout.encode(this, b, offset);\n    },\n    writable: true,\n  });\n  Object.defineProperty(Class, 'decode', {\n    value: function(b, offset) {\n      return layout.decode(b, offset);\n    },\n    writable: true,\n  });\n}\nexports.bindConstructorLayout = bindConstructorLayout;\n\n/**\n * An object that behaves like a layout but does not consume space\n * within its containing layout.\n *\n * This is primarily used to obtain metadata about a member, such as a\n * {@link OffsetLayout} that can provide data about a {@link\n * Layout#getSpan|value-specific span}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support {@link\n * ExternalLayout#isCount|isCount} or other {@link Layout} functions.\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n * @augments {Layout}\n */\nclass ExternalLayout extends Layout {\n  /**\n   * Return `true` iff the external layout decodes to an unsigned\n   * integer layout.\n   *\n   * In that case it can be used as the source of {@link\n   * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},\n   * or as {@link UnionLayoutDiscriminator#layout|external union\n   * discriminators}.\n   *\n   * @abstract\n   */\n  isCount() {\n    throw new Error('ExternalLayout is abstract');\n  }\n}\n\n/**\n * An {@link ExternalLayout} that determines its {@link\n * Layout#decode|value} based on offset into and length of the buffer\n * on which it is invoked.\n *\n * *Factory*: {@link module:Layout.greedy|greedy}\n *\n * @param {Number} [elementSpan] - initializer for {@link\n * GreedyCount#elementSpan|elementSpan}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {ExternalLayout}\n */\nclass GreedyCount extends ExternalLayout {\n  constructor(elementSpan, property) {\n    if (undefined === elementSpan) {\n      elementSpan = 1;\n    }\n    if ((!Number.isInteger(elementSpan)) || (0 >= elementSpan)) {\n      throw new TypeError('elementSpan must be a (positive) integer');\n    }\n    super(-1, property);\n\n    /** The layout for individual elements of the sequence.  The value\n     * must be a positive integer.  If not provided, the value will be\n     * 1. */\n    this.elementSpan = elementSpan;\n  }\n\n  /** @override */\n  isCount() {\n    return true;\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const rem = b.length - offset;\n    return Math.floor(rem / this.elementSpan);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    return 0;\n  }\n}\n\n/**\n * An {@link ExternalLayout} that supports accessing a {@link Layout}\n * at a fixed offset from the start of another Layout.  The offset may\n * be before, within, or after the base layout.\n *\n * *Factory*: {@link module:Layout.offset|offset}\n *\n * @param {Layout} layout - initializer for {@link\n * OffsetLayout#layout|layout}, modulo `property`.\n *\n * @param {Number} [offset] - Initializes {@link\n * OffsetLayout#offset|offset}.  Defaults to zero.\n *\n * @param {string} [property] - Optional new property name for a\n * {@link Layout#replicate| replica} of `layout` to be used as {@link\n * OffsetLayout#layout|layout}.  If not provided the `layout` is used\n * unchanged.\n *\n * @augments {Layout}\n */\nclass OffsetLayout extends ExternalLayout {\n  constructor(layout, offset, property) {\n    if (!(layout instanceof Layout)) {\n      throw new TypeError('layout must be a Layout');\n    }\n\n    if (undefined === offset) {\n      offset = 0;\n    } else if (!Number.isInteger(offset)) {\n      throw new TypeError('offset must be integer or undefined');\n    }\n\n    super(layout.span, property || layout.property);\n\n    /** The subordinated layout. */\n    this.layout = layout;\n\n    /** The location of {@link OffsetLayout#layout} relative to the\n     * start of another layout.\n     *\n     * The value may be positive or negative, but an error will thrown\n     * if at the point of use it goes outside the span of the Buffer\n     * being accessed.  */\n    this.offset = offset;\n  }\n\n  /** @override */\n  isCount() {\n    return ((this.layout instanceof UInt)\n            || (this.layout instanceof UIntBE));\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return this.layout.decode(b, offset + this.offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return this.layout.encode(src, b, offset + this.offset);\n  }\n}\n\n/**\n * Represent an unsigned integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.u8|u8}, {@link\n *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link\n *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link\n *  module:Layout.u48|u48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UInt extends Layout {\n  constructor(span, property) {\n    super(span, property);\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readUIntLE(offset, this.span);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeUIntLE(src, offset, this.span);\n    return this.span;\n  }\n}\n\n/**\n * Represent an unsigned integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.u8be|u8be}, {@link\n * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},\n * {@link module:Layout.u32be|u32be}, {@link\n * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UIntBE extends Layout {\n  constructor(span, property) {\n    super( span, property);\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readUIntBE(offset, this.span);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeUIntBE(src, offset, this.span);\n    return this.span;\n  }\n}\n\n/**\n * Represent a signed integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.s8|s8}, {@link\n *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link\n *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link\n *  module:Layout.s48|s48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Int extends Layout {\n  constructor(span, property) {\n    super(span, property);\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readIntLE(offset, this.span);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeIntLE(src, offset, this.span);\n    return this.span;\n  }\n}\n\n/**\n * Represent a signed integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.s8be|s8be}, {@link\n * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},\n * {@link module:Layout.s32be|s32be}, {@link\n * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass IntBE extends Layout {\n  constructor(span, property) {\n    super(span, property);\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readIntBE(offset, this.span);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeIntBE(src, offset, this.span);\n    return this.span;\n  }\n}\n\nconst V2E32 = Math.pow(2, 32);\n\n/* True modulus high and low 32-bit words, where low word is always\n * non-negative. */\nfunction divmodInt64(src) {\n  const hi32 = Math.floor(src / V2E32);\n  const lo32 = src - (hi32 * V2E32);\n  return {hi32, lo32};\n}\n/* Reconstruct Number from quotient and non-negative remainder */\nfunction roundedInt64(hi32, lo32) {\n  return hi32 * V2E32 + lo32;\n}\n\n/**\n * Represent an unsigned 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64|nu64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64 extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const lo32 = b.readUInt32LE(offset);\n    const hi32 = b.readUInt32LE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const split = divmodInt64(src);\n    b.writeUInt32LE(split.lo32, offset);\n    b.writeUInt32LE(split.hi32, offset + 4);\n    return 8;\n  }\n}\n\n/**\n * Represent an unsigned 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64be|nu64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64BE extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const hi32 = b.readUInt32BE(offset);\n    const lo32 = b.readUInt32BE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const split = divmodInt64(src);\n    b.writeUInt32BE(split.hi32, offset);\n    b.writeUInt32BE(split.lo32, offset + 4);\n    return 8;\n  }\n}\n\n/**\n * Represent a signed 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64|ns64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64 extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const lo32 = b.readUInt32LE(offset);\n    const hi32 = b.readInt32LE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const split = divmodInt64(src);\n    b.writeUInt32LE(split.lo32, offset);\n    b.writeInt32LE(split.hi32, offset + 4);\n    return 8;\n  }\n}\n\n/**\n * Represent a signed 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64be|ns64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64BE extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const hi32 = b.readInt32BE(offset);\n    const lo32 = b.readUInt32BE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const split = divmodInt64(src);\n    b.writeInt32BE(split.hi32, offset);\n    b.writeUInt32BE(split.lo32, offset + 4);\n    return 8;\n  }\n}\n\n/**\n * Represent a 32-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f32|f32}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Float extends Layout {\n  constructor(property) {\n    super(4, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readFloatLE(offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeFloatLE(src, offset);\n    return 4;\n  }\n}\n\n/**\n * Represent a 32-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f32be|f32be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass FloatBE extends Layout {\n  constructor(property) {\n    super(4, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readFloatBE(offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeFloatBE(src, offset);\n    return 4;\n  }\n}\n\n/**\n * Represent a 64-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f64|f64}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Double extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readDoubleLE(offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeDoubleLE(src, offset);\n    return 8;\n  }\n}\n\n/**\n * Represent a 64-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f64be|f64be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass DoubleBE extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readDoubleBE(offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeDoubleBE(src, offset);\n    return 8;\n  }\n}\n\n/**\n * Represent a contiguous sequence of a specific layout as an Array.\n *\n * *Factory*: {@link module:Layout.seq|seq}\n *\n * @param {Layout} elementLayout - initializer for {@link\n * Sequence#elementLayout|elementLayout}.\n *\n * @param {(Number|ExternalLayout)} count - initializer for {@link\n * Sequence#count|count}.  The parameter must be either a positive\n * integer or an instance of {@link ExternalLayout}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Sequence extends Layout {\n  constructor(elementLayout, count, property) {\n    if (!(elementLayout instanceof Layout)) {\n      throw new TypeError('elementLayout must be a Layout');\n    }\n    if (!(((count instanceof ExternalLayout) && count.isCount())\n          || (Number.isInteger(count) && (0 <= count)))) {\n      throw new TypeError('count must be non-negative integer '\n                          + 'or an unsigned integer ExternalLayout');\n    }\n    let span = -1;\n    if ((!(count instanceof ExternalLayout))\n        && (0 < elementLayout.span)) {\n      span = count * elementLayout.span;\n    }\n\n    super(span, property);\n\n    /** The layout for individual elements of the sequence. */\n    this.elementLayout = elementLayout;\n\n    /** The number of elements in the sequence.\n     *\n     * This will be either a non-negative integer or an instance of\n     * {@link ExternalLayout} for which {@link\n     * ExternalLayout#isCount|isCount()} is `true`. */\n    this.count = count;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (0 <= this.span) {\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = 0;\n    let count = this.count;\n    if (count instanceof ExternalLayout) {\n      count = count.decode(b, offset);\n    }\n    if (0 < this.elementLayout.span) {\n      span = count * this.elementLayout.span;\n    } else {\n      let idx = 0;\n      while (idx < count) {\n        span += this.elementLayout.getSpan(b, offset + span);\n        ++idx;\n      }\n    }\n    return span;\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const rv = [];\n    let i = 0;\n    let count = this.count;\n    if (count instanceof ExternalLayout) {\n      count = count.decode(b, offset);\n    }\n    while (i < count) {\n      rv.push(this.elementLayout.decode(b, offset));\n      offset += this.elementLayout.getSpan(b, offset);\n      i += 1;\n    }\n    return rv;\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link Sequence}.\n   *\n   * **NOTE** If `src` is shorter than {@link Sequence#count|count} then\n   * the unused space in the buffer is left unchanged.  If `src` is\n   * longer than {@link Sequence#count|count} the unneeded elements are\n   * ignored.\n   *\n   * **NOTE** If {@link Layout#count|count} is an instance of {@link\n   * ExternalLayout} then the length of `src` will be encoded as the\n   * count after `src` is encoded. */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const elo = this.elementLayout;\n    const span = src.reduce((span, v) => {\n      return span + elo.encode(v, b, offset + span);\n    }, 0);\n    if (this.count instanceof ExternalLayout) {\n      this.count.encode(src.length, b, offset);\n    }\n    return span;\n  }\n}\n\n/**\n * Represent a contiguous sequence of arbitrary layout elements as an\n * Object.\n *\n * *Factory*: {@link module:Layout.struct|struct}\n *\n * **NOTE** The {@link Layout#span|span} of the structure is variable\n * if any layout in {@link Structure#fields|fields} has a variable\n * span.  When {@link Layout#encode|encoding} we must have a value for\n * all variable-length fields, or we wouldn't be able to figure out\n * how much space to use for storage.  We can only identify the value\n * for a field when it has a {@link Layout#property|property}.  As\n * such, although a structure may contain both unnamed fields and\n * variable-length fields, it cannot contain an unnamed\n * variable-length field.\n *\n * @param {Layout[]} fields - initializer for {@link\n * Structure#fields|fields}.  An error is raised if this contains a\n * variable-length field for which a {@link Layout#property|property}\n * is not defined.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @param {Boolean} [decodePrefixes] - initializer for {@link\n * Structure#decodePrefixes|property}.\n *\n * @throws {Error} - if `fields` contains an unnamed variable-length\n * layout.\n *\n * @augments {Layout}\n */\nclass Structure extends Layout {\n  constructor(fields, property, decodePrefixes) {\n    if (!(Array.isArray(fields)\n          && fields.reduce((acc, v) => acc && (v instanceof Layout), true))) {\n      throw new TypeError('fields must be array of Layout instances');\n    }\n    if (('boolean' === typeof property)\n        && (undefined === decodePrefixes)) {\n      decodePrefixes = property;\n      property = undefined;\n    }\n\n    /* Verify absence of unnamed variable-length fields. */\n    for (const fd of fields) {\n      if ((0 > fd.span)\n          && (undefined === fd.property)) {\n        throw new Error('fields cannot contain unnamed variable-length layout');\n      }\n    }\n\n    let span = -1;\n    try {\n      span = fields.reduce((span, fd) => span + fd.getSpan(), 0);\n    } catch (e) {\n    }\n    super(span, property);\n\n    /** The sequence of {@link Layout} values that comprise the\n     * structure.\n     *\n     * The individual elements need not be the same type, and may be\n     * either scalar or aggregate layouts.  If a member layout leaves\n     * its {@link Layout#property|property} undefined the\n     * corresponding region of the buffer associated with the element\n     * will not be mutated.\n     *\n     * @type {Layout[]} */\n    this.fields = fields;\n\n    /** Control behavior of {@link Layout#decode|decode()} given short\n     * buffers.\n     *\n     * In some situations a structure many be extended with additional\n     * fields over time, with older installations providing only a\n     * prefix of the full structure.  If this property is `true`\n     * decoding will accept those buffers and leave subsequent fields\n     * undefined, as long as the buffer ends at a field boundary.\n     * Defaults to `false`. */\n    this.decodePrefixes = !!decodePrefixes;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (0 <= this.span) {\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = 0;\n    try {\n      span = this.fields.reduce((span, fd) => {\n        const fsp = fd.getSpan(b, offset);\n        offset += fsp;\n        return span + fsp;\n      }, 0);\n    } catch (e) {\n      throw new RangeError('indeterminate span');\n    }\n    return span;\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const dest = this.makeDestinationObject();\n    for (const fd of this.fields) {\n      if (undefined !== fd.property) {\n        dest[fd.property] = fd.decode(b, offset);\n      }\n      offset += fd.getSpan(b, offset);\n      if (this.decodePrefixes\n          && (b.length === offset)) {\n        break;\n      }\n    }\n    return dest;\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link Structure}.\n   *\n   * If `src` is missing a property for a member with a defined {@link\n   * Layout#property|property} the corresponding region of the buffer is\n   * left unmodified. */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const firstOffset = offset;\n    let lastOffset = 0;\n    let lastWrote = 0;\n    for (const fd of this.fields) {\n      let span = fd.span;\n      lastWrote = (0 < span) ? span : 0;\n      if (undefined !== fd.property) {\n        const fv = src[fd.property];\n        if (undefined !== fv) {\n          lastWrote = fd.encode(fv, b, offset);\n          if (0 > span) {\n            /* Read the as-encoded span, which is not necessarily the\n             * same as what we wrote. */\n            span = fd.getSpan(b, offset);\n          }\n        }\n      }\n      lastOffset = offset;\n      offset += span;\n    }\n    /* Use (lastOffset + lastWrote) instead of offset because the last\n     * item may have had a dynamic length and we don't want to include\n     * the padding between it and the end of the space reserved for\n     * it. */\n    return (lastOffset + lastWrote) - firstOffset;\n  }\n\n  /** @override */\n  fromArray(values) {\n    const dest = this.makeDestinationObject();\n    for (const fd of this.fields) {\n      if ((undefined !== fd.property)\n          && (0 < values.length)) {\n        dest[fd.property] = values.shift();\n      }\n    }\n    return dest;\n  }\n\n  /**\n   * Get access to the layout of a given property.\n   *\n   * @param {String} property - the structure member of interest.\n   *\n   * @return {Layout} - the layout associated with `property`, or\n   * undefined if there is no such property.\n   */\n  layoutFor(property) {\n    if ('string' !== typeof property) {\n      throw new TypeError('property must be string');\n    }\n    for (const fd of this.fields) {\n      if (fd.property === property) {\n        return fd;\n      }\n    }\n  }\n\n  /**\n   * Get the offset of a structure member.\n   *\n   * @param {String} property - the structure member of interest.\n   *\n   * @return {Number} - the offset in bytes to the start of `property`\n   * within the structure, or undefined if `property` is not a field\n   * within the structure.  If the property is a member but follows a\n   * variable-length structure member a negative number will be\n   * returned.\n   */\n  offsetOf(property) {\n    if ('string' !== typeof property) {\n      throw new TypeError('property must be string');\n    }\n    let offset = 0;\n    for (const fd of this.fields) {\n      if (fd.property === property) {\n        return offset;\n      }\n      if (0 > fd.span) {\n        offset = -1;\n      } else if (0 <= offset) {\n        offset += fd.span;\n      }\n    }\n  }\n}\n\n/**\n * An object that can provide a {@link\n * Union#discriminator|discriminator} API for {@link Union}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * UnionDiscriminator#encode|encode} or {@link\n * UnionDiscriminator#decode|decode} functions.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}.\n *\n * @abstract\n */\nclass UnionDiscriminator {\n  constructor(property) {\n    /** The {@link Layout#property|property} to be used when the\n     * discriminator is referenced in isolation (generally when {@link\n     * Union#decode|Union decode} cannot delegate to a specific\n     * variant). */\n    this.property = property;\n  }\n\n  /** Analog to {@link Layout#decode|Layout decode} for union discriminators.\n   *\n   * The implementation of this method need not reference the buffer if\n   * variant information is available through other means. */\n  decode() {\n    throw new Error('UnionDiscriminator is abstract');\n  }\n\n  /** Analog to {@link Layout#decode|Layout encode} for union discriminators.\n   *\n   * The implementation of this method need not store the value if\n   * variant information is maintained through other means. */\n  encode() {\n    throw new Error('UnionDiscriminator is abstract');\n  }\n}\n\n/**\n * An object that can provide a {@link\n * UnionDiscriminator|discriminator API} for {@link Union} using an\n * unsigned integral {@link Layout} instance located either inside or\n * outside the union.\n *\n * @param {ExternalLayout} layout - initializes {@link\n * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link\n * ExternalLayout#isCount|isCount()}.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}, superseding the property\n * from `layout`, but defaulting to `variant` if neither `property`\n * nor layout provide a property name.\n *\n * @augments {UnionDiscriminator}\n */\nclass UnionLayoutDiscriminator extends UnionDiscriminator {\n  constructor(layout, property) {\n    if (!((layout instanceof ExternalLayout)\n          && layout.isCount())) {\n      throw new TypeError('layout must be an unsigned integer ExternalLayout');\n    }\n\n    super(property || layout.property || 'variant');\n\n    /** The {@link ExternalLayout} used to access the discriminator\n     * value. */\n    this.layout = layout;\n  }\n\n  /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n  decode(b, offset) {\n    return this.layout.decode(b, offset);\n  }\n\n  /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n  encode(src, b, offset) {\n    return this.layout.encode(src, b, offset);\n  }\n}\n\n/**\n * Represent any number of span-compatible layouts.\n *\n * *Factory*: {@link module:Layout.union|union}\n *\n * If the union has a {@link Union#defaultLayout|default layout} that\n * layout must have a non-negative {@link Layout#span|span}.  The span\n * of a fixed-span union includes its {@link\n * Union#discriminator|discriminator} if the variant is a {@link\n * Union#usesPrefixDiscriminator|prefix of the union}, plus the span\n * of its {@link Union#defaultLayout|default layout}.\n *\n * If the union does not have a default layout then the encoded span\n * of the union depends on the encoded span of its variant (which may\n * be fixed or variable).\n *\n * {@link VariantLayout#layout|Variant layout}s are added through\n * {@link Union#addVariant|addVariant}.  If the union has a default\n * layout, the span of the {@link VariantLayout#layout|layout\n * contained by the variant} must not exceed the span of the {@link\n * Union#defaultLayout|default layout} (minus the span of a {@link\n * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The\n * span of the variant will equal the span of the union itself.\n *\n * The variant for a buffer can only be identified from the {@link\n * Union#discriminator|discriminator} {@link\n * UnionDiscriminator#property|property} (in the case of the {@link\n * Union#defaultLayout|default layout}), or by using {@link\n * Union#getVariant|getVariant} and examining the resulting {@link\n * VariantLayout} instance.\n *\n * A variant compatible with a JavaScript object can be identified\n * using {@link Union#getSourceVariant|getSourceVariant}.\n *\n * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to\n * identify the layout used to interpret the union contents.  The\n * parameter must be an instance of {@link UnionDiscriminator}, an\n * {@link ExternalLayout} that satisfies {@link\n * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link\n * UIntBE}).  When a non-external layout element is passed the layout\n * appears at the start of the union.  In all cases the (synthesized)\n * {@link UnionDiscriminator} instance is recorded as {@link\n * Union#discriminator|discriminator}.\n *\n * @param {(Layout|null)} defaultLayout - initializer for {@link\n * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.\n * If `null` there is no default layout: the union has data-dependent\n * length and attempts to decode or encode unrecognized variants will\n * throw an exception.  A {@link Layout} instance must have a\n * non-negative {@link Layout#span|span}, and if it lacks a {@link\n * Layout#property|property} the {@link\n * Union#defaultLayout|defaultLayout} will be a {@link\n * Layout#replicate|replica} with property `content`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Union extends Layout {\n  constructor(discr, defaultLayout, property) {\n    const upv = ((discr instanceof UInt)\n               || (discr instanceof UIntBE));\n    if (upv) {\n      discr = new UnionLayoutDiscriminator(new OffsetLayout(discr));\n    } else if ((discr instanceof ExternalLayout)\n               && discr.isCount()) {\n      discr = new UnionLayoutDiscriminator(discr);\n    } else if (!(discr instanceof UnionDiscriminator)) {\n      throw new TypeError('discr must be a UnionDiscriminator '\n                          + 'or an unsigned integer layout');\n    }\n    if (undefined === defaultLayout) {\n      defaultLayout = null;\n    }\n    if (!((null === defaultLayout)\n          || (defaultLayout instanceof Layout))) {\n      throw new TypeError('defaultLayout must be null or a Layout');\n    }\n    if (null !== defaultLayout) {\n      if (0 > defaultLayout.span) {\n        throw new Error('defaultLayout must have constant span');\n      }\n      if (undefined === defaultLayout.property) {\n        defaultLayout = defaultLayout.replicate('content');\n      }\n    }\n\n    /* The union span can be estimated only if there's a default\n     * layout.  The union spans its default layout, plus any prefix\n     * variant layout.  By construction both layouts, if present, have\n     * non-negative span. */\n    let span = -1;\n    if (defaultLayout) {\n      span = defaultLayout.span;\n      if ((0 <= span) && upv) {\n        span += discr.layout.span;\n      }\n    }\n    super(span, property);\n\n    /** The interface for the discriminator value in isolation.\n     *\n     * This a {@link UnionDiscriminator} either passed to the\n     * constructor or synthesized from the `discr` constructor\n     * argument.  {@link\n     * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be\n     * `true` iff the `discr` parameter was a non-offset {@link\n     * Layout} instance. */\n    this.discriminator = discr;\n\n    /** `true` if the {@link Union#discriminator|discriminator} is the\n     * first field in the union.\n     *\n     * If `false` the discriminator is obtained from somewhere\n     * else. */\n    this.usesPrefixDiscriminator = upv;\n\n    /** The layout for non-discriminator content when the value of the\n     * discriminator is not recognized.\n     *\n     * This is the value passed to the constructor.  It is\n     * structurally equivalent to the second component of {@link\n     * Union#layout|layout} but may have a different property\n     * name. */\n    this.defaultLayout = defaultLayout;\n\n    /** A registry of allowed variants.\n     *\n     * The keys are unsigned integers which should be compatible with\n     * {@link Union.discriminator|discriminator}.  The property value\n     * is the corresponding {@link VariantLayout} instances assigned\n     * to this union by {@link Union#addVariant|addVariant}.\n     *\n     * **NOTE** The registry remains mutable so that variants can be\n     * {@link Union#addVariant|added} at any time.  Users should not\n     * manipulate the content of this property. */\n    this.registry = {};\n\n    /* Private variable used when invoking getSourceVariant */\n    let boundGetSourceVariant = this.defaultGetSourceVariant.bind(this);\n\n    /** Function to infer the variant selected by a source object.\n     *\n     * Defaults to {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may\n     * be overridden using {@link\n     * Union#configGetSourceVariant|configGetSourceVariant}.\n     *\n     * @param {Object} src - as with {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n     *\n     * @returns {(undefined|VariantLayout)} The default variant\n     * (`undefined`) or first registered variant that uses a property\n     * available in `src`. */\n    this.getSourceVariant = function(src) {\n      return boundGetSourceVariant(src);\n    };\n\n    /** Function to override the implementation of {@link\n     * Union#getSourceVariant|getSourceVariant}.\n     *\n     * Use this if the desired variant cannot be identified using the\n     * algorithm of {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n     *\n     * **NOTE** The provided function will be invoked bound to this\n     * Union instance, providing local access to {@link\n     * Union#registry|registry}.\n     *\n     * @param {Function} gsv - a function that follows the API of\n     * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */\n    this.configGetSourceVariant = function(gsv) {\n      boundGetSourceVariant = gsv.bind(this);\n    };\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (0 <= this.span) {\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    /* Default layouts always have non-negative span, so we don't have\n     * one and we have to recognize the variant which will in turn\n     * determine the span. */\n    const vlo = this.getVariant(b, offset);\n    if (!vlo) {\n      throw new Error('unable to determine span for unrecognized variant');\n    }\n    return vlo.getSpan(b, offset);\n  }\n\n  /**\n   * Method to infer a registered Union variant compatible with `src`.\n   *\n   * The first satisified rule in the following sequence defines the\n   * return value:\n   * * If `src` has properties matching the Union discriminator and\n   *   the default layout, `undefined` is returned regardless of the\n   *   value of the discriminator property (this ensures the default\n   *   layout will be used);\n   * * If `src` has a property matching the Union discriminator, the\n   *   value of the discriminator identifies a registered variant, and\n   *   either (a) the variant has no layout, or (b) `src` has the\n   *   variant's property, then the variant is returned (because the\n   *   source satisfies the constraints of the variant it identifies);\n   * * If `src` does not have a property matching the Union\n   *   discriminator, but does have a property matching a registered\n   *   variant, then the variant is returned (because the source\n   *   matches a variant without an explicit conflict);\n   * * An error is thrown (because we either can't identify a variant,\n   *   or we were explicitly told the variant but can't satisfy it).\n   *\n   * @param {Object} src - an object presumed to be compatible with\n   * the content of the Union.\n   *\n   * @return {(undefined|VariantLayout)} - as described above.\n   *\n   * @throws {Error} - if `src` cannot be associated with a default or\n   * registered variant.\n   */\n  defaultGetSourceVariant(src) {\n    if (src.hasOwnProperty(this.discriminator.property)) {\n      if (this.defaultLayout\n          && src.hasOwnProperty(this.defaultLayout.property)) {\n        return undefined;\n      }\n      const vlo = this.registry[src[this.discriminator.property]];\n      if (vlo\n          && ((!vlo.layout)\n              || src.hasOwnProperty(vlo.property))) {\n        return vlo;\n      }\n    } else {\n      for (const tag in this.registry) {\n        const vlo = this.registry[tag];\n        if (src.hasOwnProperty(vlo.property)) {\n          return vlo;\n        }\n      }\n    }\n    throw new Error('unable to infer src variant');\n  }\n\n  /** Implement {@link Layout#decode|decode} for {@link Union}.\n   *\n   * If the variant is {@link Union#addVariant|registered} the return\n   * value is an instance of that variant, with no explicit\n   * discriminator.  Otherwise the {@link Union#defaultLayout|default\n   * layout} is used to decode the content. */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let dest;\n    const dlo = this.discriminator;\n    const discr = dlo.decode(b, offset);\n    let clo = this.registry[discr];\n    if (undefined === clo) {\n      let contentOffset = 0;\n      clo = this.defaultLayout;\n      if (this.usesPrefixDiscriminator) {\n        contentOffset = dlo.layout.span;\n      }\n      dest = this.makeDestinationObject();\n      dest[dlo.property] = discr;\n      dest[clo.property] = this.defaultLayout.decode(b, offset + contentOffset);\n    } else {\n      dest = clo.decode(b, offset);\n    }\n    return dest;\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link Union}.\n   *\n   * This API assumes the `src` object is consistent with the union's\n   * {@link Union#defaultLayout|default layout}.  To encode variants\n   * use the appropriate variant-specific {@link VariantLayout#encode}\n   * method. */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const vlo = this.getSourceVariant(src);\n    if (undefined === vlo) {\n      const dlo = this.discriminator;\n      const clo = this.defaultLayout;\n      let contentOffset = 0;\n      if (this.usesPrefixDiscriminator) {\n        contentOffset = dlo.layout.span;\n      }\n      dlo.encode(src[dlo.property], b, offset);\n      return contentOffset + clo.encode(src[clo.property], b,\n                                        offset + contentOffset);\n    }\n    return vlo.encode(src, b, offset);\n  }\n\n  /** Register a new variant structure within a union.  The newly\n   * created variant is returned.\n   *\n   * @param {Number} variant - initializer for {@link\n   * VariantLayout#variant|variant}.\n   *\n   * @param {Layout} layout - initializer for {@link\n   * VariantLayout#layout|layout}.\n   *\n   * @param {String} property - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @return {VariantLayout} */\n  addVariant(variant, layout, property) {\n    const rv = new VariantLayout(this, variant, layout, property);\n    this.registry[variant] = rv;\n    return rv;\n  }\n\n  /**\n   * Get the layout associated with a registered variant.\n   *\n   * If `vb` does not produce a registered variant the function returns\n   * `undefined`.\n   *\n   * @param {(Number|Buffer)} vb - either the variant number, or a\n   * buffer from which the discriminator is to be read.\n   *\n   * @param {Number} offset - offset into `vb` for the start of the\n   * union.  Used only when `vb` is an instance of {Buffer}.\n   *\n   * @return {({VariantLayout}|undefined)}\n   */\n  getVariant(vb, offset) {\n    let variant = vb;\n    if (Buffer.isBuffer(vb)) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n      variant = this.discriminator.decode(vb, offset);\n    }\n    return this.registry[variant];\n  }\n}\n\n/**\n * Represent a specific variant within a containing union.\n *\n * **NOTE** The {@link Layout#span|span} of the variant may include\n * the span of the {@link Union#discriminator|discriminator} used to\n * identify it, but values read and written using the variant strictly\n * conform to the content of {@link VariantLayout#layout|layout}.\n *\n * **NOTE** User code should not invoke this constructor directly.  Use\n * the union {@link Union#addVariant|addVariant} helper method.\n *\n * @param {Union} union - initializer for {@link\n * VariantLayout#union|union}.\n *\n * @param {Number} variant - initializer for {@link\n * VariantLayout#variant|variant}.\n *\n * @param {Layout} [layout] - initializer for {@link\n * VariantLayout#layout|layout}.  If absent the variant carries no\n * data.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.  Unlike many other layouts, variant\n * layouts normally include a property name so they can be identified\n * within their containing {@link Union}.  The property identifier may\n * be absent only if `layout` is is absent.\n *\n * @augments {Layout}\n */\nclass VariantLayout extends Layout {\n  constructor(union, variant, layout, property) {\n    if (!(union instanceof Union)) {\n      throw new TypeError('union must be a Union');\n    }\n    if ((!Number.isInteger(variant)) || (0 > variant)) {\n      throw new TypeError('variant must be a (non-negative) integer');\n    }\n    if (('string' === typeof layout)\n        && (undefined === property)) {\n      property = layout;\n      layout = null;\n    }\n    if (layout) {\n      if (!(layout instanceof Layout)) {\n        throw new TypeError('layout must be a Layout');\n      }\n      if ((null !== union.defaultLayout)\n          && (0 <= layout.span)\n          && (layout.span > union.defaultLayout.span)) {\n        throw new Error('variant span exceeds span of containing union');\n      }\n      if ('string' !== typeof property) {\n        throw new TypeError('variant must have a String property');\n      }\n    }\n    let span = union.span;\n    if (0 > union.span) {\n      span = layout ? layout.span : 0;\n      if ((0 <= span) && union.usesPrefixDiscriminator) {\n        span += union.discriminator.layout.span;\n      }\n    }\n    super(span, property);\n\n    /** The {@link Union} to which this variant belongs. */\n    this.union = union;\n\n    /** The unsigned integral value identifying this variant within\n     * the {@link Union#discriminator|discriminator} of the containing\n     * union. */\n    this.variant = variant;\n\n    /** The {@link Layout} to be used when reading/writing the\n     * non-discriminator part of the {@link\n     * VariantLayout#union|union}.  If `null` the variant carries no\n     * data. */\n    this.layout = layout || null;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (0 <= this.span) {\n      /* Will be equal to the containing union span if that is not\n       * variable. */\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let contentOffset = 0;\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    }\n    /* Span is defined solely by the variant (and prefix discriminator) */\n    return contentOffset + this.layout.getSpan(b, offset + contentOffset);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    const dest = this.makeDestinationObject();\n    if (undefined === offset) {\n      offset = 0;\n    }\n    if (this !== this.union.getVariant(b, offset)) {\n      throw new Error('variant mismatch');\n    }\n    let contentOffset = 0;\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    }\n    if (this.layout) {\n      dest[this.property] = this.layout.decode(b, offset + contentOffset);\n    } else if (this.property) {\n      dest[this.property] = true;\n    } else if (this.union.usesPrefixDiscriminator) {\n      dest[this.union.discriminator.property] = this.variant;\n    }\n    return dest;\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let contentOffset = 0;\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    }\n    if (this.layout\n        && (!src.hasOwnProperty(this.property))) {\n      throw new TypeError('variant lacks property ' + this.property);\n    }\n    this.union.discriminator.encode(this.variant, b, offset);\n    let span = contentOffset;\n    if (this.layout) {\n      this.layout.encode(src[this.property], b, offset + contentOffset);\n      span += this.layout.getSpan(b, offset + contentOffset);\n      if ((0 <= this.union.span)\n          && (span > this.union.span)) {\n        throw new Error('encoded variant overruns containing union');\n      }\n    }\n    return span;\n  }\n\n  /** Delegate {@link Layout#fromArray|fromArray} to {@link\n   * VariantLayout#layout|layout}. */\n  fromArray(values) {\n    if (this.layout) {\n      return this.layout.fromArray(values);\n    }\n  }\n}\n\n/** JavaScript chose to define bitwise operations as operating on\n * signed 32-bit values in 2's complement form, meaning any integer\n * with bit 31 set is going to look negative.  For right shifts that's\n * not a problem, because `>>>` is a logical shift, but for every\n * other bitwise operator we have to compensate for possible negative\n * results. */\nfunction fixBitwiseResult(v) {\n  if (0 > v) {\n    v += 0x100000000;\n  }\n  return v;\n}\n\n/**\n * Contain a sequence of bit fields as an unsigned integer.\n *\n * *Factory*: {@link module:Layout.bits|bits}\n *\n * This is a container element; within it there are {@link BitField}\n * instances that provide the extracted properties.  The container\n * simply defines the aggregate representation and its bit ordering.\n * The representation is an object containing properties with numeric\n * or {@link Boolean} values.\n *\n * {@link BitField}s are added with the {@link\n * BitStructure#addField|addField} and {@link\n * BitStructure#addBoolean|addBoolean} methods.\n\n * @param {Layout} word - initializer for {@link\n * BitStructure#word|word}.  The parameter must be an instance of\n * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.\n *\n * @param {bool} [msb] - `true` if the bit numbering starts at the\n * most significant bit of the containing word; `false` (default) if\n * it starts at the least significant bit of the containing word.  If\n * the parameter at this position is a string and `property` is\n * `undefined` the value of this argument will instead be used as the\n * value of `property`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass BitStructure extends Layout {\n  constructor(word, msb, property) {\n    if (!((word instanceof UInt)\n          || (word instanceof UIntBE))) {\n      throw new TypeError('word must be a UInt or UIntBE layout');\n    }\n    if (('string' === typeof msb)\n        && (undefined === property)) {\n      property = msb;\n      msb = undefined;\n    }\n    if (4 < word.span) {\n      throw new RangeError('word cannot exceed 32 bits');\n    }\n    super(word.span, property);\n\n    /** The layout used for the packed value.  {@link BitField}\n     * instances are packed sequentially depending on {@link\n     * BitStructure#msb|msb}. */\n    this.word = word;\n\n    /** Whether the bit sequences are packed starting at the most\n     * significant bit growing down (`true`), or the least significant\n     * bit growing up (`false`).\n     *\n     * **NOTE** Regardless of this value, the least significant bit of\n     * any {@link BitField} value is the least significant bit of the\n     * corresponding section of the packed value. */\n    this.msb = !!msb;\n\n    /** The sequence of {@link BitField} layouts that comprise the\n     * packed structure.\n     *\n     * **NOTE** The array remains mutable to allow fields to be {@link\n     * BitStructure#addField|added} after construction.  Users should\n     * not manipulate the content of this property.*/\n    this.fields = [];\n\n    /* Storage for the value.  Capture a variable instead of using an\n     * instance property because we don't want anything to change the\n     * value without going through the mutator. */\n    let value = 0;\n    this._packedSetValue = function(v) {\n      value = fixBitwiseResult(v);\n      return this;\n    };\n    this._packedGetValue = function() {\n      return value;\n    };\n  }\n\n  /** @override */\n  decode(b, offset) {\n    const dest = this.makeDestinationObject();\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const value = this.word.decode(b, offset);\n    this._packedSetValue(value);\n    for (const fd of this.fields) {\n      if (undefined !== fd.property) {\n        dest[fd.property] = fd.decode(value);\n      }\n    }\n    return dest;\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link BitStructure}.\n   *\n   * If `src` is missing a property for a member with a defined {@link\n   * Layout#property|property} the corresponding region of the packed\n   * value is left unmodified.  Unused bits are also left unmodified. */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const value = this.word.decode(b, offset);\n    this._packedSetValue(value);\n    for (const fd of this.fields) {\n      if (undefined !== fd.property) {\n        const fv = src[fd.property];\n        if (undefined !== fv) {\n          fd.encode(fv);\n        }\n      }\n    }\n    return this.word.encode(this._packedGetValue(), b, offset);\n  }\n\n  /** Register a new bitfield with a containing bit structure.  The\n   * resulting bitfield is returned.\n   *\n   * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n   *\n   * @param {string} property - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @return {BitField} */\n  addField(bits, property) {\n    const bf = new BitField(this, bits, property);\n    this.fields.push(bf);\n    return bf;\n  }\n\n  /** As with {@link BitStructure#addField|addField} for single-bit\n   * fields with `boolean` value representation.\n   *\n   * @param {string} property - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @return {Boolean} */\n  addBoolean(property) {\n    // This is my Boolean, not the Javascript one.\n    // eslint-disable-next-line no-new-wrappers\n    const bf = new Boolean(this, property);\n    this.fields.push(bf);\n    return bf;\n  }\n\n  /**\n   * Get access to the bit field for a given property.\n   *\n   * @param {String} property - the bit field of interest.\n   *\n   * @return {BitField} - the field associated with `property`, or\n   * undefined if there is no such property.\n   */\n  fieldFor(property) {\n    if ('string' !== typeof property) {\n      throw new TypeError('property must be string');\n    }\n    for (const fd of this.fields) {\n      if (fd.property === property) {\n        return fd;\n      }\n    }\n  }\n}\n\n/**\n * Represent a sequence of bits within a {@link BitStructure}.\n *\n * All bit field values are represented as unsigned integers.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addField|addField} helper\n * method.\n *\n * **NOTE** BitField instances are not instances of {@link Layout}\n * since {@link Layout#span|span} measures 8-bit units.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n */\nclass BitField {\n  constructor(container, bits, property) {\n    if (!(container instanceof BitStructure)) {\n      throw new TypeError('container must be a BitStructure');\n    }\n    if ((!Number.isInteger(bits)) || (0 >= bits)) {\n      throw new TypeError('bits must be positive integer');\n    }\n    const totalBits = 8 * container.span;\n    const usedBits = container.fields.reduce((sum, fd) => sum + fd.bits, 0);\n    if ((bits + usedBits) > totalBits) {\n      throw new Error('bits too long for span remainder ('\n                      + (totalBits - usedBits) + ' of '\n                      + totalBits + ' remain)');\n    }\n\n    /** The {@link BitStructure} instance to which this bit field\n     * belongs. */\n    this.container = container;\n\n    /** The span of this value in bits. */\n    this.bits = bits;\n\n    /** A mask of {@link BitField#bits|bits} bits isolating value bits\n     * that fit within the field.\n     *\n     * That is, it masks a value that has not yet been shifted into\n     * position within its containing packed integer. */\n    this.valueMask = (1 << bits) - 1;\n    if (32 === bits) { // shifted value out of range\n      this.valueMask = 0xFFFFFFFF;\n    }\n\n    /** The offset of the value within the containing packed unsigned\n     * integer.  The least significant bit of the packed value is at\n     * offset zero, regardless of bit ordering used. */\n    this.start = usedBits;\n    if (this.container.msb) {\n      this.start = totalBits - usedBits - bits;\n    }\n\n    /** A mask of {@link BitField#bits|bits} isolating the field value\n     * within the containing packed unsigned integer. */\n    this.wordMask = fixBitwiseResult(this.valueMask << this.start);\n\n    /** The property name used when this bitfield is represented in an\n     * Object.\n     *\n     * Intended to be functionally equivalent to {@link\n     * Layout#property}.\n     *\n     * If left undefined the corresponding span of bits will be\n     * treated as padding: it will not be mutated by {@link\n     * Layout#encode|encode} nor represented as a property in the\n     * decoded Object. */\n    this.property = property;\n  }\n\n  /** Store a value into the corresponding subsequence of the containing\n   * bit field. */\n  decode() {\n    const word = this.container._packedGetValue();\n    const wordValue = fixBitwiseResult(word & this.wordMask);\n    const value = wordValue >>> this.start;\n    return value;\n  }\n\n  /** Store a value into the corresponding subsequence of the containing\n   * bit field.\n   *\n   * **NOTE** This is not a specialization of {@link\n   * Layout#encode|Layout.encode} and there is no return value. */\n  encode(value) {\n    if ((!Number.isInteger(value))\n        || (value !== fixBitwiseResult(value & this.valueMask))) {\n      throw new TypeError(nameWithProperty('BitField.encode', this)\n                          + ' value must be integer not exceeding ' + this.valueMask);\n    }\n    const word = this.container._packedGetValue();\n    const wordValue = fixBitwiseResult(value << this.start);\n    this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask)\n                                   | wordValue);\n  };\n}\n\n/**\n * Represent a single bit within a {@link BitStructure} as a\n * JavaScript boolean.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addBoolean|addBoolean} helper\n * method.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {BitField}\n */\n/* eslint-disable no-extend-native */\nclass Boolean extends BitField {\n  constructor(container, property) {\n    super(container, 1, property);\n  }\n\n  /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.\n   *\n   * @returns {boolean} */\n  decode(b, offset) {\n    return !!BitField.prototype.decode.call(this, b, offset);\n  }\n\n  /** @override */\n  encode(value) {\n    if ('boolean' === typeof value) {\n      // BitField requires integer values\n      value = +value;\n    }\n    return BitField.prototype.encode.call(this, value);\n  }\n}\n/* eslint-enable no-extend-native */\n\n/**\n * Contain a fixed-length block of arbitrary data, represented as a\n * Buffer.\n *\n * *Factory*: {@link module:Layout.blob|blob}\n *\n * @param {(Number|ExternalLayout)} length - initializes {@link\n * Blob#length|length}.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Blob extends Layout {\n  constructor(length, property) {\n    if (!(((length instanceof ExternalLayout) && length.isCount())\n          || (Number.isInteger(length) && (0 <= length)))) {\n      throw new TypeError('length must be positive integer '\n                          + 'or an unsigned integer ExternalLayout');\n    }\n\n    let span = -1;\n    if (!(length instanceof ExternalLayout)) {\n      span = length;\n    }\n    super(span, property);\n\n    /** The number of bytes in the blob.\n     *\n     * This may be a non-negative integer, or an instance of {@link\n     * ExternalLayout} that satisfies {@link\n     * ExternalLayout#isCount|isCount()}. */\n    this.length = length;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    let span = this.span;\n    if (0 > span) {\n      span = this.length.decode(b, offset);\n    }\n    return span;\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = this.span;\n    if (0 > span) {\n      span = this.length.decode(b, offset);\n    }\n    return b.slice(offset, offset + span);\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link Blob}.\n   *\n   * **NOTE** If {@link Layout#count|count} is an instance of {@link\n   * ExternalLayout} then the length of `src` will be encoded as the\n   * count after `src` is encoded. */\n  encode(src, b, offset) {\n    let span = this.length;\n    if (this.length instanceof ExternalLayout) {\n      span = src.length;\n    }\n    if (!(Buffer.isBuffer(src)\n          && (span === src.length))) {\n      throw new TypeError(nameWithProperty('Blob.encode', this)\n                          + ' requires (length ' + span + ') Buffer as src');\n    }\n    if ((offset + span) > b.length) {\n      throw new RangeError('encoding overruns Buffer');\n    }\n    b.write(src.toString('hex'), offset, span, 'hex');\n    if (this.length instanceof ExternalLayout) {\n      this.length.encode(span, b, offset);\n    }\n    return span;\n  }\n}\n\n/**\n * Contain a `NUL`-terminated UTF8 string.\n *\n * *Factory*: {@link module:Layout.cstr|cstr}\n *\n * **NOTE** Any UTF8 string that incorporates a zero-valued byte will\n * not be correctly decoded by this layout.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass CString extends Layout {\n  constructor(property) {\n    super(-1, property);\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (!Buffer.isBuffer(b)) {\n      throw new TypeError('b must be a Buffer');\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let idx = offset;\n    while ((idx < b.length) && (0 !== b[idx])) {\n      idx += 1;\n    }\n    return 1 + idx - offset;\n  }\n\n  /** @override */\n  decode(b, offset, dest) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = this.getSpan(b, offset);\n    return b.slice(offset, offset + span - 1).toString('utf-8');\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    /* Must force this to a string, lest it be a number and the\n     * \"utf8-encoding\" below actually allocate a buffer of length\n     * src */\n    if ('string' !== typeof src) {\n      src = src.toString();\n    }\n    const srcb = new Buffer(src, 'utf8');\n    const span = srcb.length;\n    if ((offset + span) > b.length) {\n      throw new RangeError('encoding overruns Buffer');\n    }\n    srcb.copy(b, offset);\n    b[offset + span] = 0;\n    return span + 1;\n  }\n}\n\n/**\n * Contain a UTF8 string with implicit length.\n *\n * *Factory*: {@link module:Layout.utf8|utf8}\n *\n * **NOTE** Because the length is implicit in the size of the buffer\n * this layout should be used only in isolation, or in a situation\n * where the length can be expressed by operating on a slice of the\n * containing buffer.\n *\n * @param {Number} [maxSpan] - the maximum length allowed for encoded\n * string content.  If not provided there is no bound on the allowed\n * content.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UTF8 extends Layout {\n  constructor(maxSpan, property) {\n    if (('string' === typeof maxSpan)\n        && (undefined === property)) {\n      property = maxSpan;\n      maxSpan = undefined;\n    }\n    if (undefined === maxSpan) {\n      maxSpan = -1;\n    } else if (!Number.isInteger(maxSpan)) {\n      throw new TypeError('maxSpan must be an integer');\n    }\n\n    super(-1, property);\n\n    /** The maximum span of the layout in bytes.\n     *\n     * Positive values are generally expected.  Zero is abnormal.\n     * Attempts to encode or decode a value that exceeds this length\n     * will throw a `RangeError`.\n     *\n     * A negative value indicates that there is no bound on the length\n     * of the content. */\n    this.maxSpan = maxSpan;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (!Buffer.isBuffer(b)) {\n      throw new TypeError('b must be a Buffer');\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.length - offset;\n  }\n\n  /** @override */\n  decode(b, offset, dest) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = this.getSpan(b, offset);\n    if ((0 <= this.maxSpan)\n        && (this.maxSpan < span)) {\n      throw new RangeError('text length exceeds maxSpan');\n    }\n    return b.slice(offset, offset + span).toString('utf-8');\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    /* Must force this to a string, lest it be a number and the\n     * \"utf8-encoding\" below actually allocate a buffer of length\n     * src */\n    if ('string' !== typeof src) {\n      src = src.toString();\n    }\n    const srcb = new Buffer(src, 'utf8');\n    const span = srcb.length;\n    if ((0 <= this.maxSpan)\n        && (this.maxSpan < span)) {\n      throw new RangeError('text length exceeds maxSpan');\n    }\n    if ((offset + span) > b.length) {\n      throw new RangeError('encoding overruns Buffer');\n    }\n    srcb.copy(b, offset);\n    return span;\n  }\n}\n\n/**\n * Contain a constant value.\n *\n * This layout may be used in cases where a JavaScript value can be\n * inferred without an expression in the binary encoding.  An example\n * would be a {@link VariantLayout|variant layout} where the content\n * is implied by the union {@link Union#discriminator|discriminator}.\n *\n * @param {Object|Number|String} value - initializer for {@link\n * Constant#value|value}.  If the value is an object (or array) and\n * the application intends the object to remain unchanged regardless\n * of what is done to values decoded by this layout, the value should\n * be frozen prior passing it to this constructor.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Constant extends Layout {\n  constructor(value, property) {\n    super(0, property);\n\n    /** The value produced by this constant when the layout is {@link\n     * Constant#decode|decoded}.\n     *\n     * Any JavaScript value including `null` and `undefined` is\n     * permitted.\n     *\n     * **WARNING** If `value` passed in the constructor was not\n     * frozen, it is possible for users of decoded values to change\n     * the content of the value. */\n    this.value = value;\n  }\n\n  /** @override */\n  decode(b, offset, dest) {\n    return this.value;\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    /* Constants take no space */\n    return 0;\n  }\n}\n\nexports.ExternalLayout = ExternalLayout;\nexports.GreedyCount = GreedyCount;\nexports.OffsetLayout = OffsetLayout;\nexports.UInt = UInt;\nexports.UIntBE = UIntBE;\nexports.Int = Int;\nexports.IntBE = IntBE;\nexports.Float = Float;\nexports.FloatBE = FloatBE;\nexports.Double = Double;\nexports.DoubleBE = DoubleBE;\nexports.Sequence = Sequence;\nexports.Structure = Structure;\nexports.UnionDiscriminator = UnionDiscriminator;\nexports.UnionLayoutDiscriminator = UnionLayoutDiscriminator;\nexports.Union = Union;\nexports.VariantLayout = VariantLayout;\nexports.BitStructure = BitStructure;\nexports.BitField = BitField;\nexports.Boolean = Boolean;\nexports.Blob = Blob;\nexports.CString = CString;\nexports.UTF8 = UTF8;\nexports.Constant = Constant;\n\n/** Factory for {@link GreedyCount}. */\nexports.greedy = ((elementSpan, property) => new GreedyCount(elementSpan, property));\n\n/** Factory for {@link OffsetLayout}. */\nexports.offset = ((layout, offset, property) => new OffsetLayout(layout, offset, property));\n\n/** Factory for {@link UInt|unsigned int layouts} spanning one\n * byte. */\nexports.u8 = (property => new UInt(1, property));\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16 = (property => new UInt(2, property));\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24 = (property => new UInt(3, property));\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32 = (property => new UInt(4, property));\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40 = (property => new UInt(5, property));\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48 = (property => new UInt(6, property));\n\n/** Factory for {@link NearUInt64|little-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64 = (property => new NearUInt64(property));\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16be = (property => new UIntBE(2, property));\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24be = (property => new UIntBE(3, property));\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32be = (property => new UIntBE(4, property));\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40be = (property => new UIntBE(5, property));\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48be = (property => new UIntBE(6, property));\n\n/** Factory for {@link NearUInt64BE|big-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64be = (property => new NearUInt64BE(property));\n\n/** Factory for {@link Int|signed int layouts} spanning one\n * byte. */\nexports.s8 = (property => new Int(1, property));\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning two bytes. */\nexports.s16 = (property => new Int(2, property));\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning three bytes. */\nexports.s24 = (property => new Int(3, property));\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning four bytes. */\nexports.s32 = (property => new Int(4, property));\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning five bytes. */\nexports.s40 = (property => new Int(5, property));\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning six bytes. */\nexports.s48 = (property => new Int(6, property));\n\n/** Factory for {@link NearInt64|little-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64 = (property => new NearInt64(property));\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning two bytes. */\nexports.s16be = (property => new IntBE(2, property));\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning three bytes. */\nexports.s24be = (property => new IntBE(3, property));\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning four bytes. */\nexports.s32be = (property => new IntBE(4, property));\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning five bytes. */\nexports.s40be = (property => new IntBE(5, property));\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning six bytes. */\nexports.s48be = (property => new IntBE(6, property));\n\n/** Factory for {@link NearInt64BE|big-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64be = (property => new NearInt64BE(property));\n\n/** Factory for {@link Float|little-endian 32-bit floating point} values. */\nexports.f32 = (property => new Float(property));\n\n/** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */\nexports.f32be = (property => new FloatBE(property));\n\n/** Factory for {@link Double|little-endian 64-bit floating point} values. */\nexports.f64 = (property => new Double(property));\n\n/** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */\nexports.f64be = (property => new DoubleBE(property));\n\n/** Factory for {@link Structure} values. */\nexports.struct = ((fields, property, decodePrefixes) => new Structure(fields, property, decodePrefixes));\n\n/** Factory for {@link BitStructure} values. */\nexports.bits = ((word, msb, property) => new BitStructure(word, msb, property));\n\n/** Factory for {@link Sequence} values. */\nexports.seq = ((elementLayout, count, property) => new Sequence(elementLayout, count, property));\n\n/** Factory for {@link Union} values. */\nexports.union = ((discr, defaultLayout, property) => new Union(discr, defaultLayout, property));\n\n/** Factory for {@link UnionLayoutDiscriminator} values. */\nexports.unionLayoutDiscriminator = ((layout, property) => new UnionLayoutDiscriminator(layout, property));\n\n/** Factory for {@link Blob} values. */\nexports.blob = ((length, property) => new Blob(length, property));\n\n/** Factory for {@link CString} values. */\nexports.cstr = (property => new CString(property));\n\n/** Factory for {@link UTF8} values. */\nexports.utf8 = ((maxSpan, property) => new UTF8(maxSpan, property));\n\n/** Factory for {@link Constant} values. */\nexports.const = ((value, property) => new Constant(value, property));\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey'): Object => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): Object => {\n  return BufferLayout.blob(8, property);\n};\n","// @flow\n\nimport {sendAndConfirmTransaction as realSendAndConfirmTransaction} from '@solana/web3.js';\nimport type {\n  Connection,\n  Signer,\n  Transaction,\n  TransactionSignature,\n} from '@solana/web3.js';\n\nexport function sendAndConfirmTransaction(\n  title: string,\n  connection: Connection,\n  transaction: Transaction,\n  ...signers: Array<Signer>\n): Promise<TransactionSignature> {\n  return realSendAndConfirmTransaction(connection, transaction, signers, {\n    skipPreflight: false,\n  });\n}\n","/**\n * @flow\n */\n\nimport {Buffer} from 'buffer';\nimport assert from 'assert';\nimport BN from 'bn.js';\nimport * as BufferLayout from 'buffer-layout';\nimport {\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  Transaction,\n  TransactionInstruction,\n  SYSVAR_RENT_PUBKEY,\n} from '@solana/web3.js';\nimport type {\n  Connection,\n  Commitment,\n  Signer,\n  TransactionSignature,\n} from '@solana/web3.js';\n\nimport * as Layout from './layout';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\n\nexport const TOKEN_PROGRAM_ID: PublicKey = new PublicKey(\n  'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n);\n\nexport const ASSOCIATED_TOKEN_PROGRAM_ID: PublicKey = new PublicKey(\n  'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n);\n\nconst FAILED_TO_FIND_ACCOUNT = 'Failed to find account';\nconst INVALID_ACCOUNT_OWNER = 'Invalid account owner';\n\n/**\n * Unfortunately, BufferLayout.encode uses an `instanceof` check for `Buffer`\n * which fails when using `publicKey.toBuffer()` directly because the bundled `Buffer`\n * class in `@solana/web3.js` is different from the bundled `Buffer` class in this package\n */\nfunction pubkeyToBuffer(publicKey: PublicKey): typeof Buffer {\n  return Buffer.from(publicKey.toBuffer());\n}\n\n/**\n * 64-bit value\n */\nexport class u64 extends BN {\n  /**\n   * Convert to Buffer representation\n   */\n  toBuffer(): typeof Buffer {\n    const a = super.toArray().reverse();\n    const b = Buffer.from(a);\n    if (b.length === 8) {\n      return b;\n    }\n    assert(b.length < 8, 'u64 too large');\n\n    const zeroPad = Buffer.alloc(8);\n    b.copy(zeroPad);\n    return zeroPad;\n  }\n\n  /**\n   * Construct a u64 from Buffer representation\n   */\n  static fromBuffer(buffer: typeof Buffer): u64 {\n    assert(buffer.length === 8, `Invalid buffer length: ${buffer.length}`);\n    return new u64(\n      [...buffer]\n        .reverse()\n        .map(i => `00${i.toString(16)}`.slice(-2))\n        .join(''),\n      16,\n    );\n  }\n}\n\nfunction isAccount(accountOrPublicKey: any): boolean {\n  return 'publicKey' in accountOrPublicKey;\n}\n\ntype AuthorityType =\n  | 'MintTokens'\n  | 'FreezeAccount'\n  | 'AccountOwner'\n  | 'CloseAccount';\n\nconst AuthorityTypeCodes = {\n  MintTokens: 0,\n  FreezeAccount: 1,\n  AccountOwner: 2,\n  CloseAccount: 3,\n};\n\n// The address of the special mint for wrapped native token.\nexport const NATIVE_MINT: PublicKey = new PublicKey(\n  'So11111111111111111111111111111111111111112',\n);\n\n/**\n * Information about the mint\n */\ntype MintInfo = {|\n  /**\n   * Optional authority used to mint new tokens. The mint authority may only be provided during\n   * mint creation. If no mint authority is present then the mint has a fixed supply and no\n   * further tokens may be minted.\n   */\n  mintAuthority: null | PublicKey,\n\n  /**\n   * Total supply of tokens\n   */\n  supply: u64,\n\n  /**\n   * Number of base 10 digits to the right of the decimal place\n   */\n  decimals: number,\n\n  /**\n   * Is this mint initialized\n   */\n  isInitialized: boolean,\n\n  /**\n   * Optional authority to freeze token accounts\n   */\n  freezeAuthority: null | PublicKey,\n|};\n\nexport const MintLayout: typeof BufferLayout.Structure = BufferLayout.struct([\n  BufferLayout.u32('mintAuthorityOption'),\n  Layout.publicKey('mintAuthority'),\n  Layout.uint64('supply'),\n  BufferLayout.u8('decimals'),\n  BufferLayout.u8('isInitialized'),\n  BufferLayout.u32('freezeAuthorityOption'),\n  Layout.publicKey('freezeAuthority'),\n]);\n\n/**\n * Information about an account\n */\ntype AccountInfo = {|\n  /**\n   * The address of this account\n   */\n  address: PublicKey,\n\n  /**\n   * The mint associated with this account\n   */\n  mint: PublicKey,\n\n  /**\n   * Owner of this account\n   */\n  owner: PublicKey,\n\n  /**\n   * Amount of tokens this account holds\n   */\n  amount: u64,\n\n  /**\n   * The delegate for this account\n   */\n  delegate: null | PublicKey,\n\n  /**\n   * The amount of tokens the delegate authorized to the delegate\n   */\n  delegatedAmount: u64,\n\n  /**\n   * Is this account initialized\n   */\n  isInitialized: boolean,\n\n  /**\n   * Is this account frozen\n   */\n  isFrozen: boolean,\n\n  /**\n   * Is this a native token account\n   */\n  isNative: boolean,\n\n  /**\n   * If this account is a native token, it must be rent-exempt. This\n   * value logs the rent-exempt reserve which must remain in the balance\n   * until the account is closed.\n   */\n  rentExemptReserve: null | u64,\n\n  /**\n   * Optional authority to close the account\n   */\n  closeAuthority: null | PublicKey,\n|};\n\n/**\n * @private\n */\nexport const AccountLayout: typeof BufferLayout.Structure = BufferLayout.struct(\n  [\n    Layout.publicKey('mint'),\n    Layout.publicKey('owner'),\n    Layout.uint64('amount'),\n    BufferLayout.u32('delegateOption'),\n    Layout.publicKey('delegate'),\n    BufferLayout.u8('state'),\n    BufferLayout.u32('isNativeOption'),\n    Layout.uint64('isNative'),\n    Layout.uint64('delegatedAmount'),\n    BufferLayout.u32('closeAuthorityOption'),\n    Layout.publicKey('closeAuthority'),\n  ],\n);\n\n/**\n * Information about an multisig\n */\ntype MultisigInfo = {|\n  /**\n   * The number of signers required\n   */\n  m: number,\n\n  /**\n   * Number of possible signers, corresponds to the\n   * number of `signers` that are valid.\n   */\n  n: number,\n\n  /**\n   * Is this mint initialized\n   */\n  initialized: boolean,\n\n  /**\n   * The signers\n   */\n  signer1: PublicKey,\n  signer2: PublicKey,\n  signer3: PublicKey,\n  signer4: PublicKey,\n  signer5: PublicKey,\n  signer6: PublicKey,\n  signer7: PublicKey,\n  signer8: PublicKey,\n  signer9: PublicKey,\n  signer10: PublicKey,\n  signer11: PublicKey,\n|};\n\n/**\n * @private\n */\nconst MultisigLayout = BufferLayout.struct([\n  BufferLayout.u8('m'),\n  BufferLayout.u8('n'),\n  BufferLayout.u8('is_initialized'),\n  Layout.publicKey('signer1'),\n  Layout.publicKey('signer2'),\n  Layout.publicKey('signer3'),\n  Layout.publicKey('signer4'),\n  Layout.publicKey('signer5'),\n  Layout.publicKey('signer6'),\n  Layout.publicKey('signer7'),\n  Layout.publicKey('signer8'),\n  Layout.publicKey('signer9'),\n  Layout.publicKey('signer10'),\n  Layout.publicKey('signer11'),\n]);\n\n/**\n * An ERC20-like Token\n */\nexport class Token {\n  /**\n   * @private\n   */\n  connection: Connection;\n\n  /**\n   * The public key identifying this mint\n   */\n  publicKey: PublicKey;\n\n  /**\n   * Program Identifier for the Token program\n   */\n  programId: PublicKey;\n\n  /**\n   * Program Identifier for the Associated Token program\n   */\n  associatedProgramId: PublicKey;\n\n  /**\n   * Fee payer\n   */\n  payer: Signer;\n\n  /**\n   * Create a Token object attached to the specific mint\n   *\n   * @param connection The connection to use\n   * @param token Public key of the mint\n   * @param programId token programId\n   * @param payer Payer of fees\n   */\n  constructor(\n    connection: Connection,\n    publicKey: PublicKey,\n    programId: PublicKey,\n    payer: Signer,\n  ) {\n    Object.assign(this, {\n      connection,\n      publicKey,\n      programId,\n      payer,\n      // Hard code is ok; Overriding is needed only for tests\n      associatedProgramId: ASSOCIATED_TOKEN_PROGRAM_ID,\n    });\n  }\n\n  /**\n   * Get the minimum balance for the mint to be rent exempt\n   *\n   * @return Number of lamports required\n   */\n  static async getMinBalanceRentForExemptMint(\n    connection: Connection,\n  ): Promise<number> {\n    return await connection.getMinimumBalanceForRentExemption(MintLayout.span);\n  }\n\n  /**\n   * Get the minimum balance for the account to be rent exempt\n   *\n   * @return Number of lamports required\n   */\n  static async getMinBalanceRentForExemptAccount(\n    connection: Connection,\n  ): Promise<number> {\n    return await connection.getMinimumBalanceForRentExemption(\n      AccountLayout.span,\n    );\n  }\n\n  /**\n   * Get the minimum balance for the multsig to be rent exempt\n   *\n   * @return Number of lamports required\n   */\n  static async getMinBalanceRentForExemptMultisig(\n    connection: Connection,\n  ): Promise<number> {\n    return await connection.getMinimumBalanceForRentExemption(\n      MultisigLayout.span,\n    );\n  }\n\n  /**\n   * Create and initialize a token.\n   *\n   * @param connection The connection to use\n   * @param payer Fee payer for transaction\n   * @param mintAuthority Account or multisig that will control minting\n   * @param freezeAuthority Optional account or multisig that can freeze token accounts\n   * @param decimals Location of the decimal place\n   * @param programId Optional token programId, uses the system programId by default\n   * @return Token object for the newly minted token\n   */\n  static async createMint(\n    connection: Connection,\n    payer: Signer,\n    mintAuthority: PublicKey,\n    freezeAuthority: PublicKey | null,\n    decimals: number,\n    programId: PublicKey,\n  ): Promise<Token> {\n    const mintAccount = Keypair.generate();\n    const token = new Token(\n      connection,\n      mintAccount.publicKey,\n      programId,\n      payer,\n    );\n\n    // Allocate memory for the account\n    const balanceNeeded = await Token.getMinBalanceRentForExemptMint(\n      connection,\n    );\n\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: payer.publicKey,\n        newAccountPubkey: mintAccount.publicKey,\n        lamports: balanceNeeded,\n        space: MintLayout.span,\n        programId,\n      }),\n    );\n\n    transaction.add(\n      Token.createInitMintInstruction(\n        programId,\n        mintAccount.publicKey,\n        decimals,\n        mintAuthority,\n        freezeAuthority,\n      ),\n    );\n\n    // Send the two instructions\n    await sendAndConfirmTransaction(\n      'createAccount and InitializeMint',\n      connection,\n      transaction,\n      payer,\n      mintAccount,\n    );\n\n    return token;\n  }\n\n  /**\n   * Create and initialize a new account.\n   *\n   * This account may then be used as a `transfer()` or `approve()` destination\n   *\n   * @param owner User account that will own the new account\n   * @return Public key of the new empty account\n   */\n  async createAccount(owner: PublicKey): Promise<PublicKey> {\n    // Allocate memory for the account\n    const balanceNeeded = await Token.getMinBalanceRentForExemptAccount(\n      this.connection,\n    );\n\n    const newAccount = Keypair.generate();\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: this.payer.publicKey,\n        newAccountPubkey: newAccount.publicKey,\n        lamports: balanceNeeded,\n        space: AccountLayout.span,\n        programId: this.programId,\n      }),\n    );\n\n    const mintPublicKey = this.publicKey;\n    transaction.add(\n      Token.createInitAccountInstruction(\n        this.programId,\n        mintPublicKey,\n        newAccount.publicKey,\n        owner,\n      ),\n    );\n\n    // Send the two instructions\n    await sendAndConfirmTransaction(\n      'createAccount and InitializeAccount',\n      this.connection,\n      transaction,\n      this.payer,\n      newAccount,\n    );\n\n    return newAccount.publicKey;\n  }\n\n  /**\n   * Create and initialize the associated account.\n   *\n   * This account may then be used as a `transfer()` or `approve()` destination\n   *\n   * @param owner User account that will own the new account\n   * @return Public key of the new associated account\n   */\n  async createAssociatedTokenAccount(owner: PublicKey): Promise<PublicKey> {\n    const associatedAddress = await Token.getAssociatedTokenAddress(\n      this.associatedProgramId,\n      this.programId,\n      this.publicKey,\n      owner,\n    );\n\n    return this.createAssociatedTokenAccountInternal(owner, associatedAddress);\n  }\n\n  async createAssociatedTokenAccountInternal(\n    owner: PublicKey,\n    associatedAddress: PublicKey,\n  ): Promise<PublicKey> {\n    await sendAndConfirmTransaction(\n      'CreateAssociatedTokenAccount',\n      this.connection,\n      new Transaction().add(\n        Token.createAssociatedTokenAccountInstruction(\n          this.associatedProgramId,\n          this.programId,\n          this.publicKey,\n          associatedAddress,\n          owner,\n          this.payer.publicKey,\n        ),\n      ),\n      this.payer,\n    );\n\n    return associatedAddress;\n  }\n\n  /**\n   * Retrieve the associated account or create one if not found.\n   *\n   * This account may then be used as a `transfer()` or `approve()` destination\n   *\n   * @param owner User account that will own the new account\n   * @return The new associated account\n   */\n  async getOrCreateAssociatedAccountInfo(\n    owner: PublicKey,\n  ): Promise<AccountInfo> {\n    const associatedAddress = await Token.getAssociatedTokenAddress(\n      this.associatedProgramId,\n      this.programId,\n      this.publicKey,\n      owner,\n    );\n\n    // This is the optimum logic, considering TX fee, client-side computation,\n    // RPC roundtrips and guaranteed idempotent.\n    // Sadly we can't do this atomically;\n    try {\n      return await this.getAccountInfo(associatedAddress);\n    } catch (err) {\n      // INVALID_ACCOUNT_OWNER can be possible if the associatedAddress has\n      // already been received some lamports (= became system accounts).\n      // Assuming program derived addressing is safe, this is the only case\n      // for the INVALID_ACCOUNT_OWNER in this code-path\n      if (\n        err.message === FAILED_TO_FIND_ACCOUNT ||\n        err.message === INVALID_ACCOUNT_OWNER\n      ) {\n        // as this isn't atomic, it's possible others can create associated\n        // accounts meanwhile\n        try {\n          await this.createAssociatedTokenAccountInternal(\n            owner,\n            associatedAddress,\n          );\n        } catch (err) {\n          // ignore all errors; for now there is no API compatible way to\n          // selectively ignore the expected instruction error if the\n          // associated account is existing already.\n        }\n\n        // Now this should always succeed\n        return await this.getAccountInfo(associatedAddress);\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * Create and initialize a new account on the special native token mint.\n   *\n   * In order to be wrapped, the account must have a balance of native tokens\n   * when it is initialized with the token program.\n   *\n   * This function sends lamports to the new account before initializing it.\n   *\n   * @param connection A solana web3 connection\n   * @param programId The token program ID\n   * @param owner The owner of the new token account\n   * @param payer The source of the lamports to initialize, and payer of the initialization fees.\n   * @param amount The amount of lamports to wrap\n   * @return {Promise<PublicKey>} The new token account\n   */\n  static async createWrappedNativeAccount(\n    connection: Connection,\n    programId: PublicKey,\n    owner: PublicKey,\n    payer: Signer,\n    amount: number,\n  ): Promise<PublicKey> {\n    // Allocate memory for the account\n    const balanceNeeded = await Token.getMinBalanceRentForExemptAccount(\n      connection,\n    );\n\n    // Create a new account\n    const newAccount = Keypair.generate();\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: payer.publicKey,\n        newAccountPubkey: newAccount.publicKey,\n        lamports: balanceNeeded,\n        space: AccountLayout.span,\n        programId,\n      }),\n    );\n\n    // Send lamports to it (these will be wrapped into native tokens by the token program)\n    transaction.add(\n      SystemProgram.transfer({\n        fromPubkey: payer.publicKey,\n        toPubkey: newAccount.publicKey,\n        lamports: amount,\n      }),\n    );\n\n    // Assign the new account to the native token mint.\n    // the account will be initialized with a balance equal to the native token balance.\n    // (i.e. amount)\n    transaction.add(\n      Token.createInitAccountInstruction(\n        programId,\n        NATIVE_MINT,\n        newAccount.publicKey,\n        owner,\n      ),\n    );\n\n    // Send the three instructions\n    await sendAndConfirmTransaction(\n      'createAccount, transfer, and initializeAccount',\n      connection,\n      transaction,\n      payer,\n      newAccount,\n    );\n\n    return newAccount.publicKey;\n  }\n\n  /**\n   * Create and initialize a new multisig.\n   *\n   * This account may then be used for multisignature verification\n   *\n   * @param m Number of required signatures\n   * @param signers Full set of signers\n   * @return Public key of the new multisig account\n   */\n  async createMultisig(\n    m: number,\n    signers: Array<PublicKey>,\n  ): Promise<PublicKey> {\n    const multisigAccount = Keypair.generate();\n\n    // Allocate memory for the account\n    const balanceNeeded = await Token.getMinBalanceRentForExemptMultisig(\n      this.connection,\n    );\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: this.payer.publicKey,\n        newAccountPubkey: multisigAccount.publicKey,\n        lamports: balanceNeeded,\n        space: MultisigLayout.span,\n        programId: this.programId,\n      }),\n    );\n\n    // create the new account\n    let keys = [\n      {pubkey: multisigAccount.publicKey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    signers.forEach(signer =>\n      keys.push({pubkey: signer, isSigner: false, isWritable: false}),\n    );\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u8('m'),\n    ]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 2, // InitializeMultisig instruction\n        m,\n      },\n      data,\n    );\n    transaction.add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n\n    // Send the two instructions\n    await sendAndConfirmTransaction(\n      'createAccount and InitializeMultisig',\n      this.connection,\n      transaction,\n      this.payer,\n      multisigAccount,\n    );\n\n    return multisigAccount.publicKey;\n  }\n\n  /**\n   * Retrieve mint information\n   */\n  async getMintInfo(): Promise<MintInfo> {\n    const info = await this.connection.getAccountInfo(this.publicKey);\n    if (info === null) {\n      throw new Error('Failed to find mint account');\n    }\n    if (!info.owner.equals(this.programId)) {\n      throw new Error(`Invalid mint owner: ${JSON.stringify(info.owner)}`);\n    }\n    if (info.data.length != MintLayout.span) {\n      throw new Error(`Invalid mint size`);\n    }\n\n    const data = Buffer.from(info.data);\n    const mintInfo = MintLayout.decode(data);\n\n    if (mintInfo.mintAuthorityOption === 0) {\n      mintInfo.mintAuthority = null;\n    } else {\n      mintInfo.mintAuthority = new PublicKey(mintInfo.mintAuthority);\n    }\n\n    mintInfo.supply = u64.fromBuffer(mintInfo.supply);\n    mintInfo.isInitialized = mintInfo.isInitialized != 0;\n\n    if (mintInfo.freezeAuthorityOption === 0) {\n      mintInfo.freezeAuthority = null;\n    } else {\n      mintInfo.freezeAuthority = new PublicKey(mintInfo.freezeAuthority);\n    }\n    return mintInfo;\n  }\n\n  /**\n   * Retrieve account information\n   *\n   * @param account Public key of the account\n   */\n  async getAccountInfo(\n    account: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo> {\n    const info = await this.connection.getAccountInfo(account, commitment);\n    if (info === null) {\n      throw new Error(FAILED_TO_FIND_ACCOUNT);\n    }\n    if (!info.owner.equals(this.programId)) {\n      throw new Error(INVALID_ACCOUNT_OWNER);\n    }\n    if (info.data.length != AccountLayout.span) {\n      throw new Error(`Invalid account size`);\n    }\n\n    const data = Buffer.from(info.data);\n    const accountInfo = AccountLayout.decode(data);\n    accountInfo.address = account;\n    accountInfo.mint = new PublicKey(accountInfo.mint);\n    accountInfo.owner = new PublicKey(accountInfo.owner);\n    accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n\n    if (accountInfo.delegateOption === 0) {\n      accountInfo.delegate = null;\n      accountInfo.delegatedAmount = new u64();\n    } else {\n      accountInfo.delegate = new PublicKey(accountInfo.delegate);\n      accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n    }\n\n    accountInfo.isInitialized = accountInfo.state !== 0;\n    accountInfo.isFrozen = accountInfo.state === 2;\n\n    if (accountInfo.isNativeOption === 1) {\n      accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n      accountInfo.isNative = true;\n    } else {\n      accountInfo.rentExemptReserve = null;\n      accountInfo.isNative = false;\n    }\n\n    if (accountInfo.closeAuthorityOption === 0) {\n      accountInfo.closeAuthority = null;\n    } else {\n      accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\n    }\n\n    if (!accountInfo.mint.equals(this.publicKey)) {\n      throw new Error(\n        `Invalid account mint: ${JSON.stringify(\n          accountInfo.mint,\n        )} !== ${JSON.stringify(this.publicKey)}`,\n      );\n    }\n    return accountInfo;\n  }\n\n  /**\n   * Retrieve Multisig information\n   *\n   * @param multisig Public key of the account\n   */\n  async getMultisigInfo(multisig: PublicKey): Promise<MultisigInfo> {\n    const info = await this.connection.getAccountInfo(multisig);\n    if (info === null) {\n      throw new Error('Failed to find multisig');\n    }\n    if (!info.owner.equals(this.programId)) {\n      throw new Error(`Invalid multisig owner`);\n    }\n    if (info.data.length != MultisigLayout.span) {\n      throw new Error(`Invalid multisig size`);\n    }\n\n    const data = Buffer.from(info.data);\n    const multisigInfo = MultisigLayout.decode(data);\n    multisigInfo.signer1 = new PublicKey(multisigInfo.signer1);\n    multisigInfo.signer2 = new PublicKey(multisigInfo.signer2);\n    multisigInfo.signer3 = new PublicKey(multisigInfo.signer3);\n    multisigInfo.signer4 = new PublicKey(multisigInfo.signer4);\n    multisigInfo.signer5 = new PublicKey(multisigInfo.signer5);\n    multisigInfo.signer6 = new PublicKey(multisigInfo.signer6);\n    multisigInfo.signer7 = new PublicKey(multisigInfo.signer7);\n    multisigInfo.signer8 = new PublicKey(multisigInfo.signer8);\n    multisigInfo.signer9 = new PublicKey(multisigInfo.signer9);\n    multisigInfo.signer10 = new PublicKey(multisigInfo.signer10);\n    multisigInfo.signer11 = new PublicKey(multisigInfo.signer11);\n\n    return multisigInfo;\n  }\n\n  /**\n   * Transfer tokens to another account\n   *\n   * @param source Source account\n   * @param destination Destination account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Number of tokens to transfer\n   */\n  async transfer(\n    source: PublicKey,\n    destination: PublicKey,\n    owner: any,\n    multiSigners: Array<Signer>,\n    amount: number | u64,\n  ): Promise<TransactionSignature> {\n    let ownerPublicKey;\n    let signers;\n    if (isAccount(owner)) {\n      ownerPublicKey = owner.publicKey;\n      signers = [owner];\n    } else {\n      ownerPublicKey = owner;\n      signers = multiSigners;\n    }\n    return await sendAndConfirmTransaction(\n      'Transfer',\n      this.connection,\n      new Transaction().add(\n        Token.createTransferInstruction(\n          this.programId,\n          source,\n          destination,\n          ownerPublicKey,\n          multiSigners,\n          amount,\n        ),\n      ),\n      this.payer,\n      ...signers,\n    );\n  }\n\n  /**\n   * Grant a third-party permission to transfer up the specified number of tokens from an account\n   *\n   * @param account Public key of the account\n   * @param delegate Account authorized to perform a transfer tokens from the source account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Maximum number of tokens the delegate may transfer\n   */\n  async approve(\n    account: PublicKey,\n    delegate: PublicKey,\n    owner: any,\n    multiSigners: Array<Signer>,\n    amount: number | u64,\n  ): Promise<void> {\n    let ownerPublicKey;\n    let signers;\n    if (isAccount(owner)) {\n      ownerPublicKey = owner.publicKey;\n      signers = [owner];\n    } else {\n      ownerPublicKey = owner;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction(\n      'Approve',\n      this.connection,\n      new Transaction().add(\n        Token.createApproveInstruction(\n          this.programId,\n          account,\n          delegate,\n          ownerPublicKey,\n          multiSigners,\n          amount,\n        ),\n      ),\n      this.payer,\n      ...signers,\n    );\n  }\n\n  /**\n   * Remove approval for the transfer of any remaining tokens\n   *\n   * @param account Public key of the account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   */\n  async revoke(\n    account: PublicKey,\n    owner: any,\n    multiSigners: Array<Signer>,\n  ): Promise<void> {\n    let ownerPublicKey;\n    let signers;\n    if (isAccount(owner)) {\n      ownerPublicKey = owner.publicKey;\n      signers = [owner];\n    } else {\n      ownerPublicKey = owner;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction(\n      'Revoke',\n      this.connection,\n      new Transaction().add(\n        Token.createRevokeInstruction(\n          this.programId,\n          account,\n          ownerPublicKey,\n          multiSigners,\n        ),\n      ),\n      this.payer,\n      ...signers,\n    );\n  }\n\n  /**\n   * Assign a new authority to the account\n   *\n   * @param account Public key of the account\n   * @param newAuthority New authority of the account\n   * @param authorityType Type of authority to set\n   * @param currentAuthority Current authority of the account\n   * @param multiSigners Signing accounts if `currentAuthority` is a multiSig\n   */\n  async setAuthority(\n    account: PublicKey,\n    newAuthority: PublicKey | null,\n    authorityType: AuthorityType,\n    currentAuthority: any,\n    multiSigners: Array<Signer>,\n  ): Promise<void> {\n    let currentAuthorityPublicKey: PublicKey;\n    let signers;\n    if (isAccount(currentAuthority)) {\n      currentAuthorityPublicKey = currentAuthority.publicKey;\n      signers = [currentAuthority];\n    } else {\n      currentAuthorityPublicKey = currentAuthority;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction(\n      'SetAuthority',\n      this.connection,\n      new Transaction().add(\n        Token.createSetAuthorityInstruction(\n          this.programId,\n          account,\n          newAuthority,\n          authorityType,\n          currentAuthorityPublicKey,\n          multiSigners,\n        ),\n      ),\n      this.payer,\n      ...signers,\n    );\n  }\n\n  /**\n   * Mint new tokens\n   *\n   * @param dest Public key of the account to mint to\n   * @param authority Minting authority\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount Amount to mint\n   */\n  async mintTo(\n    dest: PublicKey,\n    authority: any,\n    multiSigners: Array<Signer>,\n    amount: number | u64,\n  ): Promise<void> {\n    let ownerPublicKey;\n    let signers;\n    if (isAccount(authority)) {\n      ownerPublicKey = authority.publicKey;\n      signers = [authority];\n    } else {\n      ownerPublicKey = authority;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction(\n      'MintTo',\n      this.connection,\n      new Transaction().add(\n        Token.createMintToInstruction(\n          this.programId,\n          this.publicKey,\n          dest,\n          ownerPublicKey,\n          multiSigners,\n          amount,\n        ),\n      ),\n      this.payer,\n      ...signers,\n    );\n  }\n\n  /**\n   * Burn tokens\n   *\n   * @param account Account to burn tokens from\n   * @param owner Account owner\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Amount to burn\n   */\n  async burn(\n    account: PublicKey,\n    owner: any,\n    multiSigners: Array<Signer>,\n    amount: number | u64,\n  ): Promise<void> {\n    let ownerPublicKey;\n    let signers;\n    if (isAccount(owner)) {\n      ownerPublicKey = owner.publicKey;\n      signers = [owner];\n    } else {\n      ownerPublicKey = owner;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction(\n      'Burn',\n      this.connection,\n      new Transaction().add(\n        Token.createBurnInstruction(\n          this.programId,\n          this.publicKey,\n          account,\n          ownerPublicKey,\n          multiSigners,\n          amount,\n        ),\n      ),\n      this.payer,\n      ...signers,\n    );\n  }\n\n  /**\n   * Close account\n   *\n   * @param account Account to close\n   * @param dest Account to receive the remaining balance of the closed account\n   * @param authority Authority which is allowed to close the account\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   */\n  async closeAccount(\n    account: PublicKey,\n    dest: PublicKey,\n    authority: any,\n    multiSigners: Array<Signer>,\n  ): Promise<void> {\n    let authorityPublicKey;\n    let signers;\n    if (isAccount(authority)) {\n      authorityPublicKey = authority.publicKey;\n      signers = [authority];\n    } else {\n      authorityPublicKey = authority;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction(\n      'CloseAccount',\n      this.connection,\n      new Transaction().add(\n        Token.createCloseAccountInstruction(\n          this.programId,\n          account,\n          dest,\n          authorityPublicKey,\n          multiSigners,\n        ),\n      ),\n      this.payer,\n      ...signers,\n    );\n  }\n\n  /**\n   * Freeze account\n   *\n   * @param account Account to freeze\n   * @param authority The mint freeze authority\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   */\n  async freezeAccount(\n    account: PublicKey,\n    authority: any,\n    multiSigners: Array<Signer>,\n  ): Promise<void> {\n    let authorityPublicKey;\n    let signers;\n    if (isAccount(authority)) {\n      authorityPublicKey = authority.publicKey;\n      signers = [authority];\n    } else {\n      authorityPublicKey = authority;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction(\n      'FreezeAccount',\n      this.connection,\n      new Transaction().add(\n        Token.createFreezeAccountInstruction(\n          this.programId,\n          account,\n          this.publicKey,\n          authorityPublicKey,\n          multiSigners,\n        ),\n      ),\n      this.payer,\n      ...signers,\n    );\n  }\n\n  /**\n   * Thaw account\n   *\n   * @param account Account to thaw\n   * @param authority The mint freeze authority\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   */\n  async thawAccount(\n    account: PublicKey,\n    authority: any,\n    multiSigners: Array<Signer>,\n  ): Promise<void> {\n    let authorityPublicKey;\n    let signers;\n    if (isAccount(authority)) {\n      authorityPublicKey = authority.publicKey;\n      signers = [authority];\n    } else {\n      authorityPublicKey = authority;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction(\n      'ThawAccount',\n      this.connection,\n      new Transaction().add(\n        Token.createThawAccountInstruction(\n          this.programId,\n          account,\n          this.publicKey,\n          authorityPublicKey,\n          multiSigners,\n        ),\n      ),\n      this.payer,\n      ...signers,\n    );\n  }\n\n  /**\n   * Transfer tokens to another account, asserting the token mint and decimals\n   *\n   * @param source Source account\n   * @param destination Destination account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Number of tokens to transfer\n   * @param decimals Number of decimals in transfer amount\n   */\n  async transferChecked(\n    source: PublicKey,\n    destination: PublicKey,\n    owner: any,\n    multiSigners: Array<Signer>,\n    amount: number | u64,\n    decimals: number,\n  ): Promise<TransactionSignature> {\n    let ownerPublicKey;\n    let signers;\n    if (isAccount(owner)) {\n      ownerPublicKey = owner.publicKey;\n      signers = [owner];\n    } else {\n      ownerPublicKey = owner;\n      signers = multiSigners;\n    }\n    return await sendAndConfirmTransaction(\n      'TransferChecked',\n      this.connection,\n      new Transaction().add(\n        Token.createTransferCheckedInstruction(\n          this.programId,\n          source,\n          this.publicKey,\n          destination,\n          ownerPublicKey,\n          multiSigners,\n          amount,\n          decimals,\n        ),\n      ),\n      this.payer,\n      ...signers,\n    );\n  }\n\n  /**\n   * Grant a third-party permission to transfer up the specified number of tokens from an account,\n   * asserting the token mint and decimals\n   *\n   * @param account Public key of the account\n   * @param delegate Account authorized to perform a transfer tokens from the source account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Maximum number of tokens the delegate may transfer\n   * @param decimals Number of decimals in approve amount\n   */\n  async approveChecked(\n    account: PublicKey,\n    delegate: PublicKey,\n    owner: any,\n    multiSigners: Array<Signer>,\n    amount: number | u64,\n    decimals: number,\n  ): Promise<void> {\n    let ownerPublicKey;\n    let signers;\n    if (isAccount(owner)) {\n      ownerPublicKey = owner.publicKey;\n      signers = [owner];\n    } else {\n      ownerPublicKey = owner;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction(\n      'ApproveChecked',\n      this.connection,\n      new Transaction().add(\n        Token.createApproveCheckedInstruction(\n          this.programId,\n          account,\n          this.publicKey,\n          delegate,\n          ownerPublicKey,\n          multiSigners,\n          amount,\n          decimals,\n        ),\n      ),\n      this.payer,\n      ...signers,\n    );\n  }\n\n  /**\n   * Mint new tokens, asserting the token mint and decimals\n   *\n   * @param dest Public key of the account to mint to\n   * @param authority Minting authority\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount Amount to mint\n   * @param decimals Number of decimals in amount to mint\n   */\n  async mintToChecked(\n    dest: PublicKey,\n    authority: any,\n    multiSigners: Array<Signer>,\n    amount: number | u64,\n    decimals: number,\n  ): Promise<void> {\n    let ownerPublicKey;\n    let signers;\n    if (isAccount(authority)) {\n      ownerPublicKey = authority.publicKey;\n      signers = [authority];\n    } else {\n      ownerPublicKey = authority;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction(\n      'MintToChecked',\n      this.connection,\n      new Transaction().add(\n        Token.createMintToCheckedInstruction(\n          this.programId,\n          this.publicKey,\n          dest,\n          ownerPublicKey,\n          multiSigners,\n          amount,\n          decimals,\n        ),\n      ),\n      this.payer,\n      ...signers,\n    );\n  }\n\n  /**\n   * Burn tokens, asserting the token mint and decimals\n   *\n   * @param account Account to burn tokens from\n   * @param owner Account owner\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Amount to burn\n   * @param decimals Number of decimals in amount to burn\n   */\n  async burnChecked(\n    account: PublicKey,\n    owner: any,\n    multiSigners: Array<Signer>,\n    amount: number | u64,\n    decimals: number,\n  ): Promise<void> {\n    let ownerPublicKey;\n    let signers;\n    if (isAccount(owner)) {\n      ownerPublicKey = owner.publicKey;\n      signers = [owner];\n    } else {\n      ownerPublicKey = owner;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction(\n      'BurnChecked',\n      this.connection,\n      new Transaction().add(\n        Token.createBurnCheckedInstruction(\n          this.programId,\n          this.publicKey,\n          account,\n          ownerPublicKey,\n          multiSigners,\n          amount,\n          decimals,\n        ),\n      ),\n      this.payer,\n      ...signers,\n    );\n  }\n\n  /**\n   * Sync amount in native SPL token account to underlying lamports\n   *\n   * @param nativeAccount Account to sync\n   */\n  async syncNative(nativeAccount: PublicKey): Promise<void> {\n    await sendAndConfirmTransaction(\n      'SyncNative',\n      this.connection,\n      new Transaction().add(\n        Token.createSyncNativeInstruction(this.programId, nativeAccount),\n      ),\n      this.payer,\n    );\n  }\n\n  /**\n   * Construct an InitializeMint instruction\n   *\n   * @param programId SPL Token program account\n   * @param mint Token mint account\n   * @param decimals Number of decimals in token account amounts\n   * @param mintAuthority Minting authority\n   * @param freezeAuthority Optional authority that can freeze token accounts\n   */\n  static createInitMintInstruction(\n    programId: PublicKey,\n    mint: PublicKey,\n    decimals: number,\n    mintAuthority: PublicKey,\n    freezeAuthority: PublicKey | null,\n  ): TransactionInstruction {\n    let keys = [\n      {pubkey: mint, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    const commandDataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u8('decimals'),\n      Layout.publicKey('mintAuthority'),\n      BufferLayout.u8('option'),\n      Layout.publicKey('freezeAuthority'),\n    ]);\n    let data = Buffer.alloc(1024);\n    {\n      const encodeLength = commandDataLayout.encode(\n        {\n          instruction: 0, // InitializeMint instruction\n          decimals,\n          mintAuthority: pubkeyToBuffer(mintAuthority),\n          option: freezeAuthority === null ? 0 : 1,\n          freezeAuthority: pubkeyToBuffer(freezeAuthority || new PublicKey(0)),\n        },\n        data,\n      );\n      data = data.slice(0, encodeLength);\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct an InitializeAccount instruction\n   *\n   * @param programId SPL Token program account\n   * @param mint Token mint account\n   * @param account New account\n   * @param owner Owner of the new account\n   */\n  static createInitAccountInstruction(\n    programId: PublicKey,\n    mint: PublicKey,\n    account: PublicKey,\n    owner: PublicKey,\n  ): TransactionInstruction {\n    const keys = [\n      {pubkey: account, isSigner: false, isWritable: true},\n      {pubkey: mint, isSigner: false, isWritable: false},\n      {pubkey: owner, isSigner: false, isWritable: false},\n      {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    const dataLayout = BufferLayout.struct([BufferLayout.u8('instruction')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 1, // InitializeAccount instruction\n      },\n      data,\n    );\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct a Transfer instruction\n   *\n   * @param programId SPL Token program account\n   * @param source Source account\n   * @param destination Destination account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount Number of tokens to transfer\n   */\n  static createTransferInstruction(\n    programId: PublicKey,\n    source: PublicKey,\n    destination: PublicKey,\n    owner: PublicKey,\n    multiSigners: Array<Signer>,\n    amount: number | u64,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      Layout.uint64('amount'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 3, // Transfer instruction\n        amount: new u64(amount).toBuffer(),\n      },\n      data,\n    );\n\n    let keys = [\n      {pubkey: source, isSigner: false, isWritable: true},\n      {pubkey: destination, isSigner: false, isWritable: true},\n    ];\n    if (multiSigners.length === 0) {\n      keys.push({\n        pubkey: owner,\n        isSigner: true,\n        isWritable: false,\n      });\n    } else {\n      keys.push({pubkey: owner, isSigner: false, isWritable: false});\n      multiSigners.forEach(signer =>\n        keys.push({\n          pubkey: signer.publicKey,\n          isSigner: true,\n          isWritable: false,\n        }),\n      );\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct an Approve instruction\n   *\n   * @param programId SPL Token program account\n   * @param account Public key of the account\n   * @param delegate Account authorized to perform a transfer of tokens from the source account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Maximum number of tokens the delegate may transfer\n   */\n  static createApproveInstruction(\n    programId: PublicKey,\n    account: PublicKey,\n    delegate: PublicKey,\n    owner: PublicKey,\n    multiSigners: Array<Signer>,\n    amount: number | u64,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      Layout.uint64('amount'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 4, // Approve instruction\n        amount: new u64(amount).toBuffer(),\n      },\n      data,\n    );\n\n    let keys = [\n      {pubkey: account, isSigner: false, isWritable: true},\n      {pubkey: delegate, isSigner: false, isWritable: false},\n    ];\n    if (multiSigners.length === 0) {\n      keys.push({pubkey: owner, isSigner: true, isWritable: false});\n    } else {\n      keys.push({pubkey: owner, isSigner: false, isWritable: false});\n      multiSigners.forEach(signer =>\n        keys.push({\n          pubkey: signer.publicKey,\n          isSigner: true,\n          isWritable: false,\n        }),\n      );\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct a Revoke instruction\n   *\n   * @param programId SPL Token program account\n   * @param account Public key of the account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   */\n  static createRevokeInstruction(\n    programId: PublicKey,\n    account: PublicKey,\n    owner: PublicKey,\n    multiSigners: Array<Signer>,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([BufferLayout.u8('instruction')]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 5, // Approve instruction\n      },\n      data,\n    );\n\n    let keys = [{pubkey: account, isSigner: false, isWritable: true}];\n    if (multiSigners.length === 0) {\n      keys.push({pubkey: owner, isSigner: true, isWritable: false});\n    } else {\n      keys.push({pubkey: owner, isSigner: false, isWritable: false});\n      multiSigners.forEach(signer =>\n        keys.push({\n          pubkey: signer.publicKey,\n          isSigner: true,\n          isWritable: false,\n        }),\n      );\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct a SetAuthority instruction\n   *\n   * @param programId SPL Token program account\n   * @param account Public key of the account\n   * @param newAuthority New authority of the account\n   * @param authorityType Type of authority to set\n   * @param currentAuthority Current authority of the specified type\n   * @param multiSigners Signing accounts if `currentAuthority` is a multiSig\n   */\n  static createSetAuthorityInstruction(\n    programId: PublicKey,\n    account: PublicKey,\n    newAuthority: PublicKey | null,\n    authorityType: AuthorityType,\n    currentAuthority: PublicKey,\n    multiSigners: Array<Signer>,\n  ): TransactionInstruction {\n    const commandDataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u8('authorityType'),\n      BufferLayout.u8('option'),\n      Layout.publicKey('newAuthority'),\n    ]);\n\n    let data = Buffer.alloc(1024);\n    {\n      const encodeLength = commandDataLayout.encode(\n        {\n          instruction: 6, // SetAuthority instruction\n          authorityType: AuthorityTypeCodes[authorityType],\n          option: newAuthority === null ? 0 : 1,\n          newAuthority: pubkeyToBuffer(newAuthority || new PublicKey(0)),\n        },\n        data,\n      );\n      data = data.slice(0, encodeLength);\n    }\n\n    let keys = [{pubkey: account, isSigner: false, isWritable: true}];\n    if (multiSigners.length === 0) {\n      keys.push({pubkey: currentAuthority, isSigner: true, isWritable: false});\n    } else {\n      keys.push({pubkey: currentAuthority, isSigner: false, isWritable: false});\n      multiSigners.forEach(signer =>\n        keys.push({\n          pubkey: signer.publicKey,\n          isSigner: true,\n          isWritable: false,\n        }),\n      );\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct a MintTo instruction\n   *\n   * @param programId SPL Token program account\n   * @param mint Public key of the mint\n   * @param dest Public key of the account to mint to\n   * @param authority The mint authority\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount Amount to mint\n   */\n  static createMintToInstruction(\n    programId: PublicKey,\n    mint: PublicKey,\n    dest: PublicKey,\n    authority: PublicKey,\n    multiSigners: Array<Signer>,\n    amount: number | u64,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      Layout.uint64('amount'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 7, // MintTo instruction\n        amount: new u64(amount).toBuffer(),\n      },\n      data,\n    );\n\n    let keys = [\n      {pubkey: mint, isSigner: false, isWritable: true},\n      {pubkey: dest, isSigner: false, isWritable: true},\n    ];\n    if (multiSigners.length === 0) {\n      keys.push({\n        pubkey: authority,\n        isSigner: true,\n        isWritable: false,\n      });\n    } else {\n      keys.push({pubkey: authority, isSigner: false, isWritable: false});\n      multiSigners.forEach(signer =>\n        keys.push({\n          pubkey: signer.publicKey,\n          isSigner: true,\n          isWritable: false,\n        }),\n      );\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct a Burn instruction\n   *\n   * @param programId SPL Token program account\n   * @param mint Mint for the account\n   * @param account Account to burn tokens from\n   * @param owner Owner of the account\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount amount to burn\n   */\n  static createBurnInstruction(\n    programId: PublicKey,\n    mint: PublicKey,\n    account: PublicKey,\n    owner: PublicKey,\n    multiSigners: Array<Signer>,\n    amount: number | u64,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      Layout.uint64('amount'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 8, // Burn instruction\n        amount: new u64(amount).toBuffer(),\n      },\n      data,\n    );\n\n    let keys = [\n      {pubkey: account, isSigner: false, isWritable: true},\n      {pubkey: mint, isSigner: false, isWritable: true},\n    ];\n    if (multiSigners.length === 0) {\n      keys.push({\n        pubkey: owner,\n        isSigner: true,\n        isWritable: false,\n      });\n    } else {\n      keys.push({pubkey: owner, isSigner: false, isWritable: false});\n      multiSigners.forEach(signer =>\n        keys.push({\n          pubkey: signer.publicKey,\n          isSigner: true,\n          isWritable: false,\n        }),\n      );\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct a Close instruction\n   *\n   * @param programId SPL Token program account\n   * @param account Account to close\n   * @param dest Account to receive the remaining balance of the closed account\n   * @param authority Account Close authority\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   */\n  static createCloseAccountInstruction(\n    programId: PublicKey,\n    account: PublicKey,\n    dest: PublicKey,\n    owner: PublicKey,\n    multiSigners: Array<Signer>,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([BufferLayout.u8('instruction')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 9, // CloseAccount instruction\n      },\n      data,\n    );\n\n    let keys = [\n      {pubkey: account, isSigner: false, isWritable: true},\n      {pubkey: dest, isSigner: false, isWritable: true},\n    ];\n    if (multiSigners.length === 0) {\n      keys.push({pubkey: owner, isSigner: true, isWritable: false});\n    } else {\n      keys.push({pubkey: owner, isSigner: false, isWritable: false});\n      multiSigners.forEach(signer =>\n        keys.push({\n          pubkey: signer.publicKey,\n          isSigner: true,\n          isWritable: false,\n        }),\n      );\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct a Freeze instruction\n   *\n   * @param programId SPL Token program account\n   * @param account Account to freeze\n   * @param mint Mint account\n   * @param authority Mint freeze authority\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   */\n  static createFreezeAccountInstruction(\n    programId: PublicKey,\n    account: PublicKey,\n    mint: PublicKey,\n    authority: PublicKey,\n    multiSigners: Array<Signer>,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([BufferLayout.u8('instruction')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 10, // FreezeAccount instruction\n      },\n      data,\n    );\n\n    let keys = [\n      {pubkey: account, isSigner: false, isWritable: true},\n      {pubkey: mint, isSigner: false, isWritable: false},\n    ];\n    if (multiSigners.length === 0) {\n      keys.push({pubkey: authority, isSigner: true, isWritable: false});\n    } else {\n      keys.push({pubkey: authority, isSigner: false, isWritable: false});\n      multiSigners.forEach(signer =>\n        keys.push({\n          pubkey: signer.publicKey,\n          isSigner: true,\n          isWritable: false,\n        }),\n      );\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct a Thaw instruction\n   *\n   * @param programId SPL Token program account\n   * @param account Account to thaw\n   * @param mint Mint account\n   * @param authority Mint freeze authority\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   */\n  static createThawAccountInstruction(\n    programId: PublicKey,\n    account: PublicKey,\n    mint: PublicKey,\n    authority: PublicKey,\n    multiSigners: Array<Signer>,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([BufferLayout.u8('instruction')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 11, // ThawAccount instruction\n      },\n      data,\n    );\n\n    let keys = [\n      {pubkey: account, isSigner: false, isWritable: true},\n      {pubkey: mint, isSigner: false, isWritable: false},\n    ];\n    if (multiSigners.length === 0) {\n      keys.push({pubkey: authority, isSigner: true, isWritable: false});\n    } else {\n      keys.push({pubkey: authority, isSigner: false, isWritable: false});\n      multiSigners.forEach(signer =>\n        keys.push({\n          pubkey: signer.publicKey,\n          isSigner: true,\n          isWritable: false,\n        }),\n      );\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct a TransferChecked instruction\n   *\n   * @param programId SPL Token program account\n   * @param source Source account\n   * @param mint Mint account\n   * @param destination Destination account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount Number of tokens to transfer\n   * @param decimals Number of decimals in transfer amount\n   */\n  static createTransferCheckedInstruction(\n    programId: PublicKey,\n    source: PublicKey,\n    mint: PublicKey,\n    destination: PublicKey,\n    owner: PublicKey,\n    multiSigners: Array<Signer>,\n    amount: number | u64,\n    decimals: number,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      Layout.uint64('amount'),\n      BufferLayout.u8('decimals'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 12, // TransferChecked instruction\n        amount: new u64(amount).toBuffer(),\n        decimals,\n      },\n      data,\n    );\n\n    let keys = [\n      {pubkey: source, isSigner: false, isWritable: true},\n      {pubkey: mint, isSigner: false, isWritable: false},\n      {pubkey: destination, isSigner: false, isWritable: true},\n    ];\n    if (multiSigners.length === 0) {\n      keys.push({\n        pubkey: owner,\n        isSigner: true,\n        isWritable: false,\n      });\n    } else {\n      keys.push({pubkey: owner, isSigner: false, isWritable: false});\n      multiSigners.forEach(signer =>\n        keys.push({\n          pubkey: signer.publicKey,\n          isSigner: true,\n          isWritable: false,\n        }),\n      );\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct an ApproveChecked instruction\n   *\n   * @param programId SPL Token program account\n   * @param account Public key of the account\n   * @param mint Mint account\n   * @param delegate Account authorized to perform a transfer of tokens from the source account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Maximum number of tokens the delegate may transfer\n   * @param decimals Number of decimals in approve amount\n   */\n  static createApproveCheckedInstruction(\n    programId: PublicKey,\n    account: PublicKey,\n    mint: PublicKey,\n    delegate: PublicKey,\n    owner: PublicKey,\n    multiSigners: Array<Signer>,\n    amount: number | u64,\n    decimals: number,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      Layout.uint64('amount'),\n      BufferLayout.u8('decimals'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 13, // ApproveChecked instruction\n        amount: new u64(amount).toBuffer(),\n        decimals,\n      },\n      data,\n    );\n\n    let keys = [\n      {pubkey: account, isSigner: false, isWritable: true},\n      {pubkey: mint, isSigner: false, isWritable: false},\n      {pubkey: delegate, isSigner: false, isWritable: false},\n    ];\n    if (multiSigners.length === 0) {\n      keys.push({pubkey: owner, isSigner: true, isWritable: false});\n    } else {\n      keys.push({pubkey: owner, isSigner: false, isWritable: false});\n      multiSigners.forEach(signer =>\n        keys.push({\n          pubkey: signer.publicKey,\n          isSigner: true,\n          isWritable: false,\n        }),\n      );\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct a MintToChecked instruction\n   *\n   * @param programId SPL Token program account\n   * @param mint Public key of the mint\n   * @param dest Public key of the account to mint to\n   * @param authority The mint authority\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount Amount to mint\n   * @param decimals Number of decimals in amount to mint\n   */\n  static createMintToCheckedInstruction(\n    programId: PublicKey,\n    mint: PublicKey,\n    dest: PublicKey,\n    authority: PublicKey,\n    multiSigners: Array<Signer>,\n    amount: number | u64,\n    decimals: number,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      Layout.uint64('amount'),\n      BufferLayout.u8('decimals'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 14, // MintToChecked instruction\n        amount: new u64(amount).toBuffer(),\n        decimals,\n      },\n      data,\n    );\n\n    let keys = [\n      {pubkey: mint, isSigner: false, isWritable: true},\n      {pubkey: dest, isSigner: false, isWritable: true},\n    ];\n    if (multiSigners.length === 0) {\n      keys.push({\n        pubkey: authority,\n        isSigner: true,\n        isWritable: false,\n      });\n    } else {\n      keys.push({pubkey: authority, isSigner: false, isWritable: false});\n      multiSigners.forEach(signer =>\n        keys.push({\n          pubkey: signer.publicKey,\n          isSigner: true,\n          isWritable: false,\n        }),\n      );\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct a BurnChecked instruction\n   *\n   * @param programId SPL Token program account\n   * @param mint Mint for the account\n   * @param account Account to burn tokens from\n   * @param owner Owner of the account\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount amount to burn\n   */\n  static createBurnCheckedInstruction(\n    programId: PublicKey,\n    mint: PublicKey,\n    account: PublicKey,\n    owner: PublicKey,\n    multiSigners: Array<Signer>,\n    amount: number | u64,\n    decimals: number,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      Layout.uint64('amount'),\n      BufferLayout.u8('decimals'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 15, // BurnChecked instruction\n        amount: new u64(amount).toBuffer(),\n        decimals,\n      },\n      data,\n    );\n\n    let keys = [\n      {pubkey: account, isSigner: false, isWritable: true},\n      {pubkey: mint, isSigner: false, isWritable: true},\n    ];\n    if (multiSigners.length === 0) {\n      keys.push({\n        pubkey: owner,\n        isSigner: true,\n        isWritable: false,\n      });\n    } else {\n      keys.push({pubkey: owner, isSigner: false, isWritable: false});\n      multiSigners.forEach(signer =>\n        keys.push({\n          pubkey: signer.publicKey,\n          isSigner: true,\n          isWritable: false,\n        }),\n      );\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct a SyncNative instruction\n   *\n   * @param programId SPL Token program account\n   * @param nativeAccount Account to sync lamports from\n   */\n  static createSyncNativeInstruction(\n    programId: PublicKey,\n    nativeAccount: PublicKey,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([BufferLayout.u8('instruction')]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 17, // SyncNative instruction\n      },\n      data,\n    );\n\n    let keys = [{pubkey: nativeAccount, isSigner: false, isWritable: true}];\n    return new TransactionInstruction({keys, programId: programId, data});\n  }\n\n  /**\n   * Get the address for the associated token account\n   *\n   * @param associatedProgramId SPL Associated Token program account\n   * @param programId SPL Token program account\n   * @param mint Token mint account\n   * @param owner Owner of the new account\n   * @return Public key of the associated token account\n   */\n  static async getAssociatedTokenAddress(\n    associatedProgramId: PublicKey,\n    programId: PublicKey,\n    mint: PublicKey,\n    owner: PublicKey,\n    allowOwnerOffCurve: boolean = false,\n  ): Promise<PublicKey> {\n    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer())) {\n      throw new Error(`Owner cannot sign: ${owner.toString()}`);\n    }\n    return (\n      await PublicKey.findProgramAddress(\n        [owner.toBuffer(), programId.toBuffer(), mint.toBuffer()],\n        associatedProgramId,\n      )\n    )[0];\n  }\n\n  /**\n   * Construct the AssociatedTokenProgram instruction to create the associated\n   * token account\n   *\n   * @param associatedProgramId SPL Associated Token program account\n   * @param programId SPL Token program account\n   * @param mint Token mint account\n   * @param associatedAccount New associated account\n   * @param owner Owner of the new account\n   * @param payer Payer of fees\n   */\n  static createAssociatedTokenAccountInstruction(\n    associatedProgramId: PublicKey,\n    programId: PublicKey,\n    mint: PublicKey,\n    associatedAccount: PublicKey,\n    owner: PublicKey,\n    payer: PublicKey,\n  ): TransactionInstruction {\n    const data = Buffer.alloc(0);\n\n    let keys = [\n      {pubkey: payer, isSigner: true, isWritable: true},\n      {pubkey: associatedAccount, isSigner: false, isWritable: true},\n      {pubkey: owner, isSigner: false, isWritable: false},\n      {pubkey: mint, isSigner: false, isWritable: false},\n      {pubkey: SystemProgram.programId, isSigner: false, isWritable: false},\n      {pubkey: programId, isSigner: false, isWritable: false},\n      {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n    ];\n\n    return new TransactionInstruction({\n      keys,\n      programId: associatedProgramId,\n      data,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}