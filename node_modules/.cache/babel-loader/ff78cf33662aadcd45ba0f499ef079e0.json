{"ast":null,"code":"import axios from 'axios';\nimport * as openpgp from 'openpgp';\nimport { v4 as uuidv4 } from 'uuid';\n/**\n  * CircleAPI implementation\n  * @returns \n  */\nexport const circleAPIBase = 'https://api-sandbox.circle.com';\nexport const backendBase = process.env.REACT_APP_BASE_APP;\nexport const circleAPIAuthToken = process.env.REACT_APP_CIRCLE_API_AUTH_KEY;\nexport const fetchPCIKeys = async () => {\n  try {\n    /**\n     * API call to fetch the encryption key based on the token provided\n     */\n    let config = {\n      headers: {\n        'Content-Type': 'application/json;charset=utf8',\n        'Authorization': `Bearer ${circleAPIAuthToken}`\n      }\n    };\n    const result = await axios.get(`${circleAPIBase}/v1/encryption/public`, config);\n    const encryptionPublicKey = result.data.data.publicKey;\n    const keyId = result.data.data.keyId;\n    return {\n      encryptionPublicKey,\n      keyId,\n      status: true\n    };\n  } catch (err) {\n    return {\n      status: true,\n      error: err\n    };\n  }\n};\nexport const makePayment = async paymentParams => {\n  try {\n    const keyId = paymentParams.keyId;\n    const publicKey = paymentParams.encryptionPublicKey;\n    const amount = paymentParams.amount;\n    const key = {\n      keyId,\n      publicKey\n    };\n    const exampleCards = [{\n      title: '4007400000000007 (visa)',\n      formData: {\n        cardNumber: '4007400000000007',\n        cvv: '123',\n        expiry: {\n          month: '01',\n          year: '2025'\n        },\n        name: 'Customer 0001',\n        country: 'US',\n        district: 'MA',\n        line1: 'Test',\n        line2: '',\n        city: 'Test City',\n        postalCode: '11111',\n        phoneNumber: '+12025550180',\n        email: 'customer-0001@circle.com'\n      }\n    }];\n    const tempDetails = {\n      number: exampleCards[0].formData.cardNumber.trim().replace(/\\D/g, ''),\n      cvv: exampleCards[0].formData.cvv\n    };\n    if (!publicKey || !keyId) {\n      throw new Error('Unable to encrypt data');\n    }\n    //atob\n    const decodedPublicKey = Buffer.from(publicKey, 'base64').toString('binary');\n    const options = {\n      message: await openpgp.message.fromText(JSON.stringify(tempDetails)),\n      publicKeys: (await openpgp.key.readArmored(decodedPublicKey)).keys\n    };\n    const ciphertext = await openpgp.encrypt(options);\n    //btoa\n    const encryptedMessage = Buffer.from(ciphertext.data).toString('base64');\n    /**\n    * API call to save the card details\n    */\n    const cardDetails = {\n      \"idempotencyKey\": `${uuidv4()}`,\n      \"expMonth\": 1,\n      \"expYear\": 2025,\n      \"keyId\": `${keyId}`,\n      \"encryptedData\": `${encryptedMessage}`,\n      \"billingDetails\": {\n        \"line1\": \"Test\",\n        \"line2\": \"\",\n        \"city\": \"Test City\",\n        \"district\": \"MA\",\n        \"postalCode\": \"11111\",\n        \"country\": \"US\",\n        \"name\": \"Customer 0001\"\n      },\n      \"metadata\": {\n        \"phoneNumber\": \"+12025550180\",\n        \"email\": \"customer-0001@circle.com\",\n        \"sessionId\": \"xxx\",\n        \"ipAddress\": \"172.33.222.1\"\n      }\n    };\n    let config = {\n      headers: {\n        'Content-Type': 'application/json;charset=utf8',\n        'Authorization': `Bearer ${circleAPIAuthToken}`\n      }\n    };\n    let cardResult = await axios.post(`${circleAPIBase}/v1/cards`, cardDetails, config);\n\n    /**\n     * sample returned response\n     */\n    //  cardResult = {\"data\":{\n    //    \"id\":\"bdf3e5d0-ef69-4864-9f6f-b6e254b4f7d8\", //important key, as this key will be used in the payment API to make the payment\n    //    \"status\":\"pending\",\"last4\":\"0007\",\"billingDetails\":{\"name\":\"Customer 0001\",\"line1\":\"Test\",\"city\":\"Test City\",\"postalCode\":\"11111\",\"district\":\"MA\",\"country\":\"US\"},\"expMonth\":1,\"expYear\":2025,\"network\":\"VISA\",\"bin\":\"400740\",\"issuerCountry\":\"ES\",\"fundingType\":\"debit\",\"fingerprint\":\"603b2185-1901-4eae-9b98-cc20c32d0709\",\"verification\":{\"cvv\":\"pending\",\"avs\":\"pending\"},\"createDate\":\"2021-09-26T22:35:19.195Z\",\"metadata\":{\"phoneNumber\":\"+12025550180\",\"email\":\"customer-0001@circle.com\"},\"updateDate\":\"2021-09-26T22:35:19.195Z\"}}\n\n    const cardReturnedKey = cardResult.data.data.id;\n    /** \n     * API call to make the payment with the card details\n     */\n\n    const paymentCardDetails = {\n      \"idempotencyKey\": `${uuidv4()}`,\n      \"amount\": {\n        \"amount\": `${amount}`,\n        \"currency\": \"USD\"\n      },\n      \"verification\": \"cvv\",\n      \"source\": {\n        \"id\": cardReturnedKey,\n        \"type\": \"card\"\n      },\n      \"description\": \"\",\n      \"channel\": \"\",\n      \"metadata\": {\n        \"phoneNumber\": \"+12025550180\",\n        \"email\": \"customer-0001@circle.com\",\n        \"sessionId\": \"xxx\",\n        \"ipAddress\": \"172.33.222.1\"\n      },\n      \"encryptedData\": `${encryptedMessage}`,\n      \"keyId\": keyId\n    };\n    config = {\n      headers: {\n        'Content-Type': 'application/json;charset=utf8',\n        'Authorization': `Bearer ${circleAPIAuthToken}`\n      }\n    };\n    let paymentResult = await axios.post(`${circleAPIBase}/v1/payments`, paymentCardDetails, config);\n\n    /**\n     * Dummy payment response\n     */\n    // paymentResult = {\n    //   \"data\":{\n    //     \"id\":\"40f3d404-2d34-492b-af80-c29ae5e90588\", //paymentId of the transaction, we can query the status of the payment based on this key\n    //     \"type\":\"payment\",\n    //     \"merchantId\":\"c147a9bc-8c20-4665-9430-6612a099ed29\",\n    //     \"merchantWalletId\":\"1000176251\",\n    //     \"source\":{\"id\":\"bdf3e5d0-ef69-4864-9f6f-b6e254b4f7d8\",\"type\":\"card\"},\n    //     \"description\":\"Merchant Payment\",\"amount\":{\"amount\":\"5.00\",\"currency\":\"USD\"},\n    //     \"status\":\"pending\",\n    //     \"refunds\":[],\n    //     \"createDate\":\"2021-09-26T22:35:20.655Z\",\"updateDate\":\"2021-09-26T22:35:20.655Z\",\"metadata\":{\"phoneNumber\":\"+12025550180\",\"email\":\"customer-0001@circle.com\"}}}\n\n    // const paymentId = paymentResult.data.data.id\n    return {\n      status: true,\n      paymentData: paymentResult.data.data\n    };\n  } catch (err) {\n    return {\n      status: false,\n      error: err\n    };\n  }\n};\n\n/**\n * CircleAPI checkPaymentStatus\n */\n\nexport const checkPaymentStatus = async paymentId => {\n  try {\n    if (!paymentId) {\n      throw Error(\"Payment Id is required to fetch the payment status\");\n    }\n    /**\n     * API call to check \n     */\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json;charset=utf8',\n        'Authorization': `Bearer ${circleAPIAuthToken}`\n      }\n    };\n    let paymentStatusResult = await axios.get(`${circleAPIBase}/v1/payments/${paymentId}`, config);\n    /**\n     * Dummy payment status \n     */\n    // paymentStatusResult = {\n    //    \"data\":{\n    //      \"id\":\"40f3d404-2d34-492b-af80-c29ae5e90588\",\"type\":\"payment\",\"merchantId\":\"c147a9bc-8c20-4665-9430-6612a099ed29\",\"merchantWalletId\":\"1000176251\",\"source\":{\"id\":\"bdf3e5d0-ef69-4864-9f6f-b6e254b4f7d8\",\"type\":\"card\"},\n    //      \"description\":\"Merchant Payment\",\"amount\":{\"amount\":\"5.00\",\"currency\":\"USD\"},\n    //      \"fees\":{\"amount\":\"0.45\",\"currency\":\"USD\"},\n    //      \"status\":\"confirmed\",\"verification\":{\"cvv\":\"pass\",\"avs\":\"Y\"},\"refunds\":[],\"createDate\":\"2021-09-26T22:35:20.655Z\",\"updateDate\":\"2021-09-26T22:35:21.393420Z\",\"metadata\":{\"phoneNumber\":\"+12025550180\",\"email\":\"customer-0001@circle.com\"}}}\n\n    if (paymentStatusResult.data.data.status === \"confirmed\") {\n      return {\n        status: true\n      };\n    }\n    return {\n      status: false\n    };\n  } catch (err) {\n    return {\n      status: false,\n      error: err\n    };\n  }\n};\nexport const requestSOLFromBackend = async (solAmount, selfPublicKey) => {\n  try {\n    /**\n     * API call to fetch the encryption key based on the token provided\n     */\n    let config = {\n      headers: {\n        'Content-Type': 'application/json;charset=utf8'\n      }\n    };\n    const result = await axios.post(`${backendBase}/transferToken`, {\n      solAmount,\n      toPublicKey: selfPublicKey\n    }, config);\n    if (!result.status) {\n      return {\n        status: false,\n        message: \"Please check the sender account balance, if it has SOL balance to transfer.\"\n      };\n    }\n    return {\n      status: true,\n      message: \"Successfully Transferred the amount.\"\n    };\n  } catch (err) {\n    return {\n      status: false,\n      error: err\n    };\n  }\n};","map":{"version":3,"names":["axios","openpgp","v4","uuidv4","circleAPIBase","backendBase","process","env","REACT_APP_BASE_APP","circleAPIAuthToken","REACT_APP_CIRCLE_API_AUTH_KEY","fetchPCIKeys","config","headers","result","get","encryptionPublicKey","data","publicKey","keyId","status","err","error","makePayment","paymentParams","amount","key","exampleCards","title","formData","cardNumber","cvv","expiry","month","year","name","country","district","line1","line2","city","postalCode","phoneNumber","email","tempDetails","number","trim","replace","Error","decodedPublicKey","Buffer","from","toString","options","message","fromText","JSON","stringify","publicKeys","readArmored","keys","ciphertext","encrypt","encryptedMessage","cardDetails","cardResult","post","cardReturnedKey","id","paymentCardDetails","paymentResult","paymentData","checkPaymentStatus","paymentId","paymentStatusResult","requestSOLFromBackend","solAmount","selfPublicKey","toPublicKey"],"sources":["/Users/tashapais/Documents/Github/lionhack/src/utils/paymentGateway.js"],"sourcesContent":["import axios from 'axios';\nimport * as openpgp from 'openpgp'\nimport { v4 as uuidv4 } from 'uuid';\n/**\n  * CircleAPI implementation\n  * @returns \n  */\nexport const circleAPIBase = 'https://api-sandbox.circle.com'\nexport const backendBase = process.env.REACT_APP_BASE_APP\nexport const circleAPIAuthToken = process.env.REACT_APP_CIRCLE_API_AUTH_KEY\nexport const fetchPCIKeys = async () => {\n  try {\n\n    /**\n     * API call to fetch the encryption key based on the token provided\n     */\n    let config = {\n      headers: {\n        'Content-Type': 'application/json;charset=utf8',\n        'Authorization': `Bearer ${circleAPIAuthToken}`\n      }\n    };\n    const result = await axios.get(`${circleAPIBase}/v1/encryption/public`, config)\n    const encryptionPublicKey = result.data.data.publicKey\n    const keyId = result.data.data.keyId\n    return {\n      encryptionPublicKey,\n      keyId,\n      status: true\n    }\n\n  } catch (err) {\n    return {\n      status: true,\n      error: err\n    }\n  }\n\n}\n\nexport const makePayment = async (paymentParams) => {\n  try {\n\n    const keyId = paymentParams.keyId\n    const publicKey = paymentParams.encryptionPublicKey\n    const amount = paymentParams.amount\n    const key = {\n      keyId,\n      publicKey\n    }\n\n\n    const exampleCards = [\n      {\n        title: '4007400000000007 (visa)',\n        formData: {\n          cardNumber: '4007400000000007',\n          cvv: '123',\n          expiry: {\n            month: '01',\n            year: '2025',\n          },\n          name: 'Customer 0001',\n          country: 'US',\n          district: 'MA',\n          line1: 'Test',\n          line2: '',\n          city: 'Test City',\n          postalCode: '11111',\n          phoneNumber: '+12025550180',\n          email: 'customer-0001@circle.com',\n        },\n      }\n    ]\n\n    const tempDetails = {\n      number: exampleCards[0].formData.cardNumber.trim().replace(/\\D/g, ''),\n      cvv: exampleCards[0].formData.cvv\n    }\n\n    if (!publicKey || !keyId) {\n      throw new Error('Unable to encrypt data')\n    }\n    //atob\n    const decodedPublicKey = Buffer.from(publicKey, 'base64').toString('binary')\n    const options = {\n      message: await openpgp.message.fromText(JSON.stringify(tempDetails)),\n      publicKeys: (await openpgp.key.readArmored(decodedPublicKey)).keys,\n    }\n\n    const ciphertext = await openpgp.encrypt(options)\n    //btoa\n    const encryptedMessage = Buffer.from(ciphertext.data).toString('base64')\n    /**\n   * API call to save the card details\n   */\n    const cardDetails = {\n      \"idempotencyKey\": `${uuidv4()}`,\n      \"expMonth\": 1, \"expYear\": 2025, \"keyId\": `${keyId}`,\n      \"encryptedData\": `${encryptedMessage}`, \"billingDetails\": { \"line1\": \"Test\", \"line2\": \"\", \"city\": \"Test City\", \"district\": \"MA\", \"postalCode\": \"11111\", \"country\": \"US\", \"name\": \"Customer 0001\" },\n      \"metadata\": { \"phoneNumber\": \"+12025550180\", \"email\": \"customer-0001@circle.com\", \"sessionId\": \"xxx\", \"ipAddress\": \"172.33.222.1\" }\n    }\n\n    let config = {\n      headers: {\n        'Content-Type': 'application/json;charset=utf8',\n        'Authorization': `Bearer ${circleAPIAuthToken}`\n      }\n    };\n    let cardResult = await axios.post(`${circleAPIBase}/v1/cards`, cardDetails, config)\n\n    /**\n     * sample returned response\n     */\n    //  cardResult = {\"data\":{\n    //    \"id\":\"bdf3e5d0-ef69-4864-9f6f-b6e254b4f7d8\", //important key, as this key will be used in the payment API to make the payment\n    //    \"status\":\"pending\",\"last4\":\"0007\",\"billingDetails\":{\"name\":\"Customer 0001\",\"line1\":\"Test\",\"city\":\"Test City\",\"postalCode\":\"11111\",\"district\":\"MA\",\"country\":\"US\"},\"expMonth\":1,\"expYear\":2025,\"network\":\"VISA\",\"bin\":\"400740\",\"issuerCountry\":\"ES\",\"fundingType\":\"debit\",\"fingerprint\":\"603b2185-1901-4eae-9b98-cc20c32d0709\",\"verification\":{\"cvv\":\"pending\",\"avs\":\"pending\"},\"createDate\":\"2021-09-26T22:35:19.195Z\",\"metadata\":{\"phoneNumber\":\"+12025550180\",\"email\":\"customer-0001@circle.com\"},\"updateDate\":\"2021-09-26T22:35:19.195Z\"}}\n\n\n    const cardReturnedKey = cardResult.data.data.id\n    /** \n     * API call to make the payment with the card details\n     */\n\n    const paymentCardDetails = {\n      \"idempotencyKey\": `${uuidv4()}`,\n      \"amount\": { \"amount\": `${amount}`, \"currency\": \"USD\" },\n      \"verification\": \"cvv\", \"source\": {\n        \"id\": cardReturnedKey,\n        \"type\": \"card\"\n      },\n      \"description\": \"\", \"channel\": \"\",\n      \"metadata\": {\n        \"phoneNumber\": \"+12025550180\", \"email\": \"customer-0001@circle.com\", \"sessionId\": \"xxx\", \"ipAddress\": \"172.33.222.1\"\n      },\n      \"encryptedData\": `${encryptedMessage}`,\n      \"keyId\": keyId\n    }\n\n    config = {\n      headers: {\n        'Content-Type': 'application/json;charset=utf8',\n        'Authorization': `Bearer ${circleAPIAuthToken}`\n      }\n    };\n    let paymentResult = await axios.post(`${circleAPIBase}/v1/payments`, paymentCardDetails, config)\n\n\n    /**\n     * Dummy payment response\n     */\n    // paymentResult = {\n    //   \"data\":{\n    //     \"id\":\"40f3d404-2d34-492b-af80-c29ae5e90588\", //paymentId of the transaction, we can query the status of the payment based on this key\n    //     \"type\":\"payment\",\n    //     \"merchantId\":\"c147a9bc-8c20-4665-9430-6612a099ed29\",\n    //     \"merchantWalletId\":\"1000176251\",\n    //     \"source\":{\"id\":\"bdf3e5d0-ef69-4864-9f6f-b6e254b4f7d8\",\"type\":\"card\"},\n    //     \"description\":\"Merchant Payment\",\"amount\":{\"amount\":\"5.00\",\"currency\":\"USD\"},\n    //     \"status\":\"pending\",\n    //     \"refunds\":[],\n    //     \"createDate\":\"2021-09-26T22:35:20.655Z\",\"updateDate\":\"2021-09-26T22:35:20.655Z\",\"metadata\":{\"phoneNumber\":\"+12025550180\",\"email\":\"customer-0001@circle.com\"}}}\n\n\n    // const paymentId = paymentResult.data.data.id\n    return { status: true, paymentData: paymentResult.data.data }\n\n  }\n  catch (err) {\n    return {\n      status: false,\n      error: err\n    }\n  }\n}\n\n\n/**\n * CircleAPI checkPaymentStatus\n */\n\nexport const checkPaymentStatus = async (paymentId) => {\n  try {\n\n    if (!paymentId) {\n      throw Error(\"Payment Id is required to fetch the payment status\")\n    }\n    /**\n     * API call to check \n     */\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json;charset=utf8',\n        'Authorization': `Bearer ${circleAPIAuthToken}`\n      }\n    };\n    let paymentStatusResult = await axios.get(`${circleAPIBase}/v1/payments/${paymentId}`, config)\n    /**\n     * Dummy payment status \n     */\n    // paymentStatusResult = {\n    //    \"data\":{\n    //      \"id\":\"40f3d404-2d34-492b-af80-c29ae5e90588\",\"type\":\"payment\",\"merchantId\":\"c147a9bc-8c20-4665-9430-6612a099ed29\",\"merchantWalletId\":\"1000176251\",\"source\":{\"id\":\"bdf3e5d0-ef69-4864-9f6f-b6e254b4f7d8\",\"type\":\"card\"},\n    //      \"description\":\"Merchant Payment\",\"amount\":{\"amount\":\"5.00\",\"currency\":\"USD\"},\n    //      \"fees\":{\"amount\":\"0.45\",\"currency\":\"USD\"},\n    //      \"status\":\"confirmed\",\"verification\":{\"cvv\":\"pass\",\"avs\":\"Y\"},\"refunds\":[],\"createDate\":\"2021-09-26T22:35:20.655Z\",\"updateDate\":\"2021-09-26T22:35:21.393420Z\",\"metadata\":{\"phoneNumber\":\"+12025550180\",\"email\":\"customer-0001@circle.com\"}}}\n\n\n    if (paymentStatusResult.data.data.status === \"confirmed\") {\n\n      return {\n        status: true\n      }\n\n    }\n    return {\n      status: false\n    }\n  } catch (err) {\n    return {\n      status: false,\n      error: err\n    }\n  }\n}\n\nexport const requestSOLFromBackend = async (solAmount, selfPublicKey) => {\n  try {\n\n    /**\n     * API call to fetch the encryption key based on the token provided\n     */\n    let config = {\n      headers: {\n        'Content-Type': 'application/json;charset=utf8'\n      }\n    };\n    const result = await axios.post(`${backendBase}/transferToken`, {\n      solAmount,\n      toPublicKey: selfPublicKey\n    }, config)\n    if (!result.status) {\n      return {\n        status: false,\n        message: \"Please check the sender account balance, if it has SOL balance to transfer.\"\n      }\n    }\n\n    return {\n      status: true,\n      message: \"Successfully Transferred the amount.\"\n    }\n\n  } catch (err) {\n    return {\n      status: false,\n      error: err\n    }\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}